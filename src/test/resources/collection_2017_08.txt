{
  "3d spiral": {
    "icon": "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\nIPD/Ad0rjimoIqQPAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "// used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "var i int \u003d 0,",
        "p cplx \u003d juliapoint if juliaset else c,",
        "zlast cplx \u003d 0,",
        "z cplx,",
        "znext cplx \u003d 0;",
        "",
        "extern mandelinit expr \u003d \"0\";",
        "",
        "z \u003d c if juliaset else mandelinit;",
        "",
        "extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "var color quat;",
        "",
        "while {",
        "znext \u003d function;",
        "not breakcondition(i, znext, z, zlast, c, p, color)",
        "} do {",
        "// advance to next values",
        "zlast \u003d z;",
        "z \u003d znext;",
        "}",
        "",
        "// return color",
        "color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "// if the fractal accumulates some values",
        "// like in traps or addends, here is a got place to do it.",
        "",
        "func breakcondition(i, znext, z, zlast, c, p, color) {",
        "func bailoutcolor() {",
        "extern bailout real \u003d 128;",
        "extern max_power real \u003d 2;",
        "var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "value \u003d bailoutvalue ;",
        "",
        "extern bailouttransfer expr \u003d \"value\";",
        "",
        "extern bailoutpalette palette \u003d [",
        "[#006, #26c, #fff, #fa0, #303]];",
        "",
        "color \u003d bailoutpalette bailouttransfer",
        "}",
        "",
        "func lakecolor() {",
        "extern epsilon real \u003d 1e-9;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "value \u003d lakevalue;",
        "",
        "extern laketransfer expr \u003d",
        "\"arcnorm znext : value\";",
        "",
        "extern lakepalette palette \u003d [",
        "[#000, #000, #000, #000],",
        "[#f00, #ff0, #0f8, #00f],",
        "[#f88, #ff8, #afc, #88f]];",
        "",
        "color \u003d lakepalette laketransfer",
        "}",
        "",
        "{ lakecolor() ; true } if not next(i, maxdepth) else",
        "radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "}",
        "",
        "escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "// this one is just here for testing light effects",
        "// circle + donut + green bg",
        "var rc \u003d rad c;",
        "",
        "{ value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "{ value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "{ value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings. * ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "var c cplx \u003d map(x, y);",
        "var value real;",
        "get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "var c00 cplx \u003d map(x, y),",
        "c10 cplx \u003d map(x + 1, y + 0.5),",
        "c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "var h00 real, h10 real, h01 real; // heights",
        "",
        "// color is already kinda super-sampled",
        "var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "// get height out of value",
        "func height(value) {",
        "    extern valuetransfer expr \u003d \"value\";",
        "    valuetransfer",
        "}",
        "",
        "h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "// get the normal vector (cross product)",
        "var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "// normalize np and nz",
        "var nlen \u003d sqrt(rad2 np + sqr nz);",
        "np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "// get light direction",
        "extern lightAngleToNormal real \u003d 0; // angle to normal",
        "extern lightDirectionAngle real \u003d 0; // 0 is to positive x.",
        "",
        "def lz \u003d cos lightAngleToNormal;",
        "",
        "def lx \u003d cos lightDirectionAngle * sqrt(1 - sqr lz);",
        "def ly \u003d sin lightDirectionAngle * sqrt(1 - sqr lz);",
        "",
        "// Lambert\u0027s law.",
        "var cosA real \u003d dot(lx : ly, np) + lz nz;",
        "//if cosA \u003c 0 then cosA \u003d 0;",
        "",
        "// diffuse reflexion with ambient factor",
        "extern ambientIntensity real \u003d 0.25;",
        "extern diffuseIntensity real \u003d 1;",
        "",
        "color.a \u003d color.a * (ambientIntensity + diffuseIntensity cosA);",
        "",
        "if color.a \u003c 0 then color.a \u003d 0;",
        "",
        "// Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "extern specularIntensity real \u003d 1;",
        "",
        "extern shininess real \u003d 8;",
        "",
        "// r \u003d 2 n l - l; v \u003d 0:0:1",
        "var specularReflection \u003d 2 cosA nz - lz;",
        "",
        "// 100 because L in the Lab-Model is between 0 and 100",
        "if specularReflection \u003e 0 then",
        "color.a \u003d color.a + 100 * specularIntensity * specularReflection ^ shininess;",
        "",
        "color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "// two or three dimensions?",
        "def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "func drawaapixel(x, y) {",
        "0.25 (",
        "drawpixel(x - 0.375, y - 0.125) + ",
        "drawpixel(x + 0.125, y - 0.375) + ",
        "drawpixel(x + 0.375, y + 0.125) +",
        "drawpixel(x - 0.125, y + 0.375) ",
        ");",
        "}",
        "",
        "// which function to apply?",
        "def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "ambientIntensity": 0.75,
          "lightDirectionAngle": 0.0,
          "diffuseIntensity": 0.25,
          "lightAngleToNormal": 1.5,
          "specularIntensity": 4.0,
          "shininess": 64.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm c",
          "valuetransfer": "log(1+value)/20000",
          "lakevalue": "znext.x"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            6.653649768322458E-8,
            1.5371891480166457E-7,
            -1.5371891480166457E-7,
            6.653649768322458E-8,
            -0.7434985127993746,
            0.13193095501298543
          ]
        }
      }
    }
  },
  "amazin minmax": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap. This one is in fact very similar to TwoFold",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) { ",
        "",
        "    var trapmin real \u003d bailout;",
        "    var trapminpoint \u003d 0:0;",
        "    var trapminindex \u003d -1;",
        "    ",
        "    var trapmax real \u003d 0;",
        "    var trapmaxpoint \u003d 0:0;",
        "    var trapmaxindex \u003d -1;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + trapmin)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"arcnorm trapminpoint : value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"trapmax\";",
        "            value \u003d lakevalue;",
        "        ",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm trapmaxpoint : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapval real \u003d trapfn;",
        "",
        "            if trapval \u003c trapmin then {",
        "                trapminindex \u003d i;",
        "                trapminpoint \u003d znext;",
        "                trapmin \u003d trapval;",
        "            };",
        "            ",
        "            if trapval \u003e trapmax then {",
        "                trapmaxindex \u003d i;",
        "                trapmaxpoint \u003d znext;",
        "                trapmax \u003d trapval;",
        "            };",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value/99",
          "function": "mandelbrot(z, p)",
          "trapfn": "line(zlast, z, znext)",
          "mandelinit": "0"
        },
        "scales": {
          "Scale": [
            -2.905422087814835E-5,
            1.9057796074824554E-4,
            -1.9057796074824554E-4,
            -2.905422087814835E-5,
            -1.62400635003345,
            0.002472815033526283
          ]
        }
      }
    }
  },
  "amazing minmax": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap. This one is in fact very similar to TwoFold",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) { ",
        "",
        "    var trapmin real \u003d bailout;",
        "    var trapminpoint \u003d 0:0;",
        "    var trapminindex \u003d -1;",
        "    ",
        "    var trapmax real \u003d 0;",
        "    var trapmaxpoint \u003d 0:0;",
        "    var trapmaxindex \u003d -1;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + trapmin)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"arcnorm trapminpoint : value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"trapmax\";",
        "            value \u003d lakevalue;",
        "        ",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm trapmaxpoint : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapval real \u003d trapfn;",
        "",
        "            if trapval \u003c trapmin then {",
        "                trapminindex \u003d i;",
        "                trapminpoint \u003d znext;",
        "                trapmin \u003d trapval;",
        "            };",
        "            ",
        "            if trapval \u003e trapmax then {",
        "                trapmaxindex \u003d i;",
        "                trapmaxpoint \u003d znext;",
        "                trapmax \u003d trapval;",
        "            };",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "trapfn": "arcnorm(znext-z)",
          "bailoutvalue": "trapmin trapminindex"
        },
        "scales": {
          "Scale": [
            0.014903969714924022,
            0.022164406158571768,
            -0.022164406158571768,
            0.014903969714924022,
            -0.16624784358593772,
            -1.042493288442685
          ]
        }
      }
    }
  },
  "amazing sqr newton branch": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Slight variation of Default, simply added branch_avg in break condition.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "func get_color(c, value) { ",
        "    var branch_avg real \u003d 0; // sum of addends",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern addend_start int \u003d 2;",
        "        extern addend expr \u003d \"0.5 + 0.5 sin(6 arc znext)\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "            ",
        "            // smooth_i is interpolated here",
        "            extern interpolate_smooth_i bool \u003d false;",
        "            if interpolate_smooth_i then smooth_i \u003d 0.5 - 0.5 cos PI smooth_i;",
        "",
        "            // and also add addend according to smooth_i value",
        "            branch_avg \u003d (branch_avg + smooth_i addend) / ",
        "                (i + smooth_i - addend_start);",
        "                ",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"branch_avg\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"branch_avg : log(i + smooth_i)\";",
        "            extern bailoutpalette palette \u003d [",
        "                [#f80, #f22, #40f, #008, #080, #ff8],",
        "                [#fff, #000, #fff, #000, #fff, #000]];",
        "",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "    ",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "            ",
        "            extern lakevalue expr \u003d \"0\";",
        "            value \u003d lakevalue;",
        "            ",
        "            extern laketransfer expr \u003d \"value\";",
        "            extern lakepalette palette \u003d [[#000]];",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else // i \u003c maxdepth? then lake.",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else // bailout or epsilon? ",
        "        { branch_avg \u003d branch_avg + addend ; false } if i \u003e\u003d addend_start else // do some work here",
        "        false",
        "    }",
        "",
        "    // draw single pixel",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the drawing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 51200.0,
          "max_power": 2.0
        },
        "cplxs": {
          "juliapoint": [
            2.5077136382866323,
            -1.2237731710435231
          ]
        },
        "bools": {
          "light": true,
          "juliaset": false
        },
        "exprs": {
          "foldfn2": "(0.5 + 0.5 cos 6 arc(/(z - znext))) (1 - 2 atan(12 + /dist(z, znext)) / PI) + foldvalue2",
          "valuetransfer": "value/99",
          "foldfn": "(0.5 + 0.5 cos 6 arc znext) (1 - 2 atan(12 + rad znext) / PI) + foldvalue",
          "function": "sqr newton(z^3+p,z)+p",
          "mandelinit": "c",
          "addend": "0.5 + 0.5 sin(3 arc znext)"
        },
        "scales": {
          "Scale": [
            0.16964437920541808,
            0.043415969809604424,
            -0.043415969809604424,
            0.16964437920541808,
            -3.110110317468758,
            0.5873889031764505
          ]
        }
      }
    }
  },
  "another nice fold (1)": {
    "icon": "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\nmCdX8gAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"c\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"newton(z^4 + p, z)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : log(1 + value)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "laketransfer": "arcnorm znext : (atan value / PI)",
          "foldfn": "sin 6 arc(znext-z) * dist(znext, z) + foldvalue"
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "black hole from lambda 3": {
    "icon": "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\nAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 3.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "mandelinit": "sqrt (/3)",
          "function": "p (1 - abs sqr z) abs z"
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "branch with 3d": {
    "icon": "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\nSUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Slight variation of Default, simply added branch_avg in break condition.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "\tvar i int \u003d 0,",
        "\t\tp cplx \u003d juliapoint if juliaset else c,",
        "\t\tzlast cplx \u003d 0,",
        "\t\tz cplx,",
        "\t\tznext cplx \u003d 0;",
        "",
        "\textern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "\textern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "\tvar color quat;",
        "",
        "\twhile {",
        "\t\tznext \u003d function;",
        "\t\tnot breakcondition(i, znext, z, zlast, c, p, color)",
        "\t} do {",
        "\t\t// advance to next values",
        "\t\tzlast \u003d z;",
        "\t\tz \u003d znext;",
        "\t}",
        "",
        "\t// return color",
        "\tcolor",
        "}",
        "",
        "func get_color(c, value) { ",
        "\tvar branch_avg real \u003d 0; // sum of addends",
        "",
        "\tfunc breakcondition(i, znext, z, zlast, c, p, color) {",
        "\t\textern addend_start int \u003d 2;",
        "\t\textern addend expr \u003d \"0.5 + 0.5 sin(6 arc znext)\";",
        "",
        "\t\tfunc bailoutcolor() {",
        "\t\t\textern bailout real \u003d 512;",
        "\t\t\textern max_power real \u003d 2;",
        "\t\t\tvar smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "\t\t\t",
        "\t\t\t// smooth_i is interpolated here",
        "\t\t\textern interpolate_smooth_i bool \u003d false;",
        "\t\t\tif interpolate_smooth_i then smooth_i \u003d 0.5 - 0.5 cos PI smooth_i;",
        "",
        "\t\t\t// and also add addend according to smooth_i value",
        "\t\t\tbranch_avg \u003d (branch_avg + smooth_i addend) / ",
        "\t\t\t\t(i + smooth_i - addend_start);",
        "\t\t\t\t",
        "            // the next ones are only used in 3d-fractals",
        "\t\t\textern bailoutvalue expr \u003d \"branch_avg\";",
        "\t\t\tvalue \u003d bailoutvalue ;",
        "",
        "\t\t\textern bailouttransfer expr \u003d",
        "\t\t\t\t\"branch_avg : log(i + smooth_i)\";",
        "\t\t\textern bailoutpalette palette \u003d [",
        "\t\t\t\t[#f80, #f22, #40f, #008, #080, #ff8],",
        "\t\t\t\t[#fff, #000, #fff, #000, #fff, #000]];",
        "",
        "",
        "\t\t\tcolor \u003d bailoutpalette bailouttransfer",
        "\t\t}",
        "\t",
        "\t\tfunc lakecolor() {",
        "\t\t\textern epsilon real \u003d 1e-9;",
        "\t\t\t",
        "\t\t\textern lakevalue expr \u003d \"0\";",
        "\t\t\tvalue \u003d lakevalue;",
        "\t\t\t",
        "\t\t\textern laketransfer expr \u003d \"value\";",
        "\t\t\textern lakepalette palette \u003d [[#000]];",
        "\t\t\tcolor \u003d lakepalette laketransfer",
        "\t\t}",
        "",
        "\t\t{ lakecolor() ; true } if not next(i, maxdepth) else // i \u003c maxdepth? then lake.",
        "\t\ttrue if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else // bailout or epsilon? ",
        "\t\t{ branch_avg \u003d branch_avg + addend ; false } if i \u003e\u003d addend_start else // do some work here",
        "\t\tfalse",
        "\t}",
        "",
        "\t// draw single pixel",
        "\tescapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "\tvar c cplx \u003d map(x, y);",
        "\tvar value real;",
        "\tget_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "\tvar c00 cplx \u003d map(x, y),",
        "\t\tc10 cplx \u003d map(x + 1, y + 0.5),",
        "\t\tc01 cplx \u003d map(x + 0.5, y + 1);",
        "\t",
        "\tvar h00 real, h10 real, h01 real; // heights",
        "\t",
        "\t// color is already kinda super-sampled",
        "\tvar color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "\t// get height out of value",
        "\tfunc height(value) {",
        "\t\textern valuetransfer expr \u003d \"value\";",
        "\t\tvaluetransfer",
        "\t}",
        "\t",
        "\th00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "\t// get the normal vector (cross product)",
        "\tvar xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "\tvar yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "\t",
        "\tvar np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "\tvar nz real \u003d xp.x yp.y - xp.y yp.x;",
        "\t\t",
        "\t// normalize np and nz",
        "\tvar nlen \u003d sqrt(rad2 np + sqr nz);",
        "\tnp \u003d np / nlen; nz \u003d nz / nlen;",
        "\t\t",
        "\t// get light direction",
        "\textern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "\tdef lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "\t// Lambert\u0027s law.",
        "\tvar cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "\t// diffuse reflexion with ambient factor",
        "\textern lightintensity real \u003d 1;",
        "\textern ambientlight real \u003d 0.5;",
        "",
        "\t// if lumen is negative it is behind, ",
        "\t// but I tweak it a bit for the sake of the looks:",
        "\t// cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "\t// cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "\t// cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "\t// for a mathematically correct look use the following:",
        "\t// if cos_a \u003c 0 then cos_a \u003d 0;",
        "\t// color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "\t",
        "\tdef d \u003d lightintensity / 2; // will be inlined later",
        "",
        "\t// Change L in Lab-Color",
        "\tcolor.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "\t// Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "\textern specularintensity real \u003d 1;",
        "",
        "\textern shininess real \u003d 8;",
        "",
        "\t// r \u003d 2 n l - l; v \u003d 0:0:1",
        "\tvar spec_refl \u003d 2 cos_a nz - lz;",
        "\t",
        "\t// 100 because L in the Lab-Model is between 0 and 100",
        "\tif spec_refl \u003e 0 then",
        "\t\tcolor.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "\tcolor",
        "}",
        "",
        "func do_pixel(x, y) {",
        "\t// two or three dimensions?",
        "\tdef drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "\t",
        "\tfunc drawaapixel(x, y) {",
        "\t\t0.25 (",
        "\t\t\tdrawpixel(x - 0.375, y - 0.125) + ",
        "\t\t\tdrawpixel(x + 0.125, y - 0.375) + ",
        "\t\t\tdrawpixel(x + 0.375, y + 0.125) +",
        "\t\t\tdrawpixel(x - 0.125, y + 0.375)\t\t\t",
        "\t\t);",
        "\t}",
        "",
        "\t// which function to apply?",
        "\tdef fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "\tcolor \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the drawing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "bailout": 51200.0
        },
        "bools": {
          "light": true,
          "interpolate_smooth_i": false
        },
        "exprs": {
          "valuetransfer": "value/19999999",
          "bailoutvalue": "i+smooth_i",
          "addend": "0.5 + 0.5 sin(2 arc znext)",
          "bailouttransfer": "branch_avg*6"
        },
        "palettes": {
          "lakepalette": {
            "width": 3,
            "height": 5,
            "colors": [
              -16777216,
              -16775353,
              -4203956,
              -4203956,
              -52179,
              -9085757,
              -6161034,
              -4014018,
              -16777216,
              -1120529,
              -16777216,
              -65730,
              -2621480,
              -1120529,
              -35944
            ]
          },
          "bailoutpalette": {
            "width": 7,
            "height": 1,
            "colors": [
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074,
              -16711621
            ]
          }
        },
        "scales": {
          "Scale": [
            -1.275140806317907E-7,
            -3.084483757456835E-7,
            3.084483757456835E-7,
            -1.275140806317907E-7,
            -1.7465254311194451,
            3.5628061356917815E-6
          ]
        }
      }
    }
  },
  "branching sqr newton": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Slight variation of Default, simply added branch_avg in break condition.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "func get_color(c, value) { ",
        "    var branch_avg real \u003d 0; // sum of addends",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern addend_start int \u003d 2;",
        "        extern addend expr \u003d \"0.5 + 0.5 sin(6 arc znext)\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "            ",
        "            // smooth_i is interpolated here",
        "            extern interpolate_smooth_i bool \u003d false;",
        "            if interpolate_smooth_i then smooth_i \u003d 0.5 - 0.5 cos PI smooth_i;",
        "",
        "            // and also add addend according to smooth_i value",
        "            branch_avg \u003d (branch_avg + smooth_i addend) / ",
        "                (i + smooth_i - addend_start);",
        "                ",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"branch_avg\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"branch_avg : log(i + smooth_i)\";",
        "            extern bailoutpalette palette \u003d [",
        "                [#f80, #f22, #40f, #008, #080, #ff8],",
        "                [#fff, #000, #fff, #000, #fff, #000]];",
        "",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "    ",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "            ",
        "            extern lakevalue expr \u003d \"0\";",
        "            value \u003d lakevalue;",
        "            ",
        "            extern laketransfer expr \u003d \"value\";",
        "            extern lakepalette palette \u003d [[#000]];",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else // i \u003c maxdepth? then lake.",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else // bailout or epsilon? ",
        "        { branch_avg \u003d branch_avg + addend ; false } if i \u003e\u003d addend_start else // do some work here",
        "        false",
        "    }",
        "",
        "    // draw single pixel",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the drawing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 51200.0,
          "max_power": 2.0
        },
        "cplxs": {
          "juliapoint": [
            2.5077136382866323,
            -1.2237731710435231
          ]
        },
        "bools": {
          "light": true,
          "juliaset": false
        },
        "exprs": {
          "foldfn2": "(0.5 + 0.5 cos 6 arc(/(z - znext))) (1 - 2 atan(12 + /dist(z, znext)) / PI) + foldvalue2",
          "valuetransfer": "value/99",
          "foldfn": "(0.5 + 0.5 cos 6 arc znext) (1 - 2 atan(12 + rad znext) / PI) + foldvalue",
          "function": "sqr newton(z^3+p,z)+p",
          "mandelinit": "c",
          "addend": "0.5 + 0.5 sin(3 arc znext)"
        },
        "scales": {
          "Scale": [
            0.16964437920541808,
            0.043415969809604424,
            -0.043415969809604424,
            0.16964437920541808,
            -3.110110317468758,
            0.5873889031764505
          ]
        }
      }
    }
  },
  "buffalo julia": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Slight variation of Default, simply added branch_avg in break condition.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "func get_color(c, value) { ",
        "    var branch_avg real \u003d 0; // sum of addends",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern addend_start int \u003d 2;",
        "        extern addend expr \u003d \"0.5 + 0.5 sin(6 arc znext)\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "            ",
        "            // and also add addend according to smooth_i value",
        "            branch_avg \u003d (branch_avg + smooth_i addend) / ",
        "                (i + smooth_i - addend_start);",
        "                ",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"branch_avg\";",
        "            value \u003d bailoutvalue;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"value : log(i + smooth_i)\";",
        "                ",
        "            extern bailoutpalette palette \u003d [",
        "                [#f80, #f22, #40f, #008, #080, #ff8],",
        "                [#fff, #000, #fff, #000, #fff, #000]];",
        "",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "    ",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "            ",
        "            extern lakevalue expr \u003d \"0\";",
        "            value \u003d lakevalue;",
        "            ",
        "            extern laketransfer expr \u003d \"value\";",
        "            extern lakepalette palette \u003d [[#000]];",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else // i \u003c maxdepth? then lake.",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else // bailout or epsilon? ",
        "        { branch_avg \u003d branch_avg + addend ; false } if i \u003e\u003d addend_start else // do some work here",
        "        false",
        "    }",
        "",
        "    // draw single pixel",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the drawing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "juliacount": 5
        },
        "cplxs": {
          "lightvector": [
            -0.667,
            0.667
          ],
          "juliapoint": [
            -0.8,
            -0.8
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true
        },
        "exprs": {
          "function": "{ z.x \u003d -abs z.x; mandelbrot(z, p) }",
          "mandelinit": "0",
          "addend": "arcnorm((znext - z) / (z - zlast))"
        },
        "scales": {
          "Scale": [
            0.3766280753024029,
            -0.5948505857709427,
            0.5948505857709427,
            0.3766280753024029,
            -1.0166408131275637,
            -0.021815643274652546
          ]
        }
      }
    }
  },
  "buffalo julia 2": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Slight variation of Default, simply added branch_avg in break condition.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "func get_color(c, value) { ",
        "    var branch_avg real \u003d 0; // sum of addends",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern addend_start int \u003d 2;",
        "        extern addend expr \u003d \"0.5 + 0.5 sin(6 arc znext)\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "            ",
        "            // and also add addend according to smooth_i value",
        "            branch_avg \u003d (branch_avg + smooth_i addend) / ",
        "                (i + smooth_i - addend_start);",
        "                ",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"branch_avg\";",
        "            value \u003d bailoutvalue;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"value : log(i + smooth_i)\";",
        "                ",
        "            extern bailoutpalette palette \u003d [",
        "                [#f80, #f22, #40f, #008, #080, #ff8],",
        "                [#fff, #000, #fff, #000, #fff, #000]];",
        "",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "    ",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "            ",
        "            extern lakevalue expr \u003d \"0\";",
        "            value \u003d lakevalue;",
        "            ",
        "            extern laketransfer expr \u003d \"value\";",
        "            extern lakepalette palette \u003d [[#000]];",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else // i \u003c maxdepth? then lake.",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else // bailout or epsilon? ",
        "        { branch_avg \u003d branch_avg + addend ; false } if i \u003e\u003d addend_start else // do some work here",
        "        false",
        "    }",
        "",
        "    // draw single pixel",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the drawing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "juliacount": 5
        },
        "cplxs": {
          "lightvector": [
            -0.667,
            0.667
          ],
          "juliapoint": [
            -0.5,
            -0.9
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true,
          "supersampling": true
        },
        "exprs": {
          "function": "{ z.x \u003d -abs z.x; mandelbrot(z, p) }",
          "mandelinit": "0",
          "addend": "arcnorm((znext - z) / (z - zlast))"
        },
        "scales": {
          "Scale": [
            0.4767426274800739,
            -0.36100318852789465,
            0.36100318852789465,
            0.4767426274800739,
            -1.412672912436455,
            -0.1262904189162246
          ]
        }
      }
    }
  },
  "buffalo julia 3": {
    "icon": "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\nKC/3dfP/AR9DyKZmdjU7AAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Slight variation of Default, simply added branch_avg in break condition.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "func get_color(c, value) { ",
        "    var branch_avg real \u003d 0; // sum of addends",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern addend_start int \u003d 2;",
        "        extern addend expr \u003d \"0.5 + 0.5 sin(6 arc znext)\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "            ",
        "            // and also add addend according to smooth_i value",
        "            branch_avg \u003d (branch_avg + smooth_i addend) / ",
        "                (i + smooth_i - addend_start);",
        "                ",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"branch_avg\";",
        "            value \u003d bailoutvalue;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"value : log(i + smooth_i)\";",
        "                ",
        "            extern bailoutpalette palette \u003d [",
        "                [#f80, #f22, #40f, #008, #080, #ff8],",
        "                [#fff, #000, #fff, #000, #fff, #000]];",
        "",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "    ",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "            ",
        "            extern lakevalue expr \u003d \"0\";",
        "            value \u003d lakevalue;",
        "            ",
        "            extern laketransfer expr \u003d \"value\";",
        "            extern lakepalette palette \u003d [[#000]];",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else // i \u003c maxdepth? then lake.",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else // bailout or epsilon? ",
        "        { branch_avg \u003d branch_avg + addend ; false } if i \u003e\u003d addend_start else // do some work here",
        "        false",
        "    }",
        "",
        "    // draw single pixel",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the drawing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "juliacount": 5
        },
        "cplxs": {
          "lightvector": [
            -0.667,
            0.667
          ],
          "juliapoint": [
            -0.5,
            -0.9
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true,
          "supersampling": true
        },
        "exprs": {
          "function": "{ z.x \u003d -abs z.x; mandelbrot(z, p) }",
          "mandelinit": "0",
          "addend": "arcnorm((znext - z) / (z - zlast))"
        },
        "scales": {
          "Scale": [
            0.4452736567738916,
            -0.36645005207891834,
            0.36645005207891834,
            0.4452736567738916,
            -1.457325272971081,
            -0.17393401519881602
          ]
        }
      }
    }
  },
  "buggy": {
    "icon": "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\u003d\n"
  },
  "buggy entry": {
    "icon": "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\u003d\n"
  },
  "burning shipified exp": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 100.0
        },
        "exprs": {
          "mandelinit": "0",
          "bailoutvalue": "log(20 + i)",
          "function": "(exp z - abs z) p"
        },
        "scales": {
          "Scale": [
            1.8703586386409514,
            0.19290419189992428,
            -0.19290419189992428,
            1.8703586386409514,
            0.07084573788673071,
            0.07304653966278053
          ]
        }
      }
    },
    "description": "2017-07-31, 20:51"
  },
  "circles": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap. This one is in fact very similar to TwoFold",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) { ",
        "",
        "    var trapmin real \u003d bailout;",
        "    var trapminpoint \u003d 0:0;",
        "    var trapminindex \u003d -1;",
        "    ",
        "    var trapmax real \u003d 0;",
        "    var trapmaxpoint \u003d 0:0;",
        "    var trapmaxindex \u003d -1;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + trapmin)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"arcnorm trapminpoint : value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"trapmax\";",
        "            value \u003d lakevalue;",
        "        ",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm trapmaxpoint : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapval real \u003d trapfn;",
        "",
        "            if trapval \u003c trapmin then {",
        "                trapminindex \u003d i;",
        "                trapminpoint \u003d znext;",
        "                trapmin \u003d trapval;",
        "            };",
        "            ",
        "            if trapval \u003e trapmax then {",
        "                trapmaxindex \u003d i;",
        "                trapmaxpoint \u003d znext;",
        "                trapmax \u003d trapval;",
        "            };",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "bailout": 2.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm trapmaxpoint : value",
          "lakevalue": "1-trapmax",
          "bailoutvalue": "1 - trapmax",
          "trapfn": "circlefn(dist(znext, floor(znext+0.5:0.5)))",
          "bailouttransfer": "arcnorm trapmaxpoint : value"
        },
        "scales": {
          "Scale": [
            0.191413399527265,
            -0.14474106876550985,
            0.14474106876550985,
            0.191413399527265,
            -1.4944749097537904,
            0.1399947846387461
          ]
        }
      }
    }
  },
  "diff fold": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value",
          "lakevalue": "0",
          "foldfn": "(z-znext) / sqr rad znext + foldvalue",
          "bailoutvalue": "rad foldvalue",
          "bailouttransfer": "arcnorm foldvalue"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            1.2967838504231202,
            0.8103900615577495,
            -0.8103900615577495,
            1.2967838504231202,
            -0.38348937574610414,
            0.06101203173554662
          ]
        }
      }
    }
  },
  "distance estimate": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "bools": {
          "light": true
        },
        "exprs": {
          "foldinit": "0",
          "foldfn": "2 znext foldvalue + 1",
          "bailoutvalue": "rad znext / rad foldvalue / 2 * log rad znext",
          "function": "mandelbrot(z, p)",
          "mandelinit": "0"
        },
        "scales": {
          "Scale": [
            9.522428020549192E-4,
            2.6003838430414773E-4,
            -2.6003838430414773E-4,
            9.522428020549192E-4,
            -0.7404619437649386,
            -0.157602961478639
          ]
        }
      }
    }
  },
  "exp burning shipified": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 100.0
        },
        "exprs": {
          "mandelinit": "0",
          "bailoutvalue": "log(20 + i)",
          "function": "(exp z - abs z) p"
        },
        "scales": {
          "Scale": [
            1.8703586386409514,
            0.19290419189992428,
            -0.19290419189992428,
            1.8703586386409514,
            0.07084573788673071,
            0.07304653966278053
          ]
        }
      }
    },
    "description": "2017-07-31, 20:51"
  },
  "exp zoom into island": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "bailout": 500.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm znext",
          "valuetransfer": "value * 0.0001",
          "lakevalue": "log(1 + foldvalue.x)",
          "foldfn": "(0.5 + 0.5 cos 3 arc (z - znext)) / (12 + rad znext + /dist(znext, z)) + foldvalue",
          "bailoutvalue": "log(1 + foldvalue.x)",
          "function": "(exp z - z E) p",
          "mandelinit": "1"
        },
        "scales": {
          "Scale": [
            2.1182291841832694E-6,
            4.551785521583442E-5,
            -4.551785521583442E-5,
            2.1182291841832694E-6,
            -0.4326066882547853,
            -0.06591499126362144
          ]
        }
      }
    },
    "description": "2017-08-03, 13:01"
  },
  "expfun": {
    "icon": "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\nAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 500.0
        },
        "exprs": {
          "mandelinit": "1:2",
          "bailoutvalue": "log(20 + i)",
          "function": "(exp z - z exp (1:2)) p"
        },
        "scales": {
          "Scale": [
            -0.3479264089516564,
            -0.5344411314204682,
            0.5344411314204682,
            -0.3479264089516564,
            0.11666535727336375,
            0.17191101771493633
          ]
        }
      }
    },
    "description": "2017-08-01, 13:36"
  },
  "exponential bear": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 100.0
        },
        "exprs": {
          "mandelinit": "0",
          "function": "(exp abs z - abs z) p",
          "bailoutvalue": "log(20 + i)"
        },
        "scales": {
          "Scale": [
            0.567357049382867,
            2.0678357448727076,
            -1.370163563615391,
            0.6037325062651561,
            -0.05588839598061404,
            -0.3041356690232903
          ]
        }
      }
    },
    "description": "2017-07-31, 20:53"
  },
  "fav": {
    "icon": "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\nIPD/Ad0rjimoIqQPAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "// used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "var i int \u003d 0,",
        "p cplx \u003d juliapoint if juliaset else c,",
        "zlast cplx \u003d 0,",
        "z cplx,",
        "znext cplx \u003d 0;",
        "",
        "extern mandelinit expr \u003d \"0\";",
        "",
        "z \u003d c if juliaset else mandelinit;",
        "",
        "extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "var color quat;",
        "",
        "while {",
        "znext \u003d function;",
        "not breakcondition(i, znext, z, zlast, c, p, color)",
        "} do {",
        "// advance to next values",
        "zlast \u003d z;",
        "z \u003d znext;",
        "}",
        "",
        "// return color",
        "color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "// if the fractal accumulates some values",
        "// like in traps or addends, here is a got place to do it.",
        "",
        "func breakcondition(i, znext, z, zlast, c, p, color) {",
        "func bailoutcolor() {",
        "extern bailout real \u003d 128;",
        "extern max_power real \u003d 2;",
        "var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "value \u003d bailoutvalue ;",
        "",
        "extern bailouttransfer expr \u003d \"value\";",
        "",
        "extern bailoutpalette palette \u003d [",
        "[#006, #26c, #fff, #fa0, #303]];",
        "",
        "color \u003d bailoutpalette bailouttransfer",
        "}",
        "",
        "func lakecolor() {",
        "extern epsilon real \u003d 1e-9;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "value \u003d lakevalue;",
        "",
        "extern laketransfer expr \u003d",
        "\"arcnorm znext : value\";",
        "",
        "extern lakepalette palette \u003d [",
        "[#000, #000, #000, #000],",
        "[#f00, #ff0, #0f8, #00f],",
        "[#f88, #ff8, #afc, #88f]];",
        "",
        "color \u003d lakepalette laketransfer",
        "}",
        "",
        "{ lakecolor() ; true } if not next(i, maxdepth) else",
        "radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "}",
        "",
        "escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "// this one is just here for testing light effects",
        "// circle + donut + green bg",
        "var rc \u003d rad c;",
        "",
        "{ value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "{ value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "{ value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings. * ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "var c cplx \u003d map(x, y);",
        "var value real;",
        "get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "var c00 cplx \u003d map(x, y),",
        "c10 cplx \u003d map(x + 1, y + 0.5),",
        "c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "var h00 real, h10 real, h01 real; // heights",
        "",
        "// color is already kinda super-sampled",
        "var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "// get height out of value",
        "func height(value) {",
        "    extern valuetransfer expr \u003d \"value\";",
        "    valuetransfer",
        "}",
        "",
        "h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "// get the normal vector (cross product)",
        "var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "// normalize np and nz",
        "var nlen \u003d sqrt(rad2 np + sqr nz);",
        "np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "// get light direction",
        "extern lightAngleToNormal real \u003d 0; // angle to normal",
        "extern lightDirectionAngle real \u003d 0; // 0 is to positive x.",
        "",
        "def lz \u003d cos lightAngleToNormal;",
        "",
        "def lx \u003d cos lightDirectionAngle * sqrt(1 - sqr lz);",
        "def ly \u003d sin lightDirectionAngle * sqrt(1 - sqr lz);",
        "",
        "// Lambert\u0027s law.",
        "var cosA real \u003d dot(lx : ly, np) + lz nz;",
        "//if cosA \u003c 0 then cosA \u003d 0;",
        "",
        "// diffuse reflexion with ambient factor",
        "extern ambientIntensity real \u003d 0.25;",
        "extern diffuseIntensity real \u003d 1;",
        "",
        "color.a \u003d color.a * (ambientIntensity + diffuseIntensity cosA);",
        "",
        "if color.a \u003c 0 then color.a \u003d 0;",
        "",
        "// Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "extern specularIntensity real \u003d 1;",
        "",
        "extern shininess real \u003d 8;",
        "",
        "// r \u003d 2 n l - l; v \u003d 0:0:1",
        "var specularReflection \u003d 2 cosA nz - lz;",
        "",
        "// 100 because L in the Lab-Model is between 0 and 100",
        "if specularReflection \u003e 0 then",
        "color.a \u003d color.a + 100 * specularIntensity * specularReflection ^ shininess;",
        "",
        "color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "// two or three dimensions?",
        "def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "func drawaapixel(x, y) {",
        "0.25 (",
        "drawpixel(x - 0.375, y - 0.125) + ",
        "drawpixel(x + 0.125, y - 0.375) + ",
        "drawpixel(x + 0.375, y + 0.125) +",
        "drawpixel(x - 0.125, y + 0.375) ",
        ");",
        "}",
        "",
        "// which function to apply?",
        "def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "ambientIntensity": 0.75,
          "lightDirectionAngle": 0.0,
          "diffuseIntensity": 0.25,
          "lightAngleToNormal": 1.5,
          "specularIntensity": 4.0,
          "shininess": 64.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm c",
          "valuetransfer": "log(1+value)/20000",
          "lakevalue": "znext.x"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            6.653649768322458E-8,
            1.5371891480166457E-7,
            -1.5371891480166457E-7,
            6.653649768322458E-8,
            -0.7434985127993746,
            0.13193095501298543
          ]
        }
      }
    }
  },
  "flyface": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 100.0
        },
        "exprs": {
          "mandelinit": "0",
          "function": "(exp z - conj z) p",
          "bailoutvalue": "log(20 + i)"
        },
        "scales": {
          "Scale": [
            1.4394004631470183,
            -0.028359693530765923,
            0.028359693530765923,
            1.4394004631470183,
            0.10259329428641112,
            0.0019101406767188245
          ]
        }
      }
    },
    "description": "2017-07-31, 20:51"
  },
  "fold branch bailout": {
    "icon": "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\n3PCxAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Two folds",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    extern foldinit2 expr \u003d \"0\";",
        "    var foldvalue2 cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern foldfn expr \u003d \"/(rad znext + 1) + foldvalue\";",
        "        extern foldfn2 expr \u003d \"dist(z, znext) + foldvalue2\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"foldvalue.x\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"log(value + 1)\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#a8f, #404, #fa4, #ff8, #f40, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue2.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : log(1 + log(1 + value)) \";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#fff, #fff, #fff, #fff, #fff, #fff],",
        "                [#a8f, #404, #fa4, #ff8, #f40, #008],",
        "                [#caf, #a4a, #fc8, #ffc, #f82, #24a],",
        "                [#000, #000, #000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; foldvalue2 \u003d foldfn2; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 2.0,
          "bailout": 64.0
        },
        "exprs": {
          "foldfn2": "{ var dz \u003d z - znext; (0.5 + 0.5 sin 6 arc dz) sinh rad dz + foldvalue2 }",
          "foldfn": "(1+sin(znext))/2cosh(rad (znext)) + foldvalue",
          "bailoutvalue": "foldvalue.x",
          "function": "sqr z + p",
          "mandelinit": "0",
          "bailouttransfer": "log (1+foldvalue.x)"
        },
        "scales": {
          "Scale": [
            0.007099096948142297,
            0.009854360654919802,
            -0.009854360654919802,
            0.007099096948142297,
            -1.6293976469127083,
            8.456258848835163E-4
          ]
        }
      }
    }
  },
  "fold branch variation": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "foldinit": "0",
          "lakevalue": "foldvalue.x",
          "foldfn": "max(arcnorm(znext-z),foldvalue)"
        },
        "palettes": {
          "lakepalette": {
            "width": 6,
            "height": 3,
            "colors": [
              -16711800,
              -16742400,
              -120,
              -30720,
              -56832,
              -16777080,
              -12255318,
              -13391309,
              -86,
              -21965,
              -39373,
              -13421654,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1
            ]
          }
        },
        "scales": {
          "Scale": [
            1.2618009607903447,
            0.3929357281206941,
            -0.3929357281206941,
            1.2618009607903447,
            -0.4339341567092941,
            -0.27486404529241365
          ]
        }
      }
    }
  },
  "fold deep zoom": {
    "icon": "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\nP3K3jPsBwpgcAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value/999999",
          "foldfn": "/log(1+line(zlast, z, znext)) + foldvalue",
          "bailoutvalue": "log(E^2 + foldvalue.x)",
          "mandelinit": "c",
          "bailouttransfer": "log(i+1)"
        },
        "scales": {
          "Scale": [
            1.256389664763975E-13,
            9.274121409696705E-13,
            -9.274121409696705E-13,
            1.256389664763975E-13,
            0.43190525977039734,
            -0.22576392092720762
          ]
        }
      }
    }
  },
  "fold distance estimate": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "bools": {
          "light": true
        },
        "exprs": {
          "foldinit": "0",
          "foldfn": "2 znext foldvalue + 1",
          "bailoutvalue": "rad znext / rad foldvalue / 2 * log rad znext",
          "function": "mandelbrot(z, p)",
          "mandelinit": "0"
        },
        "scales": {
          "Scale": [
            9.522428020549192E-4,
            2.6003838430414773E-4,
            -2.6003838430414773E-4,
            9.522428020549192E-4,
            -0.7404619437649386,
            -0.157602961478639
          ]
        }
      }
    }
  },
  "fold golden": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value",
          "lakevalue": "0",
          "foldfn": "arcnorm(z-znext) / rad znext + foldvalue",
          "bailoutvalue": "rad foldvalue",
          "bailouttransfer": "arcnorm foldvalue"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            0.01034824821990327,
            0.038618751563008466,
            -0.038618751563008466,
            0.01034824821990327,
            -0.137505302089046,
            -0.9983757334746193
          ]
        }
      }
    }
  },
  "fold good": {
    "icon": "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\nRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    // This fractal is defined by z - R * f(z) / f\u0027(z) + p",
        "",
        "    extern R expr \u003d \"2\";",
        "    extern power expr \u003d \"6\";",
        "    extern argument expr \u003d \"c\";",
        "",
        "    extern mandelinit expr \u003d \"(argument * (R power - R)/(R - power))^/power\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"z - R * (z ^ power + argument) / derive(z ^ power + argument, z) + p\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan(value / rad znext)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "laketransfer": "value:rad znext",
          "R": "1",
          "foldfn": "(0.5 + 0.5 cos 4 arc (/(z - znext))) * (1 - 2 atan (12+1/dist(z, znext))/PI) + foldvalue",
          "function": "newton(z^3 + p, z)",
          "mandelinit": "c"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 2,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961,
              -1779011,
              -13281720,
              -1909520,
              -14907558
            ]
          }
        },
        "scales": {
          "Scale": [
            0.8949990934523657,
            0.34890699060693187,
            -0.34890699060693187,
            0.8949990934523657,
            -0.11317345698741899,
            -0.1739317230670273
          ]
        }
      }
    }
  },
  "fold good try": {
    "icon": "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\nyP8LJH7KnrjvCdsAAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    // This fractal is defined by z - R * f(z) / f\u0027(z) + p",
        "",
        "    extern R expr \u003d \"2\";",
        "    extern power expr \u003d \"6\";",
        "    extern argument expr \u003d \"c\";",
        "",
        "    extern mandelinit expr \u003d \"(argument * (R power - R)/(R - power))^/power\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"z - R * (z ^ power + argument) / derive(z ^ power + argument, z) + p\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan(value / rad znext)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "laketransfer": "atan(value / rad znext)",
          "R": "1",
          "foldfn": "(0.5 + 0.5 cos 2 arc (/z-/znext)) / cosh rad (z-znext) + foldvalue",
          "function": "newton(z^3 + p, z)",
          "mandelinit": "c"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            1.2422126996602627,
            -0.0025220916638728497,
            0.0025220916638728497,
            1.2422126996602627,
            -0.2966446127088015,
            -0.01610874840802687
          ]
        }
      }
    }
  },
  "fold lake max dist": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    // This fractal is defined by z - R * f(z) / f\u0027(z) + p",
        "",
        "    extern R expr \u003d \"2\";",
        "    extern power expr \u003d \"6\";",
        "    extern argument expr \u003d \"c\";",
        "",
        "    extern mandelinit expr \u003d \"(argument * (R power - R)/(R - power))^/power\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"z - R * (z ^ power + argument) / derive(z ^ power + argument, z) + p\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan(value / rad znext)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "laketransfer": "value",
          "R": "1",
          "foldinit": "0",
          "lakevalue": "atan(foldvalue.x/rad znext)",
          "foldfn": "max(dist(znext,z),foldvalue)",
          "function": "newton(sinh z + p, z)",
          "mandelinit": "0"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            0.4747591623551637,
            -1.2202627027188262,
            1.2202627027188262,
            0.4747591623551637,
            0.17289938829538887,
            -3.0874091694029455
          ]
        }
      }
    }
  },
  "fold log": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value/9",
          "foldfn": "log znext  / rad znext + foldvalue",
          "bailoutvalue": " foldvalue.y",
          "bailouttransfer": "log foldvalue"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 3,
            "height": 3,
            "colors": [
              -16711800,
              -16742400,
              -120,
              -1,
              -30720,
              -16777216,
              -56832,
              -16777080,
              -11725233
            ]
          }
        },
        "scales": {
          "Scale": [
            0.0036866033740769115,
            5.064895738880345E-4,
            -5.064895738880345E-4,
            0.0036866033740769115,
            -1.7122903769699198,
            -2.0629584870685285E-4
          ]
        }
      }
    }
  },
  "fold log 2": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value/499",
          "lakevalue": "0",
          "foldfn": "(1 + log znext)  / (12 + rad znext) + foldvalue",
          "bailoutvalue": "log foldvalue.x",
          "bailouttransfer": "cos foldvalue.y"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            -7.1059162720424855E-9,
            2.3036271750264046E-9,
            -2.3036271750264046E-9,
            -7.1059162720424855E-9,
            -1.6236960492958108,
            -1.780104870474938E-8
          ]
        }
      }
    }
  },
  "fold lovely": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value",
          "lakevalue": "0",
          "foldfn": "(cos 6 arc znext + I) / (50 + rad znext) + foldvalue",
          "bailoutvalue": "foldvalue.y",
          "bailouttransfer": "(1+ foldvalue.x)"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            -2.1193607607764424E-6,
            7.605965426343759E-7,
            -7.605965426343759E-7,
            -2.1193607607764424E-6,
            -1.7453162705311083,
            5.864183945809193E-6
          ]
        }
      }
    }
  },
  "fold mix": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value/99",
          "lakevalue": "0",
          "foldfn": "/(1 + circle(0:1, 4, znext)) + I / (1 + line(-0.75:0, -0.75:1, znext)) + foldvalue",
          "bailoutvalue": "log(1 + foldvalue.y)",
          "bailouttransfer": "log(1 + foldvalue.x)"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            -0.0018433389391568984,
            8.70294850603327E-4,
            -8.70294850603327E-4,
            -0.0018433389391568984,
            -0.7388329874963716,
            -0.17444807314681424
          ]
        }
      }
    }
  },
  "fold nice": {
    "icon": "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\nmCdX8gAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"c\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"newton(z^4 + p, z)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : log(1 + value)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "laketransfer": "arcnorm znext : (atan value / PI)",
          "foldfn": "sin 6 arc(znext-z) * dist(znext, z) + foldvalue"
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "fold of diff": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value",
          "lakevalue": "0",
          "foldfn": "(z-znext) / sqr rad znext + foldvalue",
          "bailoutvalue": "rad foldvalue",
          "bailouttransfer": "arcnorm foldvalue"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            1.2967838504231202,
            0.8103900615577495,
            -0.8103900615577495,
            1.2967838504231202,
            -0.38348937574610414,
            0.06101203173554662
          ]
        }
      }
    }
  },
  "fold of min": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "foldfn": "min(dist(znext,z),foldvalue)",
          "foldinit": "bailout"
        },
        "scales": {
          "Scale": [
            1.3661111722710662,
            0.12197627416411001,
            -0.12197627416411001,
            1.3661111722710662,
            -0.605165847377504,
            -0.08538113572237063
          ]
        }
      }
    }
  },
  "fold stripes": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": false
        },
        "exprs": {
          "valuetransfer": "value",
          "lakevalue": "0",
          "foldfn": "5(cos 6 arc znext) / (100 + rad znext) + foldvalue",
          "bailoutvalue": "foldvalue.x",
          "bailouttransfer": "log(1+ foldvalue)"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            1.959475832451624,
            1.1672870597717377,
            -1.1672870597717377,
            1.959475832451624,
            -0.5087009983243141,
            -0.09795060217239543
          ]
        }
      }
    }
  },
  "fold stripes 2": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 600
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": false
        },
        "exprs": {
          "valuetransfer": "log value/999999",
          "lakevalue": "0",
          "foldfn": "(cos 6 arc znext + I) / (50 + rad znext) + foldvalue",
          "bailoutvalue": "foldvalue.y",
          "bailouttransfer": "foldvalue.x"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            -0.01909630632255703,
            0.021082848458268275,
            -0.021082848458268275,
            -0.01909630632255703,
            -1.7686002229407163,
            0.0016890852135288967
          ]
        }
      }
    }
  },
  "fold sum of circles": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "log(/value)/50",
          "foldfn": "/circle(-1:0.25,2, znext) + foldvalue",
          "bailouttransfer": "log value:arcnorm c"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 4,
            "height": 4,
            "colors": [
              -16711800,
              -16742400,
              -120,
              -30720,
              -7212837,
              -2828843,
              -924678,
              -14380303,
              -1379105,
              -16025521,
              -9847904,
              -10336456,
              -16315121,
              -3611623,
              -15099891,
              -6193027
            ]
          }
        },
        "scales": {
          "Scale": [
            0.03950550384513318,
            -0.01864072303779319,
            0.01864072303779319,
            0.03950550384513318,
            -1.6263881190191203,
            -1.683011003624068E-4
          ]
        }
      }
    }
  },
  "foldmin": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "foldfn": "min(dist(znext,z),foldvalue)",
          "foldinit": "bailout"
        },
        "scales": {
          "Scale": [
            1.3661111722710662,
            0.12197627416411001,
            -0.12197627416411001,
            1.3661111722710662,
            -0.605165847377504,
            -0.08538113572237063
          ]
        }
      }
    }
  },
  "for the night": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Pendulum with 3 magnets",
        "var x int, y int, color int;",
        "",
        "func get_color(c, value) {",
        "    extern pal palette \u003d [",
        "            [#fff, #fff, #fff, #fff], ",
        "            [#f00, #ff0, #0f0, #00f],",
        "            [#000, #000, #000, #000]];",
        "",
        "    extern stepcount int \u003d 250;",
        "",
        "    extern stepsize real \u003d 0.05;",
        "    extern friction real \u003d 0.07;",
        "    extern gravity real \u003d 0.2;",
        "    extern height real \u003d 0.25;",
        "",
        "    // here, strength is the same for all.",
        "    extern strength real \u003d 1;",
        "",
        "    extern magnets expr \u003d \"[2:0, 0:1, -2:0, 0:-1]\"",
        "",
        "    var len real \u003d 0;",
        "    var pos \u003d c;",
        "    var vel \u003d 0:0;",
        "    var acc_prev \u003d 0:0;",
        "    var acc \u003d 0:0;",
        "",
        "    func do_magnet(strength, m) {",
        "        var d cplx \u003d m - pos;",
        "        var dist \u003d sqrt(rad2 d + sqr height);",
        "        var factor \u003d strength / (dist * dist * dist);",
        "        d * factor",
        "    }",
        "",
        "    var i \u003d 0;",
        "",
        "    while {",
        "        var acc_next \u003d -gravity * pos - vel * friction;",
        "",
        "        for magnet in magnets do {",
        "            acc_next \u003d acc_next + do_magnet(strength, magnet);",
        "        }",
        "",
        "        vel \u003d vel + stepsize * (2 * acc_next + 5 * acc - acc_prev) / 6;",
        "        var dir \u003d vel * stepsize + sqr stepsize * (4 * acc_next - acc) / 6;",
        "        len \u003d len + rad dir;",
        "        pos \u003d pos + dir;",
        "",
        "        acc_prev \u003d acc;",
        "        acc \u003d acc_next;",
        "",
        "        next(i, stepcount)",
        "    }",
        "",
        "    value \u003d len;",
        "    pal (arcnorm pos : (0.42442 * atan log(1 + log(1 + len))))",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "stepcount": 1000
        },
        "reals": {
          "friction": 0.1
        },
        "cplxs": {
          "lightvector": [
            -0.667,
            0.667
          ]
        },
        "bools": {
          "light": true,
          "supersampling": true
        },
        "exprs": {
          "valuetransfer": "log(value+45)"
        },
        "palettes": {
          "pal": {
            "width": 4,
            "height": 1,
            "colors": [
              -16777088,
              -256,
              -16744448,
              -65536
            ]
          }
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "fun things happen at deep zooms (not anymore)": {
    "icon": "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\nP3K3jPsBwpgcAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value/999999",
          "foldfn": "/log(1+line(zlast, z, znext)) + foldvalue",
          "bailoutvalue": "log(E^2 + foldvalue.x)",
          "mandelinit": "c",
          "bailouttransfer": "log(i+1)"
        },
        "scales": {
          "Scale": [
            1.256389664763975E-13,
            9.274121409696705E-13,
            -9.274121409696705E-13,
            1.256389664763975E-13,
            0.43190525977039734,
            -0.22576392092720762
          ]
        }
      }
    }
  },
  "generic exp": {
    "icon": "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\nAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 500.0
        },
        "exprs": {
          "mandelinit": "1:2",
          "bailoutvalue": "log(20 + i)",
          "function": "(exp z - z exp (1:2)) p"
        },
        "scales": {
          "Scale": [
            -0.3479264089516564,
            -0.5344411314204682,
            0.5344411314204682,
            -0.3479264089516564,
            0.11666535727336375,
            0.17191101771493633
          ]
        }
      }
    },
    "description": "2017-08-01, 13:36"
  },
  "generic lambda": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 2.8
        },
        "cplxs": {
          "juliapoint": [
            -1.4027865514679811,
            -8.661198999787041E-5
          ]
        },
        "bools": {
          "light": true,
          "juliaset": false
        },
        "exprs": {
          "function": "p (1 - z^(max_power - 1)) z",
          "mandelinit": "/max_power^/(max_power - 1)"
        },
        "scales": {
          "Scale": [
            -2.626399486366833,
            0.015071400830707238,
            -0.015071400830707238,
            -2.626399486366833,
            0.577032454128904,
            -0.02283133544992625
          ]
        }
      }
    }
  },
  "golden fold": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value",
          "lakevalue": "0",
          "foldfn": "arcnorm(z-znext) / rad znext + foldvalue",
          "bailoutvalue": "rad foldvalue",
          "bailouttransfer": "arcnorm foldvalue"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            0.01034824821990327,
            0.038618751563008466,
            -0.038618751563008466,
            0.01034824821990327,
            -0.137505302089046,
            -0.9983757334746193
          ]
        }
      }
    }
  },
  "gson test": {
    "icon": "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\n/eRvFMH/BZ1TIxdVfjLVAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "// used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "var i int \u003d 0,",
        "p cplx \u003d juliapoint if juliaset else c,",
        "zlast cplx \u003d 0,",
        "z cplx,",
        "znext cplx \u003d 0;",
        "",
        "extern mandelinit expr \u003d \"0\";",
        "",
        "z \u003d c if juliaset else mandelinit;",
        "",
        "extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "var color quat;",
        "",
        "while {",
        "znext \u003d function;",
        "not breakcondition(i, znext, z, zlast, c, p, color)",
        "} do {",
        "// advance to next values",
        "zlast \u003d z;",
        "z \u003d znext;",
        "}",
        "",
        "// return color",
        "color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "// if the fractal accumulates some values",
        "// like in traps or addends, here is a got place to do it.",
        "",
        "func breakcondition(i, znext, z, zlast, c, p, color) {",
        "func bailoutcolor() {",
        "extern bailout real \u003d 128;",
        "extern max_power real \u003d 2;",
        "var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "value \u003d bailoutvalue ;",
        "",
        "extern bailouttransfer expr \u003d \"value\";",
        "",
        "extern bailoutpalette palette \u003d [",
        "[#006, #26c, #fff, #fa0, #303]];",
        "",
        "color \u003d bailoutpalette bailouttransfer",
        "}",
        "",
        "func lakecolor() {",
        "extern epsilon real \u003d 1e-9;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "value \u003d lakevalue;",
        "",
        "extern laketransfer expr \u003d",
        "\"arcnorm znext : value\";",
        "",
        "extern lakepalette palette \u003d [",
        "[#000, #000, #000, #000],",
        "[#f00, #ff0, #0f8, #00f],",
        "[#f88, #ff8, #afc, #88f]];",
        "",
        "color \u003d lakepalette laketransfer",
        "}",
        "",
        "{ lakecolor() ; true } if not next(i, maxdepth) else",
        "radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "}",
        "",
        "escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "// this one is just here for testing light effects",
        "// circle + donut + green bg",
        "var rc \u003d rad c;",
        "",
        "{ value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "{ value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "{ value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings. * ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "var c cplx \u003d map(x, y);",
        "var value real;",
        "get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "var c00 cplx \u003d map(x, y),",
        "c10 cplx \u003d map(x + 1, y + 0.5),",
        "c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "var h00 real, h10 real, h01 real; // heights",
        "",
        "// color is already kinda super-sampled",
        "var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "// get height out of value",
        "func height(value) {",
        "    extern valuetransfer expr \u003d \"value\";",
        "    valuetransfer",
        "}",
        "",
        "h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "// get the normal vector (cross product)",
        "var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "// normalize np and nz",
        "var nlen \u003d sqrt(rad2 np + sqr nz);",
        "np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "// get light direction",
        "extern lightAngleToNormal real \u003d 0; // angle to normal",
        "extern lightDirectionAngle real \u003d 0; // 0 is to positive x.",
        "",
        "def lz \u003d cos lightAngleToNormal;",
        "",
        "def lx \u003d cos lightDirectionAngle * sqrt(1 - sqr lz);",
        "def ly \u003d sin lightDirectionAngle * sqrt(1 - sqr lz);",
        "",
        "// Lambert\u0027s law.",
        "var cosA real \u003d dot(lx : ly, np) + lz nz;",
        "//if cosA \u003c 0 then cosA \u003d 0;",
        "",
        "// diffuse reflexion with ambient factor",
        "extern ambientIntensity real \u003d 0.25;",
        "extern diffuseIntensity real \u003d 1;",
        "",
        "color.a \u003d color.a * (ambientIntensity + diffuseIntensity cosA);",
        "",
        "if color.a \u003c 0 then color.a \u003d 0;",
        "",
        "// Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "extern specularIntensity real \u003d 1;",
        "",
        "extern shininess real \u003d 8;",
        "",
        "// r \u003d 2 n l - l; v \u003d 0:0:1",
        "var specularReflection \u003d 2 cosA nz - lz;",
        "",
        "// 100 because L in the Lab-Model is between 0 and 100",
        "if specularReflection \u003e 0 then",
        "color.a \u003d color.a + 100 * specularIntensity * specularReflection ^ shininess;",
        "",
        "color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "// two or three dimensions?",
        "def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "func drawaapixel(x, y) {",
        "0.25 (",
        "drawpixel(x - 0.375, y - 0.125) + ",
        "drawpixel(x + 0.125, y - 0.375) + ",
        "drawpixel(x + 0.375, y + 0.125) +",
        "drawpixel(x - 0.125, y + 0.375) ",
        ");",
        "}",
        "",
        "// which function to apply?",
        "def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "diffuseIntensity": 0.25,
          "shininess": 64.0,
          "ambientIntensity": 0.75,
          "lightDirectionAngle": 0.0,
          "lightAngleToNormal": 1.5,
          "specularIntensity": 2.0
        },
        "bools": {
          "supersampling": true,
          "light": true
        },
        "exprs": {
          "valuetransfer": "log(1+value)/40000",
          "laketransfer": "arcnorm c",
          "lakevalue": "znext.x"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            6.17259319541581E-8,
            1.481047465518587E-7,
            -1.481047465518587E-7,
            6.17259319541581E-8,
            -0.7434984620857783,
            0.13193109274660714
          ]
        }
      }
    },
    "description": "2017-07-22_09-34"
  },
  "interesting fold branch": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "foldinit": "0",
          "lakevalue": "foldvalue.x",
          "foldfn": "max(arcnorm(znext-z),foldvalue)"
        },
        "palettes": {
          "lakepalette": {
            "width": 6,
            "height": 3,
            "colors": [
              -16711800,
              -16742400,
              -120,
              -30720,
              -56832,
              -16777080,
              -12255318,
              -13391309,
              -86,
              -21965,
              -39373,
              -13421654,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1
            ]
          }
        },
        "scales": {
          "Scale": [
            1.2618009607903447,
            0.3929357281206941,
            -0.3929357281206941,
            1.2618009607903447,
            -0.4339341567092941,
            -0.27486404529241365
          ]
        }
      }
    }
  },
  "julia island in newton": {
    "icon": "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\nh/r5f9ToJNAc9/1bAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"-1\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"newton(z ^ 4 - 6 * z^2 - 2 p z + p, z)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan(value / rad znext)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "cplxs": {
          "juliapoint": [
            -1.5206030257859422,
            -0.6793669946849948
          ]
        },
        "bools": {
          "juliaset": true,
          "light": true
        },
        "exprs": {
          "valuetransfer": "value/10",
          "foldfn": "(0.5 + 0.5 cos 6 arc(/(z - znext))) (1 - 2 atan(12 + /dist(z, znext)) / PI) + foldvalue"
        },
        "scales": {
          "Scale": [
            -0.06304652018805038,
            -0.13512555867254444,
            0.13512555867254444,
            -0.06304652018805038,
            -1.505003082468022,
            -0.8261341416959324
          ]
        }
      }
    }
  },
  "julia lambda 3": {
    "icon": "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\nY2mE/AAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 3.0
        },
        "cplxs": {
          "juliapoint": [
            1.0461986446193554,
            -0.23520570929169538
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true
        },
        "exprs": {
          "function": "p (1 - sqr z) z",
          "mandelinit": "sqrt (/3)"
        },
        "scales": {
          "Scale": [
            -0.8181112238028444,
            0.7343841286948811,
            -0.7343841286948811,
            -0.8181112238028444,
            0.010018438816634567,
            -0.002712253338232021
          ]
        }
      }
    }
  },
  "lakefold maxdist": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    // This fractal is defined by z - R * f(z) / f\u0027(z) + p",
        "",
        "    extern R expr \u003d \"2\";",
        "    extern power expr \u003d \"6\";",
        "    extern argument expr \u003d \"c\";",
        "",
        "    extern mandelinit expr \u003d \"(argument * (R power - R)/(R - power))^/power\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"z - R * (z ^ power + argument) / derive(z ^ power + argument, z) + p\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan(value / rad znext)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "laketransfer": "value",
          "R": "1",
          "foldinit": "0",
          "lakevalue": "atan(foldvalue.x/rad znext)",
          "foldfn": "max(dist(znext,z),foldvalue)",
          "function": "newton(sinh z + p, z)",
          "mandelinit": "0"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            0.4747591623551637,
            -1.2202627027188262,
            1.2202627027188262,
            0.4747591623551637,
            0.17289938829538887,
            -3.0874091694029455
          ]
        }
      }
    }
  },
  "lambda 3": {
    "icon": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAF+JJREFU\neJzFm3u8HVV5979rzWXfzv3khBw4IQRzV1MxhNBwxwZe+BTxgoRCK7xFFMG+UhupItSqGK5ahGJt\nxUApYBGBcCkIggoIIpcAkkAwCcnJPSc5J+e2b3NZq3+smdmz99mBajXvfD7rM7PXmpm9fr/n9zxr\nzaxnRNfHHtUCAQJAxDtzHP+oaxOYndlrraNTzG9E/T3S55K+N/WbTg50rS51jNbmnKROJ4dCiNS5\ncb1Obpq0xfeI2jQa24BvDm4CmAio1hqNRiDMue92fZPjxk3ELIgaUCFEDbQQdXuNQIgakNr/ivhG\nxC3xvzU7tmMAzYHX6rXWyVXvBPqd7jGBiIYtAU7NakJrdAQ66YcQpr4BLOnrIvJi28XcoVNEaLAR\naak3B66jP28E1uy6iaCj8xrazJWRG8UWjAjQMfBGQtIKiEhoVAYJyCZEaNACRFShSSmgqcXR727t\nZm1RXWP7BJXUCZLEd2O1aQxogy8yhAYtdJ0yUgJIqSFVqSNMafC60QVS/t0MXHMFNCdCCEEcWEV8\nXlQnUsqJb5nErCi2xNbWMfg45kR1CYI6y0fmbVBDDDTFc11QtuMOJ9E87uy7WHti/TsBFggpkNFx\nvBcpBhQarTRKa7RW0b6RDHNcp4J0bKDRFUSTutSoIAV2IpxmwPcp35RfJ+BNnUiBE0IawFIghcSS\nAkvK5LeI7q/QKGXABEqhlCJUKqmrFWXcJKWUCSSkFUCanJR7pIioxYBElu9u6TR4UrJuDtyAtqTE\nsiSuZZFxLBzLwpLm3kqDH4ZUgxDfDwmUIggVoVAordA6JkjUK0HUjmPgNTcxfdRxEI3biFw9GkPs\nOss3Bq93k3la4rG8ZbyXWKJmcceyyDg2hYxDd2uO7tYsoTLdkRLGyz4DIyXGKx5VP8ATIaEWhEqi\nlEIJjWpwjbQC0gGSJsqIg2Y9QWALKVNS5l3IqFmaRuDCyDotdykldgTedSzyrkNnS5Y/O6ybjy7W\nrN4saC9A3oX2Tcu59FcXIUegGLmKH4ZGCVJGbiFQTeJEjYQoYIp0fW0ESU0dk2vsuqA1IYA1k/pE\nucsGP5fS7B3LwrYkGdtYvzXr0lHIMFaG3aOCoyY9Dv0/Ys+sW3h4/DI6CmWqfogQAksGeIHEC2KX\nMKSEShEqjdICmZDRoAoaVEG9KohHEqGNApqR0BjYGqO6TEX2GHBMgG1ZOJY0lreNz+ddm9acS2dr\nhq5WCBTgdEDn+/BDaG+BrtYMFT8EwJKSqh/gWBIvVPgRETIUWFIbNTS4RZqMOlXQ3GXQ1BPQ3Lcb\nI/tEyVvSqMC2JI4lDWjbxnUsMrZF1rXIZxw6WjL0TXL4i6OqCAHHnPIbntH30fvwWfzDh5Zx6UN3\nUA2yCMCxJRVPUvVDqn6IZxk1eMIQIYRACUWoBUKpCeBi8LWZbP1QGivClk0I2FeRdeCN5eMo71gS\nx5ZkHZusa5N3HXIZm6xrFFDI2HS1Ohx6IMjRX3LsjG/yzKkdIDs59TOP8OS/rmZodshoycYSWXIV\nm6oXUvEDytWQkudT9gJsPzBuESoCJZBKoaIY0UwJ71YiAiRC1oNsdlz7TUruEltauLZMonx7IUN3\na4Yp3RkyDngBZBzoaoXOFvjyhd/h6eM7YWQYbJ9H2n7I33xjjItPsDhwEriOTblqY0mQArYP+uwZ\nqTBcrDJelVieIcEKFUE0ZwiFGdxVKi40IyQ5VjEBlpVIWaRknQYdT5NrwS4e20Xi6xnHJp+xaS9k\nmDO1lVOOgFne3Qx0LOWNLZBz4aBus7/qzlvh1AtgaAgKo9DSwU1PfYvRNihkYPcIDBdhShcsm3cU\n/7HlaR57pZXn35DIcZEMr36QmjNoM3EKZQQuei+QJsGQE80rhBlJpG1ZOLaFY9tkbJuMY+PaFm4U\nwGJ/zjoTS851yLkO+axDS86hLe/S3ZahrweuP2YOT3/7XC6adwSLZ2leeuhrrL5mOm/edT6P//Jw\nXlj8EOtWTYLM2/y6sI7xp77M2ismY//qr7jvn65g0Ux4/arjEYzw9GULmD4FetqztOcztOZcClmH\nXMZJXC7rOGSifhkMdtJ/J8bh2GQcB9e2cWwby7IR7/t/q7VtWQ3RvGbpCcfR71j+rm2RTazvMqUr\nw9yD4cjsA7RfeQcEg/CNE7js+W1kLv4x13ollEq96UltQkBX5oOc/+UP87VPBPCF56BV8PMP2GQ/\nspJX18P2PR57xz2KFZ+yFybxoDY8poqqWT9pU5owUoEfKsSCv1urDVsyieb1Uk8PjURjtEjkn3Es\nsm4EvtNl1lSYdgDM6Qk4/pjr+cXb32RqNWRPqTnofW1SWgx5vWSWdsGKO9k4PoPNu2HtZhMThsc9\nitUAzw8jV0j5P7XonwauUmT4ocLzA+zWXJaulixZx67NrCIS4mENgWEzeQ1G0p51LVqyDj0dDmcc\nDb/5ai9zvvU6L999DGeeM0DuC8HvBDzelArpsLfS9lqJnzzyYQ477SmmPvan/MnH1vOjZxxE9P9l\nL8APrdqDkxnEzfCNIFAKP1QJAQLTdz9U7B2vYHcWspy68AAKWXh9o0fVD1FaI4Ug59q85yCHnYOa\nsbKPH0RPaNFNbFuSdSXtBZveLshnYdmzF3LyuR9myZM7Ke+t/F7g09vo+iGOPmcvJ598PdcF8zh0\nwTUcOOnv8QIb2xJkqxZe1C/iflmCfNamr8di866Q8bJHoDRSgG1ZHNjtsnTxCH+7QmK35lxcB076\nIHS1uRQrUK5CsQJtBVjafTnPT72S9dtcSlWoVKHqmyc424KsC52tMP1A2PLCPTz/1UdoOXstoef9\nr8HHm1Kanzx6I33/8HluPPQvmbXX9MOWFqWqhR+aJ1zHgmzG9KmvB5bM83j4VZftgzkcC7rbzbB6\nyBQzPW7NOdgZR7JrCPp3w5J5owhvM37mvWwYMO/SwslX8saZvXz0jh20h+t5fscMtu2BSoQv68Lk\nDjh8+AK4uZ9JD48SBn848PGmgRXf+A43/vpFts5cxdSL9mJJYyilwbUNwJ3Lezju5t20rmyFebuY\nc7BL32SY3gPt65eBKrEp+10efKkTxx7DztgWSsPWPTC1p40nvvxpKm1Hct6lZ3L6vMt44Plz+Ouh\nXth9ExQOZdPXjuXPb9nOmi1Q8c0E54BOOPT9nbw6fQPFYNMfHHy8hRoOe2wHr1zcx84eQ0q5CraE\nQ6fAgS0jiOWXQnkF3DsH5l9AwT2NGfNO4v5Pz+PGVz7FYy9ez9tvgedDxrYQf397RU/tyTB7Krz5\nnbPZOtTHNZVn+K++Nzmp7c9wvABECDIEPF5YshTvyS+w6Joxto8a6U1ug+wT88idvvGPBj69HXlI\nBz97cxvbRiV+CN0tsHTByRzVvZ5T1AksmByCDUggK7m9bRWf3NgCk/vgogzPt9/G6xtg84CPuG6l\n1rOmwuw+mDU5QLx4Fvx7AMICHQAhEIAIQAZgheD4rHwrz+n3P06AjRNu5xdf7OOU72X2CwGOLPCb\n526mb/5SpIBjZ/8lzxzWgRgeAzsEW4ED2AIsAZYE28I/+cc4Z/TTP9rF2i3w1haQB3TBSTM20v+9\noxi+dwH8uwXahjCEIAQ/MHqpelCtQqUMlQofmTPAX808DCfoZ9kpZ+w38AC+KvJ/vz6MHWziuRXL\neCJvozYNQrkI1RL4FfCrEHgQ+qBMcR7/GC9fPZ/rTlvIyfZXOGgSyIMnw5g9nZM+cwGdT803ESVU\n5oE9CMEPzdNM1YeyB6UKlIpQGuOOpUOweQXPzbtov4GPt44jDobt9zDt4jLh3iJ6bNwQ4JUgKENY\nBeUZ8DoAFYAOWLDpRG68Mktx5jfp7Qaxt6p1hxNQOmIa+YXHmhNVYJiL2Qu96IYVoAyyBNkxaB9H\nXbuTe4/u5ZOr958CADLCYus/Fxk9/xO0sJd8XxW7Q0OLgLwFWRtcx4yNjg22DZYNlgWFbrj+Swyr\nXmThsZmw6w7yi44nenwy4TbUEGjwFXghVAIo+TDqwd4i7BmHIZBXTuFTazr2K3iAqg554LNfwWcI\nzRCM7AVvFMIihBVjfe0Z6+sQtAKiUhmC7XdxzRnHYDs3H8CQ9Z90TZtk2nXtvIQET4OnoKoMERUP\nQtB7YZcCT5f3OwEAeC8xxlY6GceqalAZ0FlqS2MyKhYmmMe/NTd/cYCrnAAbR9HVIsw1Mfg0CSq6\nNhBQBYrAXoneChs13P223M+oa9tPC88xqziOg0a05MBuBylB2GboFqEZzYSKFgV1sr84swaqFjaW\nAuljGIuKThUlTQklhBb4LhQLVLSLj0v3zh7Ibvj/QsA5J4wxbRPkxoGMD/kQXA22BkvXDJ5Ai0nA\nGDMQ2HNfn0Xm4D5ebd1KvWxi6SjMrMKJXiZKtM4QIsnTyvs5GEE/mt/vqe9/sy35U6AA7AECC6QF\njgRHmBJPhhqLAD43ziWfOgj55vpbefWJSzjrni2p1hi8FcnJAZEFKwdOCzrfAUzCpodtcxcx7aju\n/Q5eCMmFTyyBycAUoDsPbS7kbTMCONLMkePJkIyKEGA7MP9ybnjzVuSqrRae6Obmm3fUgIuoSMeA\nlxmws+AUINOKbu1A9nbi2h2c8d17md62/+cBxweH8L3ru6G1HdonQ3srtGah4BoCMlaNBKuehB3v\nfwDcaawZyCE37oDBosXl677LAL+qgY8tL12wMmBlwclDtgXR0oKc1MrHQwWHf5v3jqzc7wRkFh0P\nsz7HabfNhJZ2KLRAIQe5DGSdaA5gm2d22yJ+xXzt2jzX/uBgxp2ZbN4FcueQGdav/dKJDJy5jCvH\nZxnw0gHLAcsFOwNOFtwc5PKIlhau6OzlF5Xl0LKIzy7/HD2T3f0GXgAzrJehZREPbXmCWzeNQ64A\n2Zx5IZBxzfOxY5uJkC3BkvxyJMfCqy7lW7d9hJ3DsH0QxBV3ebqvx2HuNDh6hiL3nuVU5j3OaO4Q\n2nLSTIwCTAklYVkyzmpyl3UxdsSjaA3d2ZCni4v4Pz1r9gsBt4aKswafYsg9EqWgU2ylt+er7Lpk\nCFEaA2WBjp5psEC4sGMAf3QI57+eYtW2DtZshP6BEDla8hkrwUgRRn3Juq/dAXqctmWj3CWfZcaD\nRRh+ixvkan47/zaKZ99D200fYsPsR3l7J2wdhIGSxYmtH2TyYT1/dPACiXPnWoq5I9k2CBt3wRtD\nfQyM3oRYdhGLH3kPr3W/AJuLDB32DMfdDlz+CRiusuS1aWjRbrCWYKToI8teQKiM67Q44PZX4f4f\nM3LYSk76l3WsH7mdn71/I5+/fSXPDZ3K0GmjPOktZ+0W2DwA2/bA5j0Q6n9jdffUPzoBpcUf4OMf\ndXl7ALYNwpbdsG4b/GR1ntWlJfzoqgHmfWWI+YMfouuc13hg1/3sLpwBD97KZHczYscd5DNG2BUv\nRPz1jXv1wjkdXHjMbxnUs9gxbNSwYwjaC7DEP5/Ref/Gr9dZFMumrVgxD4qWNK/EutvhyNkwZfMl\nfPe6s/i7/zzhjwL+7Bf/iR+0jOFN/VueXGOza8i8EQqUCfC5qC+uDYfPhJ6Nf8OzmZvYtde835zb\nB7353QSymwdflPx01Sj2eNUnDOHp/lm8+Jam7GnCUKGBtpzN3ON+wKPPwJ4RjeeHBGH0elmAbUly\nroUfCF7eAIvn3MD3XzuP8sHTyG3u/4OCv+W52Zy6/AmCO3/Ms2th+x4YGoNyNcAPaq/zN+8WuLZk\n407JZxefxavPwuBoiNaa59+QZOxJHNIrcG2oeiHipH/coqdOaiVjm6XoUOnkvb9lSbKOhdLaAI/X\nBkRtYSTrWrTmXKZ0ST7x3tUM3flBbvjpiZz26+M4vfJ11B8AfHllhZ/99lMc3bsSeejp3F26hS0D\nmpGSR6VqVodCpZO8BylMfoFtCap+tHaozDRYCoFrm/ykjQOjiCMuXafzroNrW6lVIeoWQGu5QtEi\nqaRuSbyQdehsyTDtAMmHDy8SiAKT3EGCeybx6Qcn88P7R38v4J2W4IoTO/nsPT9lWMwjL0o8sCrP\nhu2awdEq42UfLwjxg/plsVqetFkFikt6ddgLFGXPR8y/5A1t2JLYUtavBUqzEluXGyDj1dnU2qBr\n05J16GrLcGC3xaw+6Nmygnn/cQ9sH2HVCRv4dvYA7v3Kuv8R8Kmyl5u/38uS+8ogJtP7QCcPrfsh\nb/TD1t2KPRH4cjWgmuQKqLrlLwOWWl2UPxAqTag1QRiilMau+j62tAiVxI/W/+J8n8ZlcilIkiLs\niAA/UMnipFlRyjKly+K4RbPhut18CY+rv/QGd4y+wC2vfpO9573I+g8cxNMLtnDT4HTCnnE+fmSV\nt146j7eDq3ls4Qn84APnseQvzib/yc+zbeHL7Bj4Ai/shZ2Dmt0jFUZLHqVKQMUP8EOVEBCrQKuG\nRdLU2mBtsdT02Y6ZkCqV5aUEUqi6RdHG1WJLSuxQ4lu1JAWlNZYUjIznYeBp/iW/g8vv2cbru6Cv\n8xTOXX8f953wS3qDTbzUeyY7Z/TDugJsWQirzkQXLPDuYvnOn/P6jjz9Y9+nc+Baqm+uwO07iT2j\nVUaKHuNlj3I6UyTy8TBl6RgsMGFxVEd5AkopxPQLXtRxYmOzdNa6vRRJokSc9WlLEwccyyLn2rTk\nXHrackztyTL/PQLLgs27zNDU1WqWrOYOfxFx/UswVIKSBKebNYt/Tv7CIpt2wp4R8/61owAL+7Zz\n3ysHsnl3lYHhEqMlj3LVgPfDED+lvlDFgNNZpukkCVWLA8okSNhKKYQwkV1ogY7IUHXpMBEJqhYH\nlI5S1qQk1DKxQKg0fqAYK3v0DzhkXZM+k8/YjBQFWRfEzC9C9Rxo6YasBJHnved+m1eKsGkX7BmG\n8UqAFyie+k0nY+VRihXf5AT4Pl6g6rJDVJRC2yj1CWkxE0pCQDoZSk9IiVOpTDEpBEIJpNARESRR\nNpajF4SUvYBs2YsyNizyGRsvyNCat/jYx8/nvsfP5KI/v4H3ffRKbr/tLu57agXb536GnUOKPSNV\nihWfSpQhVvECKn6IF8SWTwW9lOSVagJ4QvZ5Q05h37nP6lqmaDpfsCEjtCEttn60kBNS5eIcQdex\nyEZZom15l97uHIfPksyfDsN3H8OmdTs49sr1vNYPv1oDW3aXGC56FKs+Fc+ooCb3MPF3pVSdzyf5\nxKmcQHQtVQ7drE3XFIAQUS6tAa9TYHVDQjSRi0gdkRF1REppfDFU+JbCD0O8wMIPLJOkgMaxJRt2\n5JjcCX9y3sPMrqzn7RGzTLVruMpwscpIyaPsBXh+YJIk9wU8lfQ0ITeQGsiECOqVgNZIrRQ6SlHX\nSpkcXKWTOpW0h8lvFZoSJiWyUBDJNAwTNyh7PsWqT7HiMVryGC5WQcOtV19NSbVTzS5g+dKLyGdh\npOgxUvIYr3gUK16UG+hTjdJg/OjeQRAShCGBCpPhLOlb1E9d1/eIqDTOSDliytm/0CKVCpeWfN0H\nFNFUsD6NtkkyZYNbxKOFa5kJU1s+w7SeVhbNLbBxh8KSglwGdu31+e22YYaLFWP9IIjyftIJUCoV\nwesLdfKutzZQL31TYVyg7iMDEU3FtDYuEH1CE5OQfNYWk6BFnasIAVrLyD2ijCwZ5/ZqgihQVryA\n/oExZOp7gaofUKr6JlU+jCwbqmTSUvtm4HcA3ij7FPCYFFsrZcBFjcRgk0+sRI0QIdDajBQJcB19\njCTiAKqT85TQCCUIpUoyvf0wpOwHUdAEIpLDVMJjGKYsnoCe6OvpwNZo2RjgO9dH6fIxk4kE0oqI\nj1P1ZhcFTpoHTR0NqUIIlBIoqQijmaYf1KfeJfP2SOJJZFcNAPU7WPvdAFMjLa4TQmBrrYgSy/ZN\nRAxciLpv9fapChpVIVBaIEjPOSDlc0mUbhymfldr1wBPJCT+n/jpthYDUttEIvZNSDNVaFFLqExi\nRcM3ByThRqT+OQK6T5+utTW1dvQMnOBp0iYi165zAa2bfYCaIiLBr6OPjdJ91s2/4BS14FnnIph9\nfP+UAJLn9zrQiZWbg59g7UYyUsC1mKge0NhxRe07qnqgSYxIGGoA22SfBhu7A/EnOOamNN1ioEkH\nJ8p536AnXmMM0Ax4LS5McIH63qS0kShe7xN8MmSmlKGj4TNt/bhzdf/W0I80uKagUy6TEKehNhyD\n1irVnAqECWma/wZnZ1EazLpfQgAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 3.0
        },
        "exprs": {
          "mandelinit": "sqrt (/3)",
          "function": "p (1 - sqr z) z"
        },
        "scales": {
          "Scale": [
            2.1278549673110922,
            -8.833208302776452E-4,
            8.833208302776452E-4,
            2.1278549673110922,
            -0.0069018927374372985,
            -0.04582214854991218
          ]
        }
      }
    }
  },
  "lambda 3 abs black hole": {
    "icon": "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\nAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 3.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "mandelinit": "sqrt (/3)",
          "function": "p (1 - abs sqr z) abs z"
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "lambda generic": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 2.8
        },
        "cplxs": {
          "juliapoint": [
            -1.4027865514679811,
            -8.661198999787041E-5
          ]
        },
        "bools": {
          "light": true,
          "juliaset": false
        },
        "exprs": {
          "function": "p (1 - z^(max_power - 1)) z",
          "mandelinit": "/max_power^/(max_power - 1)"
        },
        "scales": {
          "Scale": [
            -2.626399486366833,
            0.015071400830707238,
            -0.015071400830707238,
            -2.626399486366833,
            0.577032454128904,
            -0.02283133544992625
          ]
        }
      }
    }
  },
  "lambda4": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 4.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "mandelinit": "/4^/3",
          "function": "p (1 - z^3) z"
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "light math correct": {
    "icon": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAIABJREFU\neJyNu3eUZdV15/854aYX61UOnXOim04gaBBBAoEBCaUlWVi2hDE/W7KlGWvG4994edzyyD9ZwdJo\nbHlZAlnJKIAkLAawRE6im9Dd0HQDTdN0quqq6gqvXn43//64t0K3pLXmrXXqvvfq3XvP3mefvb/f\nvfcVauc3YwBE8kdIgaE0bhxS6OkjjiLa1Sqh5xFHIUQxMTHEMSRnMne+EJhK0RYCiOlbvIyZ8VFC\nzyfyfeIwgCgijmfPX3ABIebuj5RIrVGGSbGvn+kzI0S+Rxwk58+Nhdc5/5pxDCyY4znfz7+kUAqh\nJEImg3REbpuZU0eJgiCZnxRzv0nGuefNjkgIMtoAYmrlaaIwTCY7K6QQiPTIgvshEuG1VMRRSE9e\n0Tk4RK08DXG0QAB++2v2ugsUeu7nBb9JP2plWamQ8dwPlJSoQgeh1ulXifDJhzg1FgFCJqsax+nN\nwNAGZmcnjlI0Z2bmF0Ek14nTiQjEudLMKkdKkAZjk1X6+wzaXhNDG0Sef57FiV9XQBzPfz/7/vzj\nnBUk85WGbSO1TlZUKoSUxFIS+h6ceQttmuetukIojWHZGLadfE7Pmz2Wz45iWja2Zc8tgmDh6kuQ\n6VHMH0VqFY5pITJ5ZsbHsNGEnrtggf4vV/+3rfw5ViDQuc4u/FaTRqUyZ2aREEjLoWv9Nrx2OxEu\nVnOr70lBJp8nDkOiKCIKktURQiCVpljqplGt4LWa8zeUAhEJYikRs/5DLJAonZBUEt+r4yxegT85\nlVw7WiB8/H+x+r/tdf5v4hgZxzGe6yZWoNTcyBkGE2PDc2YplUqG1hjaYGb4LZQ20u81Mj0vVopK\nrYxjO6lcAiEkQiR7/Xxfg5h/n3yvCDIdmG03Uc2sM/u1lRbnrOSsH5k7nv/+nDF/La1SwWUcJyek\n/zC0Qd/gUnzfIwpD4lmvKwS21nSs3oTbaiKlAj2vXWFoLly7laNvvJmatQSZzjeWQJxcK1rgpdMI\nIoREKYUQIc1mkyjwz3Xas3t5znDOW/HftNdnHfC8yZ3zVjuZDK1aLXVKqaOKI4RSjFem6C6UUGFI\nHMeEcRstHGIpaAKGVChDI2OVCAWYpsXJ02fmrjXn4VEgILBtVL1BNOc8ZycvEUoiDZOsaeDWakm4\nnJVWCEQczznReWUIEOeFBiEQhkHsusnnOSWcJz2gLTNAGQZCSnpKBWp+RLteT24UxyhtEIcRUkqu\nNQ/yUHAxcRRTnhqjp9SLkBJXuGg/iRiTcUhJpKauVCp8DMrANE2iKMRTqU+Jo3Q6Aq0UTqkDkLQa\ndWbNXgiIBckf8WuxY4EliLnPQmuUZRF43rzZz8p9rvyo8uL37s5ZDlIpApF4ceIYqRRxNkdGG4lz\n04o9ZwJKXQMYlkVHVydKKpTWFPIlwiBEaU1PRwm31Z6zACEEUipM06AVNukZXESrWkusjNQ/SImp\nNZVGjThoYhS7CRqNZJv8BucvUkXMXl8ohZHNQhwjtGbxQI6ZmeY8WPqtWECggzjCzmQYKHUwWa3j\nhwFKKaIwJCfA1Aah0vSUihSKJQyt6C3mOT0zxWBPL34QcrZaI18qEfo+vuehDANpaKSQeM0GINCO\nTT6yKJ8ZnVNKLOI5gUKlyGQ7kUGAX54+Z6ICQSxBRDI55zyhDKUx8wU8nUSdscoCwWd/ly7s+S+1\n6z2f292I6wx2dJGxLQxtIKWPkBY5y8YwNEprqo0JnAzccvk6vnm7y8qhtfzdVY/xzksuwLIWM1p2\nWdRVZLrRRilNXzFD00tQpDI0nR1FGs0mkR8smBxzUaHlu3zn1lXc/9IMYeBDHBPHcerwxTyOQMyv\nfBqhYilxp8YJLVi1eg3lyTJxFM35pV97LbAA9YUvfG33He95gd+7OsuSRWvoLxaoNDWre3JU3JCO\nrMOxs6fZuGiAb/8/y3jvrhxCFSjmA8bqnfzrnXfw6Zs9Xp9cz3i1Rda2cWwbNxKE6QSagUsYxAkf\niONZEDYngFKKXLGDBw5WCXxvni/MWu1sNBGcK7wQCKmwtMa3LKSVxcoUmHGbxK06gt+w6gu3gZTI\nKzfD8xO7+O7d+7h6Q4tPXV/li+9pEkqT3kKW1f0lLl+c59q1sGHwFEIENEPBP3zhK/QODbJpx7s4\ncGYj7vgebrtuCU/9dZtnP/Uau9YvoaNYwM7m6O/qTVZTJjhCmeYcdpBKYRgmHd3dCW+YDadz3CPB\nGcqykIZ5LoZI+YgvBNlMjozpUBk+jd10UdL8tdU+Bx+k0Um9/yJn96IVG5muS9asXM7RAw+wInuE\n0/EuvAAGu7JU6nXMuM21Q7+EsT2MROuptByC8nHWb78EYeZZv3YFv3rgTuoz0wyfPsXNu2z2jyzC\nDSPqrXbifKXgyq3rGJ6qEUXhHHKUponntgl8f0HImndwyjSRuQz4s5wlsQgpE7yiHIfBXIuZRozv\n+4RBkDDX8zDUb1KIuuTGP9u95aKd3HHnD+gsOqxv/C+ee/w+sls+RdPVbFgcYjn9XLx5kF+9kaPv\nwg9g2yZP73mdp/Ye5D2/cwkTx/fT0TNAR9ci9r5wiI995ENU7bUIHOLIwjEkUw0PwzAZq7YIfD+J\nAkKiDIOaiLCUQeT7cyY7uz0sw6Q2cYrl6y6g3XYJg2Duf0IqTMOgUZumne8narVTfDHLHuNzodI5\nUSDhI+L1o2/FxcHlfP2ff8yyUpvTky7v++jtlCs+r502iJpnMAuDHHn9MO+4ZBWOZfCzn/07Z8eH\nuf6dl7Eqf4ZLNppMFa4lisE2YPL72yndso/9j9/L1e+8htv/JWDv0RGEEEyXywSeRxgGEEMtChjs\n7KE6PZkoJgVdiQMTKCUJLAszjvGaTULfn3NuQgqUaZHJWNSrDULPS9BjGBKHEXGcIs44SvV6rjkI\nIRCTrTieacDZyZDvf/ebXHDhZbxvVzfPnhmg5cFrhw6ybdtmohiGT59h/4vPUCpmWb9mFetWL2Hb\negdbwp0/fJpsxublA88T+Q16ioJdOzdw0ZU3cP3uZ/H8Ps7OVPF9jyA1UwGMTY/T39VP4LpzSvFC\nDy0UxDGmNrjxbQPc++wwgesmsDxOlCOlpCWhv7svTZr4RGGQCB9FqeALkyVzuyt5SYk4U4vjWgtc\nH7wgObY9aLYhjKE202BwIIvrg5KQdcAyIJ+B1/ftZfWWt7Fnz2H27XuO0He59G07eP/NO5ER/OL/\n3Mf7bn43D9z5x/zr5Gc5drZMf8Hi9eEJAt9HSklnocD45GS6byMaxFx74UZ+9dJhojDCNAzMXI7a\n1CShHxBFIXGUhEfLMPnwzl6+88wpwnOED9MwGM9th3MtYJ56S0Mm5hSTWksSpTANcExYsSxLTxGK\nWchYyf8WlXwyImDDjrcxdjbkyNG3qNSafOITt/Oua3fyxc99Cem1eN/Nv8M3vvgZtn3ga+R0jb5i\njuHpJlIptGHgOBmqrTZSSpTWKMOgN5PjyJlJlGGiDQPDNPFTtqpti0JnZ8I/DAORyfD9F8bThMs8\nqpzLWyxgnr+W0VISqRXq1j/46G4z30kYzdNuAKVAi4hiVqBaoxgqxM7Y2AbUypMUinmmG4I3jo5x\n6NXDIATTZ0d5+onHuXrnYjJ7PkBh/dX0dRXxX7+L5xtXMFFNnJwfRmiluXipzamyhxCgLWuObvd2\nFGh4HqZloQwzoQFSYNsOMYIoitCmgWFZ+O32POCZdY5KYdp2sl2IfyN4UtrAzDnofUc9nv3OP/M/\n/8cnmKqD50MQghdC1paceP0Q28c/iTQi9O88TaUFVfo4XYZGAyamytSabZYODXLRJVexbWOOrvBF\nOHUztIdZPCjZ4/x/rGzF7H/reXJOP24Y0mg3OXQ2RmuFlJJj1WnWd/USRhEr+4s0PA8pJRJJy/cQ\nQuCFHq1aC8O2aUmJcL2EjhtGymJjDK0xcjlalcqCRE40h4cSYCURhoHR0Yn65F98dbcfCr7z/Z9y\n+uQ4r+1/go3rFrFyMAcCirbH3l98haVrVlFa/SFGZ6DRThTl+TB8ZpKTp07ysd+/hfVLI770v3/G\n8FiTrYvP0p5u0ej/EE8f1hw+WUeKDG0vQCvFVcsshmvJjGzTZGmpk0LGoackUdPH+LP3X8iHVrzJ\nFKv4+OUF/us7JjkwMshIaxpLZShmHHzPQ2pFd08PzVYrAU2mSavdJONk8VqtFHXOAyupku0Tm5qw\n3kR95q//524n00dnVz9np2aoNVz6l+zgkacOctcPfsZ7tmV5Ze/P2fihB5kJbF695y/IrrwG109C\naaMJY+PjvHzwZQpda3lu30vceuuH+d7DAc76W/jGP36LhrWe/q4s9VaI60fYpqYR27T9CNs0uHzD\nIqpNn5GR/dz90RYf3/YgI7Uu9h/Ywwdv2o5sHiPbfInN0d3E3b9L3Y1xg4DVi/qpeUnyJI5BGwbt\nrINuebitZsIOZzlEmmrfefF2Gn6E12gSeh7qtk/v3p3NKiynhGXl6ega5OzEFIdePUwUw9bLb+CY\n/zbuu/8h1l6wk+zqa2i2U1AGGFYWpWyCSDFZrnLsxAk+eNkyWoXNfO4r3+aam2+j2lIMTzZpuQFa\nCSK/hlQWAI6hOXDsDbauXMI9HzlF3LWe/PLree3AXn7vY7eTz1msXtLDiVo/E0f3s+GS64njHFlm\nuHzzMkZnAqQ/gYtDZ6kDd3qGaBYJpiFPiMQvKMOg5gYo06BZmSEOQ2QYJaGvUIChxf0UO3tx/Ygw\nVlSbLtpWmNk+ppoaKaHZSnxEGCXh0rJg1eqVrF23mWY7pB0KHnpxhDiCD37gYzy55yCOJVFKYJua\nYtZi54YVWIaimLW49epu3r7pArKM4xdW0NujQVi86+aP4Mfw5S/9MyMjowwuHeJk9hqkVuxYZ/FX\nnR9kRXAP//iuZ3CK/fR3dzNTqaYrrRCzqT6lkVpjOw6F/j5atSr10dG5FJ+67dO7d4dRsqKGCWDS\ndgNarkcYxoxP+rxy+DD1RpMtKwpgdeGnCgjD1BIEZHMWmWwXQQCl/g2IqEWlZVMo9tJoBcQRaCUo\n5R0qdY8wAktLnnzpTTZ2V1jSGzPw+n+jtGojrWMPYfbsoBXAmg07+fuvfJN3vmMXQ0tX0JnzcWzF\n1x900WaGi6/7KEQdvDneJIwFURyxYulipsuVhHFKidQGZqlEvVwm8rw5zEEcIyHNHcbgumDbUCh2\n0t3dT1d3P8dPDVOu1mm4Id+790UMYz7DFJNwlyAEz4NczmLXrrdhZTLMtAuEKSSXUmCZio6sxR9f\n5aO1IGNpChmLnRs3IvNr2Lp5PXuPnWb04P08c9d/Jo59XB9MBwYXr+Wr/+u7yOYIK9TzdOfhb//2\nz1m/oo+SAxf3HODxj58gm7HJZnOcGBlF6cTkzUyGjt4e/EoVPD8BSQtyjVLJ+fxiGCWpN9uxyOUK\nGKaNH8Z4QUQYCUI0vZkGhkrqGrMAahZphqki/CBRqACUFJhakrE0/Z2Kn+yzMbUiY2kytiKY2c/6\nZRZSwavqDxkbF1zzJ/9G4AeY7iTNNmTyJSZmmvihou1sBGDf/mF+9vDLPPr4Ph5/+AGMsz/lsrUD\nBNE8yTIdh8GBfpq1WlL9WkC05uoQpVwCbWeFCALQGgzTRmkLkEQIwhhmak3u/OEeejsS0iMXZJzO\nf83Sbq3ANCRZW9DfSQphJbapyNgmh057fPEbP+DzX7+fw2Mmfdd8nsfG385o02HfqTxnp+DM+BT1\nls/Pf7GP8XYHZ6fhRz+5l89+9jOMHXuW979zI6dmLMYrLo5toU0Tw7Kpahg/O0no+7/OAlPUqB0q\nWKUitVZqASRWIJWRFj4MEIowFgQhXHvlJr7x9Tu5+Zbb0Cr1BQKi8/INKrWAKK2CtZpVDu0/SHbw\nMgwtkTJGEnP5RbvoKUkGu2DQmeDhX03w1puHWbT4SoqdFo89/hLDZ8YoFToxLZNGC0JA6Axf+upd\n3Nj3EuvWXM8L1a9w9smnULIbx3GwDE00OUUQe2kUkMg4yRDFQoCCOIrQR8ZzNNsxmawgTEgWUUQC\nKqROvKg0iFFUm23+7h/vpavg0F2AiTjhDLVmYvIyTgSHROhZhKokTI8cYemay6g2wFACJUWy9cKA\nf/rWt7j3n/6Iex+JeOqZx+jrLPDGcZ/pmRqHXn0NL4jo7OqlPD2Fn+Y51m3cwYffvYW/+bzHv3+r\nQGl5SGfXWmS9TbWlmaxUUVonQhoGcRzSqtXnTLYRhZSKRcSjh+PYCxJHFoSJhQQBlGd8RkZHGBk5\nzdjEOLVahTAMcEzNksE+du24gPde1c2RiSxjU0konQ2PpDlPP0zemwYMdcFbo9Dykt9FC0jX/pf2\n8/KhF7G1JI5DbAWLBgaYqUzjtpv0dJa46u27ePsFDpHTw2g5Za8+jE60CWKb42Mulo7Yd6zMdL1J\ntdlm3WAnzx85SVdHkbMTk7TqdaIoREpFNp9npjyB+r1P7N49O/FZQhSRRIR6vU6t3qDRbNL2XMIw\nJJtxuGjrdjZl9vP8cYN8R8+coCIlUZYBq4eg3gZDg4x8hjJ1xpv2HCaXAqRKft9V6sYyTIgjTJ2E\nmWqthpKKnu4eFg0OUZ6e4tjxURYtX4EfzFP3WGjCCJb3a46NBmRMia0C8tkcE9U2Umlm6o20SJKg\nRV/HhC2PKAjRs8WSKA2FUWoFcSyApHgp0iJmFEO91aaUtzgSXcFDjzzIrR0mpf5VVOqJ949JLlbI\nCHJ2cs2+nM+JmSKGSsOiWFDwFdBRNNi6+ULK5cXUajO0W3WiwMM0NT2dHaxcsYxSQfDqwZexNAhn\nPtnb0wHTNTgxBkv7HKxwgvXjf8iuyz/Joz/9c37Qv49XTo1TFuB7HqV8ntGxMYIgYZHiiSNxXG8m\nGvXTrSAVVCoRo2NnODN2hvGJcSrVGVyvDXGC3x3TxG3XWbl4iKsu3cTSlctpJAUhbBPOvP4kKzdf\nQVoaoFxL7iGAajO5z+xLysRqlExCaeDHRKGPIMJQsHypTd6BnA0FB5r1GpPtPJ3ZiNeGJTP15Hor\n+1w2TP0X8ku3E/f9LgiTu+74CnuaN/P0cZdmu029UiHwvCQtF/jonA2ul+zXWSuIQwjCkCCMCMMo\nrVAJEr8d0/ICPN9HS8Gx0yOcumeYnBnxP/7qk7RcqAwf5B3vuIy8DZONZIXCCEyd3Mf157HHrAJm\nw7BtgZETaGkiJXguPPTQHkbeeomPvnsTF/c+Sb5ZJlz2DwxPyeQcM9lqyrB4cORGbtBPEzguX/3a\nV7GcIu+8aiUNpnj+zTMYlpXklZWCVow0Z55ncclj/MSBud6jIADX9XE9H9cPEkVEcTpSByY1pumQ\nzRUpFLvIdfTz91/8BnkxReBWyb12Kw/+zWKGrGMsi15kWW8ibK2ZYgOdTHr2aOjke8F8UlcAHQW4\n8YZL+NR/+hPMbA9G1OClPQ/hWNCRTc6zTcjY8KUv/zMnJgTtDZ/jxHiIsjv5i8/8ESs7J/jYuv9g\n0+JuLNvGdiSd+UwCmJzVv7+7d2gFsTUwh+tbbahUq5QrZaq1KvVWk7br4qcMy9CaXCZLd2cXS4YW\ns2r5ctavWccH3/d29j3zBB+8cQva0gxEx7ELBjOv3Im16iMEYWL+s00eSiUCWHEZw3TQSW4D00gF\nM8CxIKwOI1SOB3/5JDuv/QTW+j+l3oZaaxZqJ2PN6s08/fQTPPbEXt489hbvvukGsnKGH3/761y4\nXDEmLuH1kQquG9BoJieruP/i3ddfvYOpajIx34dqvcX0TJnyzAzVeo1Gq4nreURRUia3TZOuYokl\nQ4u4YOMm1qzqIZvJ8K933MHOLUtZUf8yxAH/9qUnOXZqD1vf91nqLGe6IQmixAlqDUZqCU888jCb\nLliLVknecaATMoZLqag5fsql7mX54d3/zvbtF9HR1ckzz5/k7h/9mCvevmMOfCkJxaJm29YdrF2z\nnptvupjRU2/xwBNH+LNP/wlDy7dycszne488RldpiMAPktRYzwXv2Z0PKzil5YQRVOseU+Uy0zNl\nKtUK1UadVruNHwbExGilyFgO3Z1dLF+ylFIhS2dRUsjBDddsZ3qqTu/UnTj9mzlVqfKBP/gwZ579\nGeGKj/DgfT/n9LHXuPKipWQzBsUMtKpl3rVrET/64Y9YvXId1ZpP0JqgEZY4dtLj1PAoB14+yJnR\nMQLfo6d/FS/sO8jpkTH2PLuXyzZmsPJ9CfoUkHGgp9siZ0O2s5/X3hjn4IGDOKe+yBPT70WbPZTr\nDQzDIIx81AVX3r5bOoMUCt1Uqi2my2Wmy2XKlRkq9Vpi/r6XkgyBIRWWaVLM59mycT0DPZLj9/0F\nmaXXcPe9j7J2/Vq+96TmjTNZfn/dU7jZdYgLP08rsij2rSPfvY5n95/hzu/+mIFFm3n4ib088MgL\n3PKxW6m1DV574zSnxtrEIsPJU6cZHjnDxNQkrudRrbc4dvwkI2dGcD2fXWs7GG318n/uvZubrrsY\nRBJNHvzxt9h10YUEsaBrYClGxwpORr/DwdNtoiggRlNvtwn8ALXzuk/tRirqjSaVapXpmRnKlUoq\nfIOW6yarn3aBaaWQQuB5LkeOHKJW9XnySBM708VzL75AR7GLV48e55Ofup3//n2XjVf+IfWoQKUJ\n9RYoLRCqQE/PIs6MT3Di9DDTlQrbt++g1oRypU6t3mR0fJyxs+NMTk9Sq9XwfB/P86nUqviBjxCS\nExNtTp46hR8Knt37Cs8+sxevMU1z8hidL/2/HI02smzpIpquYrRiUG1EjEw3mKzV8T2f0PdRG6+8\nfbfreTSaTar1OpValWqjTqPVpOm28YKAMI5TaitRUiEQeL5HtVHn9OgZwkjy5ltvIpWiXm/yl3/+\nUapNeOSJFzCyK/nFfT9h5fqttL0ki6QNgRdoqvUGnh9g2TnyhUEmJqeZnJxiqjzN5NQU0zMz1Oo1\nXN8jjkEpiWVaZDJZspkstm2hlQYknu8jhGLDxi1cd901LLn0I3QOrWR8Jok+q/pcfrfnx7wVXkql\n4TNSKaOQ6Jbn4XoufuDjBwGen3x2fQ8/DIjiKGnykhIpFDJteZNCYBgWxBFCCfLZAssWDbF98ya0\ngnoVLr3ivTz61LPI2CTnJBYQhAnAlMrAMCxyuQ5MK8Nrb7yB73vUajWq9QrNZgPXbRPHEUpKbNui\nmM/TUShQKhbIZR20ksSRTxR4hKGH7zV59PGn+OUv6mxb181NH/p9bBPu+8lP+eCuHHrTLj67zuXW\nf8ozMl3A9Xx0rdmk7bXxAx8vCOYUEURJDU6mwF2mjQxaG2ilMJRES4FpKArZDP09PSxbPMTqlUXG\nytBywc4Uaftw6daNHHllP07ftoRwxRDFCbBCKFw/oFqv02o1qTcbtFpNfN8DIgylyGYzdHV0MNDX\nx6LBQXp7uinmDbROOUjaSeK1m0yeXU55eoyeTCWpZAm47bb38/Wv/m+Ce/fyp3/6CdYu6uat8RmG\np8roSqOBG3h4gZ+gv7SuBnGa8JBopTC1xjKMZJjJ0TYNMrZNV0eR1SuWMzSQpWhHjFYkbR+cTJbl\nK9fx4munGR8/xSdu30ZMkjVyPR8vCPH8gFbbpd5oUG/Wabdb+IGHACzDIJfJUioW6evtY/my5Sxd\n3EHGSQTXCiwTDJ3k6Cwzy8rlqxkZ7uOFvU9x8IUX2bxzBwL4b3/5KayogRZNrpB/x6PGH6CkRFZa\nTartNnXPoxn4eGFIkHZpKKkwtMYyTCzTwrJsHDtD1smSz+Yp5IsUC0Ucx2Fq+iyLe6DuSZrtBF4r\nQzAwsITBoWWsXrONlpdQ2EYjptls0Wq3abouzbZLvdWk0WrT9nyiGAzDJJ8rUOropKurm1JHie6u\njgTyiqRuaah5RdjGXD8mq1YWuPod13DkxBQP/vQe3KnjWBK+9s2fE8c+vUOLiOMkpCu57obdbhgS\nxAnml0KgpcRUGktrHNPEMS0cyyZrO2Qch2wmQy6TJZ/Nkc/lsG0LohDHttjz/Kt09fTj+elshI1p\n2hSKnXiBwPNiGs0mtUadWr1OrVaj1qinlNsjimMsw6QjX6Cns5ve7h46O0pYpsmpU29x7LUDXHnx\nChxLEqf027Hg2UcfYeOGFXMEq9ShGRxcztOP3U9x+Ht4xQvZcumVlJsW/+nbDVxRZKbRRNfDEA1o\nIdBSYEiJqRS21tjamGN+jmXj2BZZ2yHrJIrIZR1yGSfJxtqKxQOKQGyh7c13wmoNtpPF83x8PyQI\n3GTlWy2a7TYtz6XturT9gCBK9nwmk6W7s5uhgUF6e3rIZRyECCHyODU9zv33P8Ibb43whb/+OKNV\ngQSCWOMYcVoATXTf36u45WOfZNlQnooL5Qbsf9Nk1eqdTM40MJVESiEx5LzAjmGSNW0ylk3GdshY\nDhknm656jlw2RzabJZfNks/lKBYLdBRMhvoUZ6YSyhuGC7JDIglfUiqiGDw/wPU82m46PI+27+NH\nIRECwzApZPP09w2wbOlyhgaL9PSY9Pc5rFu3jB3bL+b0lCST7+GvP/99BjoS+Pz+916JY4BjQIeo\nYmogIukZECnpqhzC/cWlaCkYKTc4PjGNzmsDQ0ospTBTZ2drjWka2IaJY1k4lkXGtslm5lffsS1M\n0ySXTfbfW3t+RPeWDxOmggfReb2JaUIljCL8IEwjToDvh/hhSBAlRQrDMMlmcnR3dlMqqaQNOB22\nCcuWFlm/5hoyVpIf8MIY7dcpZrKIOEQaBkqbBCm9Xr6kxMSZk3QPLGV8ssn1t32BwqjB828kPkAW\nbIeC7ZC3HfJOhryTIZvJkrMzZJ0MGcch42TmRjaTJZfNkXEyKCl5+eXXeeqhn3L5TR8mihak1tLK\n0Xy3a9LPO6uEMIwIwoggSqh2FMdAEnEMw6DVbjJYSjpRbBMK2aQ7JWOnJMqAH3znO4SHvkuudj/i\n8Ut4YXceFQyDMNF+HSPlBwMD3Rz61U8QsUdX/3Je+MVPcCxNIWOji06+LFRhAAAGoklEQVQWrSSG\nUknLqaHnQp5pmtizw7awrUQZ2ayJbYIUivVr19JbXMTJs+flFeP55Ohsv1aMmEt8RDGEcTyfiovT\ndLxQ2HZynyeePcYf3LSIcsXj+GhMJutw9uwkv3jgp1yxYwUf+cB1OC+/jx987Sz5vlNctKmP/Z9b\nx7b/fhDDWjzfFx3UODrscujoXlYXjnCguZauXpvjZ6fRhWwOLVPN6wVKMIwFQ2MaJoahMU0TK+1B\n1Aq0Fqzsk7w8nMDc8x/qkuq8Zk2R5BfnrEIkzxFFCIIo6R7JZrKsWFZi+vgR/uGOo9x403UcPHKE\nw6+9jNuqccUlV3DjDWvgPy7HX3UZH/+bPGOH9nHft1/C7suzTRpwdh+idycjJ44ytGwt7//Q77L8\nBNxxUFDomeLNsQQj60I2h0oVoFTStW1oA0MnitBaYSiF1skzAe12k85ihoyV7PGcA8cmM+esfLRg\nlZl9um1W+HQryNnnjEQCsYWQ+FFIpVHnxOmTvO+qlbxQ7uKF115m8/aAV14/wsTUDLfdcgvbN2XJ\nZyNOxAarsyWwStzzyBt85L/cQMfaG9Ns6XqIWwx2aYibPPfY3Wy/cCN3TW5iojLD1qU5Do8o1I7r\nP7M7QXdWYuqWjW2ZOLaVgB8jUYaSkjgKmS5P8vDjD/OBazdw/z3f4Y/eu4XxqqCR9gzM7v+5bZCW\nzpIiakQQBHhBEgk8z0tYXhDghwnp8sOQyUqZA68OMzw2ShALXjp0kKlKmUI2z4GXXuDpX73IhWv6\nufv+VxjoyNLTBRdf93uo7i0Y2cUgreTG009yz/fu4vCR0+SO3YGz6g958LCiXA9462yDZttD3P61\n00mlSEl0ivwMQ2NohU4FV0kNmTDwaTarTE6MMjkxgo7r7Ny4nOlqg2vf9U5Oji8ofESzFabEDyQV\n5IBmq0W9UadaqzJTrTBTS6l3u5myvgglElwiiZDEOKbBQFcna5cvY+2qFWxel8ebOcaKvhz2mX8B\n0yIfVDFWXQuqANLCnTmD1bMFVBf33HMv1658nb966iYePzrJtdsv4fFDJ2m0XbRt20ghkFLM+QGt\nE0eotUIpgZp96CLS2Kais1hg88b12FTpGejn7KTHseEYqcXc3p+1AJEqIc3/IoVEKT03tDLQ6XuR\nUu8oiohEjCklecdmqKeXDatXs3njMga7Epj9g58f5IPXrsN46Tku3rqEo80tuF//DFs/9Q32/Wof\nW7ctAn+cN7/3Rxx0/4qHR7bw6KGjrFmymRffHCdMC6HSNi0s08QyTEzDwDBMLNPENDWmIRIAYSSk\nw7EVuZxDX2+OxYMZLtjYT8sDwzKRWuB65zrA2WeW5rK8aXu7lAqlDAxtJFamdfoAhSSIIYgTf5Gx\nHbpL3SxfupyhwUE2DdSpt+Hnv3yZk2NlnjlYZvDGu2hv/DIP7B1l6x//HZXTz7N0406eeeDfoXmc\nrmu+SM/ii9h/5HUu2XgxYZRss4TdSqRhpBMxNFprDK3RWqLV/N6dLXLOZmxPnBjmlz/4csLv02KK\n5/NbHeEcFph7PiC5l9ZmSq+NpN0NkVgAoJVB1slSyBcpdZTo6zaZaueYqcPY1Azr12/lnddcyp//\n/U/5tweOMNIeonHgXyjW9zEZreTp6rvYV3s3H/jCG5wYb7Jh7WX8bM8TPPPq42xc1MWq/hKFjIPW\nKpFUiDhNdgiUnH+oQ8ok4ypSZWRsWLZ0EWpqaK6kvlDg81tzZyPBrDOUQiXmr42kE9RIlKCkAiEJ\n4wTbG0qTz+TI5/JMTk7wujfJSbNFceBC7EyRp/cfYMXKDYzWItZcsJ0fPfQi36rcyVCum+ob0L/u\nBj79lYe4ePu1PPXcf7B02aVcsekSxqszPHdsmMOHnqOwfBPq6g/t3i2EQIqkSigEGDpxfMaC1LVS\nSdxXErI2LF97QVIPDBPYO4sC419TRkwcpV0ZKSCKomSfB2FIEIRJMsb3afs+zcAnBjpshyX9g6xa\ntpyhgX52bO6hFvbT9kBIi5Yb8PwrLyOV5tJtmzCzK3ny+f1sWb+SYyMB/3bfPVx+0bWUa20yuUEa\nrkfTTSiqFJL+3qXklYFUMnnwAAFxHOG6Lc5OTHD/Az+kuwgdORjoSgiHYyXH/Xseo+HOCzr7ND3z\nsD1VRDx3nG2+mH1gSimNaSSh1rYcLNPG1MlWcKOYEOgodtDbXaBRfnOOYboeOJkChpXlTKVGK4Cz\nZbCcDhYtWstffv0uGm5EjQKH3ngOQ895YISAKAVbbd/HDQL+fwIQSd3gIwhXAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "bailout": 512000.0,
          "ambientlight": 1.0,
          "specularintensity": 0.5,
          "lightintensity": 0.5,
          "shininess": 1.0
        },
        "cplxs": {
          "lightvector": [
            0.0,
            1.0
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value ",
          "addend": "0.5 + 0.5 sin(2 arc znext)"
        },
        "scales": {
          "Scale": [
            4.9773715201665176E-9,
            -4.7493194776638216E-9,
            4.7493194776638216E-9,
            4.9773715201665176E-9,
            -1.6238121304307953,
            -2.9367567196741064E-8
          ]
        }
      }
    }
  },
  "light test": {
    "icon": "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\nAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "// used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "var i int \u003d 0,",
        "p cplx \u003d juliapoint if juliaset else c,",
        "zlast cplx \u003d 0,",
        "z cplx,",
        "znext cplx \u003d 0;",
        "",
        "extern mandelinit expr \u003d \"0\";",
        "",
        "z \u003d c if juliaset else mandelinit;",
        "",
        "extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "var color quat;",
        "",
        "while {",
        "znext \u003d function;",
        "not breakcondition(i, znext, z, zlast, c, p, color)",
        "} do {",
        "// advance to next values",
        "zlast \u003d z;",
        "z \u003d znext;",
        "}",
        "",
        "// return color",
        "color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "// if the fractal accumulates some values",
        "// like in traps or addends, here is a got place to do it.",
        "",
        "func breakcondition(i, znext, z, zlast, c, p, color) {",
        "func bailoutcolor() {",
        "extern bailout real \u003d 128;",
        "extern max_power real \u003d 2;",
        "var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "value \u003d bailoutvalue ;",
        "",
        "extern bailouttransfer expr \u003d \"value\";",
        "",
        "extern bailoutpalette palette \u003d [",
        "[#006, #26c, #fff, #fa0, #303]];",
        "",
        "color \u003d bailoutpalette bailouttransfer",
        "}",
        "",
        "func lakecolor() {",
        "extern epsilon real \u003d 1e-9;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "value \u003d lakevalue;",
        "",
        "extern laketransfer expr \u003d",
        "\"arcnorm znext : value\";",
        "",
        "extern lakepalette palette \u003d [",
        "[#000, #000, #000, #000],",
        "[#f00, #ff0, #0f8, #00f],",
        "[#f88, #ff8, #afc, #88f]];",
        "",
        "color \u003d lakepalette laketransfer",
        "}",
        "",
        "{ lakecolor() ; true } if not next(i, maxdepth) else",
        "radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "}",
        "",
        "escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "// this one is just here for testing light effects",
        "// circle + donut + green bg",
        "var rc \u003d rad c;",
        "",
        "{ value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "{ value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "{ value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings. * ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "var c cplx \u003d map(x, y);",
        "var value real;",
        "get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "var c00 cplx \u003d map(x, y),",
        "c10 cplx \u003d map(x + 1, y + 0.5),",
        "c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "var h00 real, h10 real, h01 real; // heights",
        "",
        "// color is already kinda super-sampled",
        "var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "// get height out of value",
        "func height(value) {",
        "    extern valuetransfer expr \u003d \"value\";",
        "    valuetransfer",
        "}",
        "",
        "h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "// get the normal vector (cross product)",
        "var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "// normalize np and nz",
        "var nlen \u003d sqrt(rad2 np + sqr nz);",
        "np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "// get light direction",
        "extern lightAngleToNormal real \u003d 0; // angle to normal",
        "extern lightDirectionAngle real \u003d 0; // 0 is to positive x.",
        "",
        "def lz \u003d cos lightAngleToNormal;",
        "",
        "def lx \u003d cos lightDirectionAngle * sqrt(1 - sqr lz);",
        "def ly \u003d sin lightDirectionAngle * sqrt(1 - sqr lz);",
        "",
        "// Lambert\u0027s law.",
        "var cosA real \u003d dot(lx : ly, np) + lz nz;",
        "//if cosA \u003c 0 then cosA \u003d 0;",
        "",
        "// diffuse reflexion with ambient factor",
        "extern ambientIntensity real \u003d 0.25;",
        "extern diffuseIntensity real \u003d 1;",
        "",
        "color.a \u003d color.a * (ambientIntensity + diffuseIntensity cosA);",
        "",
        "if color.a \u003c 0 then color.a \u003d 0;",
        "",
        "// Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "extern specularIntensity real \u003d 1;",
        "",
        "extern shininess real \u003d 8;",
        "",
        "// r \u003d 2 n l - l; v \u003d 0:0:1",
        "var specularReflection \u003d 2 cosA nz - lz;",
        "",
        "// 100 because L in the Lab-Model is between 0 and 100",
        "if specularReflection \u003e 0 then",
        "color.a \u003d color.a + 100 * specularIntensity * specularReflection ^ shininess;",
        "",
        "color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "// two or three dimensions?",
        "def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "func drawaapixel(x, y) {",
        "0.25 (",
        "drawpixel(x - 0.375, y - 0.125) + ",
        "drawpixel(x + 0.125, y - 0.375) + ",
        "drawpixel(x + 0.375, y + 0.125) +",
        "drawpixel(x - 0.125, y + 0.375) ",
        ");",
        "}",
        "",
        "// which function to apply?",
        "def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "ambientIntensity": 0.5,
          "lightDirectionAngle": 0.0,
          "diffuseIntensity": 0.75,
          "lightAngleToNormal": 1.5,
          "specularIntensity": 2.0,
          "shininess": 64.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm c",
          "valuetransfer": "log(1+value)/20000",
          "lakevalue": "znext.x"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            -6.533252724634341E-8,
            -1.504003104233184E-7,
            1.504003104233184E-7,
            -6.533252724634341E-8,
            -0.7434985152831154,
            0.13193096209204666
          ]
        }
      }
    }
  },
  "light test old": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "diffuseIntensity": 0.75,
          "lightintensity": 1.0,
          "shininess": 64.0,
          "ambientIntensity": 0.5,
          "lightDirectionAngle": 0.0,
          "lightAngleToNormal": 1.5,
          "specularIntensity": 2.0,
          "ambientlight": 0.25,
          "specularintensity": 2.0
        },
        "cplxs": {
          "lightvector": [
            0.999657,
            0.0
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "log(1+value)/20000",
          "laketransfer": "arcnorm c",
          "lakevalue": "znext.x"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            -6.533252724634341E-8,
            -1.504003104233184E-7,
            1.504003104233184E-7,
            -6.533252724634341E-8,
            -0.7434985152831154,
            0.13193096209204666
          ]
        }
      }
    }
  },
  "light1": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "// used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "var i int \u003d 0,",
        "p cplx \u003d juliapoint if juliaset else c,",
        "zlast cplx \u003d 0,",
        "z cplx,",
        "znext cplx \u003d 0;",
        "",
        "extern mandelinit expr \u003d \"0\";",
        "",
        "z \u003d c if juliaset else mandelinit;",
        "",
        "extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "var color quat;",
        "",
        "while {",
        "znext \u003d function;",
        "not breakcondition(i, znext, z, zlast, c, p, color)",
        "} do {",
        "// advance to next values",
        "zlast \u003d z;",
        "z \u003d znext;",
        "}",
        "",
        "// return color",
        "color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "// if the fractal accumulates some values",
        "// like in traps or addends, here is a got place to do it.",
        "",
        "func breakcondition(i, znext, z, zlast, c, p, color) {",
        "func bailoutcolor() {",
        "extern bailout real \u003d 128;",
        "extern max_power real \u003d 2;",
        "var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "value \u003d bailoutvalue ;",
        "",
        "extern bailouttransfer expr \u003d \"value\";",
        "",
        "extern bailoutpalette palette \u003d [",
        "[#006, #26c, #fff, #fa0, #303]];",
        "",
        "color \u003d bailoutpalette bailouttransfer",
        "}",
        "",
        "func lakecolor() {",
        "extern epsilon real \u003d 1e-9;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "value \u003d lakevalue;",
        "",
        "extern laketransfer expr \u003d",
        "\"arcnorm znext : value\";",
        "",
        "extern lakepalette palette \u003d [",
        "[#000, #000, #000, #000],",
        "[#f00, #ff0, #0f8, #00f],",
        "[#f88, #ff8, #afc, #88f]];",
        "",
        "color \u003d lakepalette laketransfer",
        "}",
        "",
        "{ lakecolor() ; true } if not next(i, maxdepth) else",
        "radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "}",
        "",
        "escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "// this one is just here for testing light effects",
        "// circle + donut + green bg",
        "var rc \u003d rad c;",
        "",
        "{ value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "{ value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "{ value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings. * ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "var c cplx \u003d map(x, y);",
        "var value real;",
        "get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "var c00 cplx \u003d map(x, y),",
        "c10 cplx \u003d map(x + 1, y + 0.5),",
        "c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "var h00 real, h10 real, h01 real; // heights",
        "",
        "// color is already kinda super-sampled",
        "var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "// get height out of value",
        "func height(value) {",
        "    extern valuetransfer expr \u003d \"value\";",
        "    valuetransfer",
        "}",
        "",
        "h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "// get the normal vector (cross product)",
        "var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "// normalize np and nz",
        "var nlen \u003d sqrt(rad2 np + sqr nz);",
        "np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "// get light direction",
        "extern lightAngleToNormal real \u003d 0; // angle to normal",
        "extern lightDirectionAngle real \u003d 0; // 0 is to positive x.",
        "",
        "def lz \u003d cos lightAngleToNormal;",
        "",
        "def lx \u003d cos lightDirectionAngle * sqrt(1 - sqr lz);",
        "def ly \u003d sin lightDirectionAngle * sqrt(1 - sqr lz);",
        "",
        "// Lambert\u0027s law.",
        "var cosA real \u003d dot(lx : ly, np) + lz nz;",
        "//if cosA \u003c 0 then cosA \u003d 0;",
        "",
        "// diffuse reflexion with ambient factor",
        "extern ambientIntensity real \u003d 0.25;",
        "extern diffuseIntensity real \u003d 1;",
        "",
        "color.a \u003d color.a * (ambientIntensity + diffuseIntensity cosA);",
        "",
        "if color.a \u003c 0 then color.a \u003d 0;",
        "",
        "// Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "extern specularIntensity real \u003d 1;",
        "",
        "extern shininess real \u003d 8;",
        "",
        "extern specAngleToNormal real \u003d 0; // angle to normal",
        "extern specDirectionAngle real \u003d 0;",
        "",
        "def vz \u003d 1;//cos specAngleToNormal;",
        "",
        "def vx \u003d 0;//sqrt(1 - sqr vz) * cos specDirectionAngle;",
        "def vy \u003d 0;//sqrt(1 - sqr vz) * sin specDirectionAngle;",
        "",
        "// r \u003d 2 (n l) n - l; v \u003d 0:0:1",
        "",
        "var rz \u003d 2 cosA nz - lz;",
        "var rp \u003d 2 cosA np - lx:ly;",
        "",
        "var specularReflection \u003d dot(rp, vx : vy) + rz vz;",
        "",
        "// 100 because L in the Lab-Model is between 0 and 100",
        "if specularReflection \u003e 0 then",
        "color.a \u003d color.a + 100 * specularIntensity * specularReflection ^ shininess;",
        "",
        "color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "// two or three dimensions?",
        "def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "func drawaapixel(x, y) {",
        "0.25 (",
        "drawpixel(x - 0.375, y - 0.125) + ",
        "drawpixel(x + 0.125, y - 0.375) + ",
        "drawpixel(x + 0.375, y + 0.125) +",
        "drawpixel(x - 0.125, y + 0.375) ",
        ");",
        "}",
        "",
        "// which function to apply?",
        "def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "ambientIntensity": 0.75,
          "lightDirectionAngle": 0.0,
          "diffuseIntensity": 0.25,
          "lightAngleToNormal": 1.5,
          "specularIntensity": 1.0,
          "shininess": 1.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm c",
          "lakevalue": "znext.x"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            0.7952441876619356,
            0.6304982873693773,
            -0.6304982873693773,
            0.7952441876619356,
            -0.9246277162058896,
            -0.0502526805816977
          ]
        }
      }
    }
  },
  "log fold": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value/9",
          "foldfn": "log znext  / rad znext + foldvalue",
          "bailoutvalue": " foldvalue.y",
          "bailouttransfer": "log foldvalue"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 3,
            "height": 3,
            "colors": [
              -16711800,
              -16742400,
              -120,
              -1,
              -30720,
              -16777216,
              -56832,
              -16777080,
              -11725233
            ]
          }
        },
        "scales": {
          "Scale": [
            0.0036866033740769115,
            5.064895738880345E-4,
            -5.064895738880345E-4,
            0.0036866033740769115,
            -1.7122903769699198,
            -2.0629584870685285E-4
          ]
        }
      }
    }
  },
  "log fold (1)": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value/499",
          "lakevalue": "0",
          "foldfn": "(1 + log znext)  / (12 + rad znext) + foldvalue",
          "bailoutvalue": "log foldvalue.x",
          "bailouttransfer": "cos foldvalue.y"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            -7.1059162720424855E-9,
            2.3036271750264046E-9,
            -2.3036271750264046E-9,
            -7.1059162720424855E-9,
            -1.6236960492958108,
            -1.780104870474938E-8
          ]
        }
      }
    }
  },
  "lovely fold": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value",
          "lakevalue": "0",
          "foldfn": "(cos 6 arc znext + I) / (50 + rad znext) + foldvalue",
          "bailoutvalue": "foldvalue.y",
          "bailouttransfer": "(1+ foldvalue.x)"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            -2.1193607607764424E-6,
            7.605965426343759E-7,
            -7.605965426343759E-7,
            -2.1193607607764424E-6,
            -1.7453162705311083,
            5.864183945809193E-6
          ]
        }
      }
    }
  },
  "lovely fold branch": {
    "icon": "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\ncoecJ8U1TsFRsR1JHQBeUT+ZArwFHIMrNKYC6zUa5zUY9QBzcBXiPKAXLpn0faYct5XLh//KWfc9\nwvpD7+GWqz/F2bxADzVMo43Ja3tdWtqi9J7SYDoX2IfLMFnoOFRH04Rezr2zjR/dcSLznt/jX4m/\notH+EVwqHMD5+EKNEzUgs2FT+Uzu52Su+8EKlm/6Ev8+5xd84doruYin+eATb7h03guRHEBIVKjD\nSvAA/rF4Mq4wqselHsv9DfjXToO4dCRwZnoVcuFShm7dyPIlX2Tuut0u9w/pHEO4bDEd2KEBbaYL\nwoUGyKbKiZKE5Vsu58hjjiG3aCNnr72HwVQl1fRR1SPuvp3Am/iXGwdc5mCO8rcHdp89iRNqr+Z3\n2RVc2/NlHmu8grq1gy41NzlZ02f/qHUZtQUy43PELSrkBHy5uxVXwMzWFHUEMClioCZiX0UzG9Nz\neKxiMT9t+RBfqf8si9Y1cM3QFeyZO58fzptO/5HNpBamqVnUTeXioo/IT+Py9BKQ+bCzajJ/ipby\neT7Dc7fcxfzzq5n224eYeWcPn339ea44fzx1cT01FcOMm9xBeqICuVEBPBv4CAwcH/HGUa384YRT\nuLTmHKY8fiKLvlXLvZvP5LfHnszKJbNpr59Kb1kdheqYSP6KjDxpdaoVFAJEJ6kFiP6vw+XjCv1f\nwNURG5wJL9mxhtlnTOC5ba/z5MRvMX1zB9HzqqXduOeHWUprh1rQNFy5rU+Uw3mIB1Lc1fQYK+Qv\nrO28FeohiSDVBWxW/nbgX9ntVZpzVXlbYe9lDSxu/wlXNv6R53pO5pbhX9L64hZXe0xxFhC9ITNl\nQcdO2ITziyY151adZKL63VRnVrQCb+NKzS1qGa3Oaq6ovIzbN93DnMoVbH/zCzx6zhKm00YdPdzD\nh7iu537vx2lcHWEPMgeBU9SEfw5cCh+7Yxu3XHMSmx86nY8sXklUATyscz+h1jikwhyryjjCKWzd\nrKN5guP47rdW0rJrD23zj+Ci732Vq3iIuWv3OKW1AYekSm5KPiqrsktdPdCDyIDLmfKQZoMViDyA\nyG2I3I7IWo3AzyCrCh+Q/dsa5WWZJw/IaSL/hfxaPix3yvkud/chhQSRnchQR+zS2guIrETkaZdJ\nZI1Ltx2DNbLy9xeJvILkk5RUJT+Ql2WeyAak7cmJctuWS0V69b51Wl/8yGWBfJKSK7q/Jn39FSJZ\n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\nAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    // This fractal is defined by z - R * f(z) / f\u0027(z) + p",
        "",
        "    extern R expr \u003d \"2\";",
        "    extern power expr \u003d \"6\";",
        "    extern argument expr \u003d \"c\";",
        "",
        "    extern mandelinit expr \u003d \"(argument * (R power - R)/(R - power))^/power\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"z - R * (z ^ power + argument) / derive(z ^ power + argument, z) + p\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan(value / rad znext)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "laketransfer": "value",
          "R": "1",
          "lakevalue": "atan(foldvalue.x/rad znext)",
          "foldfn": "(0.5 + 0.5 cos 4 arc (/(z-znext))) * (1 - 2 atan (12+1/rad(z-znext))/PI) + foldvalue",
          "function": "newton(z^3 + p, z)",
          "mandelinit": "c"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            1.2422126996602627,
            -0.0025220916638728497,
            0.0025220916638728497,
            1.2422126996602627,
            -0.2966446127088015,
            -0.01610874840802687
          ]
        }
      }
    }
  },
  "lovely nova": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"c\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"z ^ -3 + p\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"/cosh(/dist(znext, z)) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(E^2 + foldvalue.x)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "mandelinit": "I",
          "lakevalue": "log(1 + foldvalue.x)",
          "foldfn": "(0.5 + 0.5 cos 6 arc(z - znext)) / (12 + /dist(znext, z)) + foldvalue",
          "function": "newton(z^4 + 1, z) + p"
        },
        "scales": {
          "Scale": [
            0.6666666865348816,
            0.0,
            0.0,
            0.6666666865348816,
            -0.030864240173940516,
            -0.11796729511513604
          ]
        }
      }
    }
  },
  "lovely sqr newton": {
    "icon": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAIABJREFU\neJxtm3d4XeWV7n/f7qefo6PeJVtyN7bBBQOhmR4ILRAIaSQQ0jNkBtLjO2ncTMKQSeGGZNKGXBIC\nNxBI6M1gg417t2XLkiWrS6e3Xe8f+0h25l49z37kc+S9z1nrW9+73rX3+4rP3/Cax3/7iYQi5PNZ\n8Fw8z8VzbTzXxnUsHNvCcSw818HzQEgykqwiKSqSrCHJCkKSEUIGISEJgRAgcPEcC8c2cWwbDxBC\nQpIkwMN1/Ou7rguujW2WqVSKOB7IRoRgOIGhB/EAhETQCKBKHqmZCcqWhaoHCRhB8Fxc10ESAlUG\ns5Qnk5nGNE2QFBTNQNUCyIr/XZX/HjxAvpADASAQCBASCBkhXIRwEELgefjJcar5EwIhZDwhIYSE\nh4cQnh8oAvDf9//t4rkunpAAGUkIwMPzPDzP9a8n+e+5to2wbVzH/1zXcUASCCHQFBnTLON6gkgo\ngus62LaN53nIqoIiPHLlAmal5CeyukCSJCMkCSEEUjWSf0iA/0r4h5hNgOSfJMkIIfl/9lw816mu\nnn94nlMNwgVvNqjZS0kISfifMXue6+DNfr7n+YmpniAJCc+1sW3TrwyBnzzPRRIQDgaoVEqAoFQu\nIgkwrQpCgK4qCM+hWMhgWSYeAklWkGUFIUlziyYJIBQMMpcI74wkzFaBEAjJX2FJkvwMCqn6nZ3T\n5etYuI6D584GX/2Nh+f5iRRCrubOOX2O61QXwcN1bf988L+o52Kbper7HrIQ1QR7NCRrKZeLyLKE\nIstYZhnHsdFUlaCuUSnlKJUK2K6LkBQURUWS5LnKloSEBB7FYqEacvWYq4h/rAC/CmR/30syQojq\nqtm4tjUXkOdWk1C9nldNAkIgVc/1972F69g4toXref71XBfHsec+X5Fl7EoB17ExLZOAoeG5LrZl\n0d3eRMWykIQgGgqRzaVRFI2QYdCYrGF0dJBypQxCRtV0FEX1PwMPIfn4I80FPLcVzijHM7aCoLoF\nRDX4M6vAdXCqAOevqL8VfBD1Tm8FBEgykizTWNuAa1tYlSKOXcGtBi0E/mvX9feorIBjUirmsKwK\ni+cv8pNhlmhbX0bXDWzLpK2xkWw+R00sTmMyiexZZNIzeEio6ungXc8FIZAlGUWSkJir+jNWv1pi\nc5UgZkFOzFWBJClVxPcBz3PsKsKb/orOVkH1Wp7n4XoewWAYSVKYSk2D52BbZSyzjG2bOK6LJMt4\nro1lVqpfGHRVJZcepzYWZXBkCNsscu7Zq/ngRffSXN9ILBLhldf/Rk2iHk0W3POlxTz97GNYroui\n6iiqjqaqOI6N5+EHr8iAi3I6eE5XgBBU4dtvdX4fA09CSK7/W5aRnCqiInBdu5pdCVFNjiTJCE+q\nJsG/WLFUQkiK34YkCdeq4NiWnyRFR1EUZEmhVMwhAhEk4SFrAeT8KCOjQ1h2hemxAf6cmUZSVP79\n8Rv59p0vsGl4iB07v8C2X00yudcinckQTjQgKyoBI4Bj21iOS0ALoKsaMh7lchHl/wke5lDYb13g\nVZsXQiA8CU9ISELGkxWfA0gVHDw8x8GhUkVbFVdWfOT3qq3PE3ie5+OArCIrGgIXs1wEz0MzPEBH\n1gJ0xKP0Dw1iBCPYlTSKFiAu8hza/2OcssTe4Q40tZ1zE7fx5J8eY8uBg9x98aM88sIdnBf7ENH6\nZoQkYQRCKLIgm89jBKNoqorAxTJNSqXC/6cNzm6B6uHN/X0WEIW/96stUa4mQQi/Chy7gm2Wse0K\nrm36gIh3umV6np9ARUXRAkiyimOWKOVTVMp5rEoRD8FYKoNTylDOp9CCNWQmhjFUQbHchem10BPV\nOPecNZTsfm6+/Q6G+rYT9Iqcrd9IIBrzl0/RaaipJZ2awhMSAcNA8lxwLbLZFIVyqQqCnAF+Z+CA\n5zrg+n19tlcL4RMIMYsFsoo8117AtS1sq4xtln08cOzTHaHK0nwGqaAoOqoeRJIkKvkUxewMVqVA\nqZBGC0TQIrWUZ4YpzAyTaJnPWM7GkF2KCkyHVzK09zHa9QAnrDwhWeKideuI19SCbWJ6Eq2NLYyM\nnKBYqRCLxPAcC1m4pFITpPM5kDUk78xVnkP+2R7u+MTmTLIyC4RzSVCQlWoShMB1LL8CzBK2VcF1\nTFzXrlaRT3Nd1/FpsKKi6SFUI4TwbAqpMQqZaVyzQDYzTThej1bTRmXyOFNH32H0wOvowVFa5l1M\nJNdPNm/S1TTKBzoP0BCU2LdnMyMz/UihBI11Daxc2MvUzBSJeBLPruBYFUqFNBNTkyDrBIIx5DU9\nt28UnPlTbQtnEJnZVjAXNLPk5kwG5+DaJo5l4toWnhBIkuIDoiT7oFnt8161D/svbTzPpVwuYGam\nMCslXEDGxvZkNCOAEoiQmt6H4ZxkymxGyx7h3tsHWXruf/DS5kEmsjGSxmHe7Ze4+pJrmZye5skD\nX+cLd2wkkWxi9fJVHB84Rm9nN3sO7MbTItTVtxAORZFXz//AxjO3gBBntkT3dPnPtUAxRyY812Eu\neZ7rD0tWBduq4LkuQlaQZXmO/EhSNXmOhefh93jXwrZNAEqFHOXcKJ7tYTs2Zm4KPZJkvG87jdER\nUiwjGdpF1uzi2e0zvPXuWwScMXL2Ho4VWqjTY0zMTPP3vQ+yNvx+ahtbCITCHD68m0Q8ydBgH5Ml\nm3nzlqHrAc5ffR6S6zrVnu3MMTjvDFD0XAfPsXBts8rd/ZYmVQcbz+M0qqs6sqIBHo5VxqoUfXpq\nV6rkxvGbi2vjWiUc20RSdGRJQtEChGsakUSQYukU5ZkJSukpxvZuoi0wgusEKJQ3kRKXokoeDoup\nYGO7tTTW3Uo9EuncfihMsyZ5JYFggNTkKI+99C8UyhXKxRwHj/fT0bmYslnh4d9dyTvbXkXyR93T\nSXDPBL1Zfu5YuHYZtxqE67nVwai6GaqMTVY0FFVHluQ5lmeZJWzL3xqObc5Vk2MWKOamcR0L1YiA\nU8EIxQg3tCPjYLtZTGsSwznJ0cxRJvK70EQHdaXjpExoXXoJDt1c8YEvU5rZQ6hmCbXhhcSjAVSg\npT6G43jccf79NDe2snbVauo7F/HtB9/Po/95C3e+79dkclmkuYnMdauAV53qXGeuL+C5OJYPbKdb\nm08nZ6e92UlLVjVk1a8C2yxhVYrYVgXHMXGqpEcIv/u6lSyZmVGEZxOINTAzcox4LEqZWm7YsB4X\nmbaGEqvXm3zqk43ogUXY7deQaFhEe2MrXR0LuP9LG4h3X8WFl1xPQY4wMjKDzQzfuvdz3Hbzrew8\nuouWxkZ279vJjZdfy6bXt/OJ2x/CdD2Wzu9BcRwLyfOq3F74e7S65RHS6e7g2Ni25XN5ScaVZFRF\nRVSKuK6DrChz5EZRdYSQcM0KVrmIpQdRVB1JmD6/0HzGV3ahlD5FIT2OrBo0tPcS8UoURJZHX/41\nKst54EcJPnBXP/v2XolZ2k935zXYWg0nh47yl01fZtmq+3nqj1/ljRf24mUHsb0ZGrQwj/7hEZ54\nZzvrV2wgm01xqv8gu3a/yKLaUxytXIxVMXn0Lx9HXtH63o2zzM8HN6rVUOUBVGd01/YHF8dF1QwQ\nAkPTsa0ypmWjqdocELqOhVUpVcdYF1XT5/iCqHYLIQSS54/BE8PHSA8dIGls4o1j02xoHyCfbSXU\neRGP/maMSStAwGjA9UY4NmIiXJNUaoLKaC3FQp4n/uuvlIcHGJx8gWD0HFZ2DPPm7l0kQ7s5e+V1\nWMVfIvL7ueMD0+wZvZ12pY9IqJbvf/OnSD57M6uTnDPX9VynSmhss3qTw0PyHMr5acxywUd6QJYk\nLNvyb39VhyR/ANFACFy7QqmQrU59Np6QMSslzGKK7o4uMtkUN1x1NZdedg3HB3V+8ZV+dg70UnKH\niEXC1DYvpqnhfAazAxTNGuRQnIvecw1Pb/oe0zPTNNY1cOstdzBtqXT2fpwrr3ibgdIwX/1WhOnC\ncrTGhxgbHGZCvJfv/bKDDulx9g4d4fDQCbrmr0IRQvJncs/vz4qi+zcihITn+C1NllU8xwYhsEpZ\nctkpYpLAdaJEgkGmUqlqN6jSY8XHA0mScWwbu1LELOdRNQNFUVGNMLnUKAf3vIniVnBwePWNN0l7\nLocPBbj8wm2MWine3vJHvnLfCX7xYIQASTZc8y2SDe3884OLue8jbzB88hiVYoa/DxwkM32UmZlx\nzutxWTowSe+fM0jC5M0/N3AyGyCa0KgPt7HlaI4KScJ6Ai0QRpLVAEKqJsGcXXHP5/eSgmtVqJTy\nuK6DZVUI6RqZySFCmoLrWtREIziugyTLOK6HrKioilZtjf4NUs+xMYs5KkW/EjzXIZpooOTpjA4O\nsKozwg/uu5O1DTo1oWEuWd5Ogw4RaTs//0EHWdvBxiGfGmbPtue56cJfctcHL6SQTxMMhFjQEOKm\nS6/l7JoMRw9X+OjzH+T3J01WtAmGUosIha+lo7kRzxb86ZHnkSjRUBNlfkMcSTVCqHqoulomdqWI\nY1s+yusBJFnBKmVwHQvh2siKQmr4KP/2/fdTKeV47Y2/ocgSsXCEUqVCKBjG0PXqMCkjKRpC0XA9\nl3IhRTE7iVkuYJYLxOJJarsW8vL2fr7x/Qfo7jpAVF7IT57JkypDyF3D+vMrGExgaDW8sOUFzl17\nMYpr0nM9eFYZgKKj8sdnnqMUPcbeE8u4+coX2VJp454fb+CfvzDD/OY+Tu19lYbO57ju7htZuXAN\nh0e38vaRkyiKFviHOzu2VfbHX0lGVTX0cA2lQprpkWME4w0YoohCkQWr1nL82FbWnfMKnh7n1Ogg\nwVCcxT2LGDi+hxHHvzsrFA1J0ZAUHTyPUjGHWcgQitfjaAbCLpEtu0hGjNUfmcevvjbKZ78c4dl3\nwNK7GM6c5OYr4qTGjvL43nN4a/PzXH7BJVzTdi+KqpOMBKhUyjTFDVbPl1navJPa5nMZtt7h3d+8\nys/+2kojHkXlCB9YYpHrkzl4+FW6KRKVi8jrFn1soyRJSLIMSHPjLJKMohromoGi6hSy06QHD2Gp\nIRJ2P1lb4vc//wu9XfN5z7pLODA4zJfuvoUrbo1RPGXwzrZNWLaDUHQUI4oRihOO1xKMJLHMEqnh\nowhZIRyN88im+8hvP8GuLS/wgZuC3L+xj4OHVlJxLI5NyGQnW+gb3kOd18DRqRH6hyYwQnGE53Jg\naJSSpyEKk2TiexlPZ/jSFxei1QcY6qtDCdZSlPbwwCc38NtfmaS8DPNr4XixiZASQT538Uc3CuEn\nQJZkEMKf5ipFgqEoSAqaLND0ABesPYe3t76CZc+QrNlPs5Zk4uQwb/cN0dnaxif/fSXXnnU/b735\nEmYhh+2CHIiSrGuhqbGdRKIeR0hEozVYZp7xE4dRQlF+9C/fRSvvZXLyFLUBmZ1H8nQbnRiNa+ht\nW8Lw8G6WNZsUldVcfNFNrF5/JTPZLIauU9M4n0pqhJ7EG+zaE6EysZTm7lF+/uNDJKPjfHSxzOZN\nBps3p1hdv55tBRmPBaStGWaKaX9Ak4SHEBKqHsAIRAhEapBkmdTUMLZZIhKtoVwuccU9awgzypQ2\nj8mZC9iTKhCP9qPJguPH9tEbuofO3nOobe1BDYQol0oYwQi5UhEXMHSVkDtDWLZobluAgUlmbIhE\nrJPdQ2HuvK+TQc3iPQtCNLVOURr9Pbet/zZXX32K225TiAX+zMDBeyibDsFEM3qohi9++naQZYZH\n+0gmRkgu2cbvfrmXb90QYOxELZ/8TY40JbpYwPBEgQXxPlq6H6ddRHHQkAQeEoDrT2i6EUTTA+ih\nBB4y+cwkMzMTyJ7Fcw+/S4lmlnYsQlUC3HOZzX8NfZdKZpglkV/TYr/D/3nxcfRwDbG6VizbwXbh\n6Z2fY+rUUWYGdzE5Mcmulx8gNXKYNEXypRSlbJqwV2Z41wjSmMLTR7rYNtiPJ0+z4MrreGnXOP/8\nQ4kV513AZLGHoR0/JyJV6Fka5o23jpM0BJXar9DUEMAoB+huXsL3X/kMbw6dRYsXJ0oT442ChZes\nRWu6gJ37e1GiL9EQX4C8uuvmjUKAJkvk8xkMI4zsWZi2BYqBLRRK2WkUPUjf0AjmzEmmpk+Sd112\nnwiy/Ze/ZmFPmpcOreaK936J+lgSB5loPMnQ8CDr12/gfz34Om0tHbzz9msMDO/F9kwmZ3bQ1noB\nwWAQrTRGONlCpGE/O8YzNORzTDTYfPLeW/nhD5/knz/7CfRYmpkBm7aGEcJiN3uOR3jhtS1Esyfo\nG96PWRzlix+eYveOIk7HQ9x60y3Upn/PG6MClDhGQ4hxt8D80NlsOH+Ct3YupGLLSNnUGFYpTaWc\npy0ZJZ9L0dbcRjmfAs8hkWhg2apL6G7vYkVnE2e1j5JS6liy7HLk2BK2TJ3P9oPr0ZUkr2/fzv6x\nGbp7zkLVDEQwwsDoCA//8cO8vX0zDjZRphHxRUyyhFA4ztjk7xlz8izoTFPntJI5Cg/9fAPFoseP\nf/InzLjLb559BM84xLUfnsfed0fIBSJ0xH/GbaueYsw2UCyNmLGTF7aVGLfqufi8Dby15W1273XQ\njMVMuR7J0iSxhXH+tnUzr727Ej0YYdmq9ci9sXUbS+UKC9ubwLU4evwQDz1/C3/6yWsIx6IuWcui\n7i7efOXP7N2xlUPpEvNalpIuWfTOW0Bd61KUSAJd19AkD0mP0NXeS1NNnOl8kYnpSazpdvoG+ojG\nkiQqW8jnSnTVzUeZfI0r33eK7MwoCxs9itJx+kvwnRePEpIh2KjS2b0eI9bL5z/zWV5/9RWW95R5\n4pkgjaEse/s9TkxlWLTiBqxiDYeP7+L6m5/hd79/gKtveJSdW5qIcYSZUANddQ6v7TxFU/x8xsb/\nihZegiKBFG/oopAe4eCJkzz37J+YGXyHc5Jf5Gc//DJHjh6gtbGFgVNbGRk4zLjbR73ejplPc9Xl\nN7GwZwmT4ydpqG+hZd5KWjsW0lbfgGEEeHv7FqZyed7q/zq51CnIT6AXT/H+jz+GjMKt1/2dDe9x\nOBy+gsu/eiup80/Qn61ntEYn6oGchO7562hoXUFj23L2DNdz2XWtvPKawb1fF1TaA3zm9vfQ3H0L\nrd0ruey9H6e7/YtUCj+ltvwG/+e3EZaHXWpvWMW6a+MsuvMGsukkDe5TVEyFIAW84jTyEz/688ZP\n/uRyfvXdPzGTHcEq5+lqbuOVTbv58Q/+lXPvTDDz9j0c2mHxkcvibHKfoTbTwsT0BJFYLfW1TcST\nTbhCRagBJKfMvHlLePqNF7nmkmtZXtvMvt0nue6yS/j768+w7Z1NqG6RJk1h0fsm+dnj0xw9lqG5\n+RJa1gyzY1cKJwjdLauIJeYhyxq9Cxaxd99+jg1tJ39gjMdevZ6hwcXUJAZoaL+LqXSaP77yPB+4\n4WM8+utPo5odLL3pFh5+9xRf/tqNdHR0cPcn74LUHXzvngW89rd3yGZOMZ0dQbrpxutp0y6jOD3K\n/NAo4eRCsl6Ig0cPoi/PcnPX3bzzXJnhzjzf2rGTE8MBjhdOEmlcyLGD2zix9yUKM8PUGi5ddXE6\n2rrYd3g7v/7ud3ELEzz44LNM5Q/xk+/ezPF8GcN6iW//zxkmluzh5m9mmJiY5uDB4zzyy6d44IFx\nvv216yEFQ8NDVCoVbrrpZjKZDGvXruXvrxzH63Cp1TXOMl7n0ZdkVvR08va+d/nGp77CkSO7aQg2\nYCy4DsZ+y7nhMGNj42QyGQDefXYNd311nFTxUoryBdTWX4gcJLQxISWwzH7syimmK3VcePGlTI+N\nsXPTFLsHtjCWLqCFZxhNZwm6Dg1OJ2PTOXr0dzgypjF/0dm8vO1tMqbH/Z97L6PjKq+9s5WyK3H8\n5ABHj5wg69YSdrLk9R52vBBkYk8t8znJaEBGVisEZIvPfe5z3HDDpezq+ws3vvcaenuWcuTIIDff\nfBO6rnP95TnefrrMRSt2kM7VojsLSDTO44qLryKfTfPyY7dQiUaJmJuYGmrEopGVSxPE9Qv53T/9\nghcPPU9rzWK00Bt0LLgTSY8gLwhfvXHFyvO54yNfYduOExTMEbJjo1x+xQfo69vPN7/wXcb2PUx+\nrJHPvEdhYmyKnLmIay66hi1HyjQtPo+1ay/l+NAAf9t+F9dd9i26upcwdeoQuhFGD0bp6ejiMx+6\nhSdefIabLrmRiZOHEO4ktdFG5qVynHvxOtarKfbv286O7ZtZdNYSRidfxC7FuOjCi3HtPCuXNbJ7\n69Nsev0Q71vr8ofnT/LNO/M8/Ye/s2/vL9Aif6Jd8li/MsKmw+dx4eWfYWb8CQ6+soWe0CRvbnqX\nNTevZeG8DvYfWsyxo28xlpOQ1yz66MY/bPsc//SJHxMoTyHZexku1oFQyKUm2dM/yP/61aNs29pP\neWY7eesGxkszDBZCbDv0H3z9vp9w652XsiDZQzRk0H+kzEwmTVDXyKSniYdDqIEE593Ujpxt4qVn\nf4aipplUlqB5uzlmWhzvKyCmA0xPpNACGa4+91JGiyWuuaKe+kSW5ppJQmofR96eZma6n5babuJW\niWK5hh3DRSQlSG3CYqo/zuBkng3v+59Mp6cZPDLCuVfex57Nb3DbvRez9Pxz2bHtHfT+HbhKE2bJ\nQT449tzGNdG7ePPYgzz5hz30TbtsuPD91MWjjExMkCmVefrFHZwcGmJ0KsG5816npFyNmUtxZLdJ\nNBrnyvU9fPuBB3n0l0+y/cQJNpx3GbnMFKcGDxGM1DAzNczRd0cYGxti7NSLdMYsMmIxnrIItWxS\nq6ZJxjuJGzG6OvL87uF9jAykGMvZLF66jrqGhfz+m0/z3EubaO3u5tC7Kn/fJjHifpBVqz/C/v2/\noVURtHdX2He0ic74f/HqgVrk/IsYY68zOLadrTu3s7CpkSMvvE3fzDQfvd6l72Qr0tXd36C7dzmX\nLfs6oXgDDU3LWbp4FX0Dx9EiSXoWrGLR4tXsLP+WLDLP7V9AOP0kv/nZz+hMGmSPbeb+j30EJ38K\ny7N535rVKFaKO266iO6meirlIuFwgvFMFlWGgrKQcbOPYHYT6dRmlq29A+TzyMg9NDSWOX9dFMtp\nYkm0kZV2nOmDI9z7wY/z1M9PkHLLHHx5kHePnE3Pgg8zlM5yYuQUa9b/BwXbYNtYCrdGpm1BCCM/\nQKK2EbVzmgAOn/7Uh+h78TWEJ/Hx98n84qkWMpljSEYkiSuptHctpuxAT89ydE1DDURpqGvmrIVL\n+elfL+eStq9w4NhfCBndHCi28tv//BEvPPsYy5v3M+44lEt5kk4es5Ti2ReeYu1dCSTPIpOaoGKW\nKednONbfx8qzLmEi30ohegEh2rnvYzcxU3YIBuLc8vkYTz1RIh4ZZf+RIf74W4/vfeI48woqDSum\nGNjWy57BRsxigaIS55KVq+joWMhYweLdUz2s6NVoq9vFofEUt294gkxmKy3JBrSoxvDr+8B0qShH\neeiJXqSSRYgQUiBSQyzegGGEQQ3R272QfYf2UV/bxJKeBRzY8yY3LH+QO2/9CBvWfBrhmCzsWs3A\nhMlwehOvhQ/i4CDLccqxDuralhMKhvD6YM+u7ZSLWVzbpKl1ASvWXcVj2/8JN3kr773sWhYvPYtr\n7rkTVw4wOHCYr312ilw+w2S5QsGEGWIMU2b3xCeJlwQa00TkFSxetopP3/Yh2ptbONF/gHnt8wiE\nFhOoLKRY/ALWPgOrLcxt10T425tHSJWyJHqPky1JaFIvXUaWy1dvokAKKRqrJRSKUKiYtDZ3IDwH\nVVU57+w17Nj5JmOpNJFoDR/8zkJsy2TpknmMn/gjI0f+Rg3LaNt/NjkkWuYvob2tk4mhg/z5F/+D\n++76Cbbj4NkVTLNMOjPNqbERfvTpoyxsa2PjE1fx7v536GheiuOkyXsmSUPQfpZKneggwkWEajpo\njS1gKj1BzzlliiRQnBHyqTGef+FxcjOjSKVpnNwYC5sTbN6e4erzdhDtnWLHsxM4wWnq4zBlzUeS\nc+xK70c1AhTKk7z87nIyognxxRte9cqVEqqq05isxark6W1v59nn/sxUNkd9UycXrr2At95+mavO\nXUHfwR1s3vwGg7l+bOpxSaMRZ8GKq4iEY6jCYXzoMKXsDJ7noYdjRGsaiSUaiceTBI0AGx+7kPc2\nfYq8LSEpGq8O/zuLleWs7hihf3ghdfWbiZSW058OU8RmRcMkk8YIhwaXUJc4l3AkQqWQJRQwsD2B\nquo8+MfP8Jl1d9C8bBt79rUSjR3h89fH2Ds1n74Dezky0MlZtTq7p3LEQu9BxkWPxJFc10PXAiRj\ncXRFoqOpiZdfe5ZUPkc82Ug8mmDfob38dsvd7N6+mb+9sZVwLE6MgxhShLhoIhJtQRYe0Vgt0UQ9\nDc3dxGobCYTCyAKsUp5yboqAsLjzxgu5rP7TZG2FhuZuauMxrpv/ZbrDvRQnuwh5m1l1UZhcei9l\nDvHB2/vZNzGfRrURhRjze5diC5X23lVEE3UEwgkc12HBOc2YyHz6U91cdI7J8rDBk49l6Nu6g85o\nlOaeD7G1uIIgtWQLhzBLBXLZHPL6pXduDAUMYqEQQU1m1+4tTExNogWixOO1KLLMf/z2ej7+ngfY\ncfgYW479J4N7y7x1cAxFqWHRsnNQgzEi8QZUSRAKRpDwsC1fIeI5Np5rYZslRk4N8Phfn0EYEVrb\n51Mo5nni9W/wvvdezDO//QND+V20Rc/iilUqWw/mOedShVrNZd+BehQximScx4nhU9TX1ZOoayMa\niSNJgsLMKKl+l+GRDPteO46spTgxleWfbo9R7J3HieNZJtPzSEZqWLtwN7nsWZiuRFPHPKSgphMP\nh8GpcPDQTianJ5FUg3A4hiLLLF+4mPs++r8ZGB2ne94iLl3+eXKFPDXReWihMDWNXVTKJSQhEQpF\nKJVyyIqKVn0IgudilgvkMinypRJ6OEFtXQseEg//21eRGuD8FRdxPJuhxaMRAAALRUlEQVTle995\nAsfJ8NaOCWy5hUiukQMH8sQimzg4XcdQ6ihWqAYl1kzJchBahDUr19G5aC17jp2kRrxMVhTRa2Se\n+dO9PL+/h5NPZ2k6p4QyuZ2YNM5L22rpiu5kzcoVFDKTyFecfc9Gq5JnaPg4qfQ0tgtGMIJhBIkE\nw6Rnxjh6/AiRWBLPdYiEoxw4sAc93kg4lqSpsQOzUkAPRAiHIjhW2VeFWxWscoFKqYBZqeAIGT0U\nIxxLEghG+OANt/H444/zjbt+RDjSxB8e/hU//Pb9nEpvxzSKHEut4/BgAbTrGZxKsyIiUVOzgpVn\nraEmnsRxXfRgjKNHdvLlf/kQuRmD0SmNpa1v88qb8MbzL7Ovb4SydBV7dpqcs8Ajbh/m/A87HN0u\n8e7xHMVCGXldz60bp6ZGyWbT2I6LrOkYRhBDN8C1GJs4BZJKMOBL1RUJUvkidY2dBEJxGmobMSv+\nbfRQMOg/RbYqCNemXMySy6ZwPZCNEIFwDaFwjIbaOrZsfY0Tw0N0zeslm5pgzYp1rFu7Hlv7OUeG\nv8jalmcxvQsxkj1UJveQsxIcL+kUB35MPLmOfCGPZJd4fMsbTBwbZfuON7n/2x/j+w8+RVfdSWam\nWjDFfApmgJraZaRzSd4al+jIBTg+2kh973oaW7qQlzZdubFYyGE7NkJW0PUgum4gAfl8Fst1MYwg\nQggURSaXy+AqBrFEA4FAhGgkRrGYQ8gKhm74ShDbBKdCNjOFWSnjSQpaMEYwHCccjpLNpiiZFg11\nTRQLOe758N188ev38OSrWxkZX0V+po/PfCTMwL4U01MmZ618g5mUQoV5TFkaeyfhga9uxKqUODk4\nSE/HPAKRWiJSOy0N89m8cxwwUNGokKBSMWnt7uWcxWt5fHeZRSsvZmbsBLUt8/0E2I4NkoKq6Wia\nL1mxLBPLsVFUvfqsT8K1TYoVEyOUIBCKEQxGCGgaxVIBWVbQFdVXkTgWdqVEOjWJaVlIaoBAOEEo\nFMX1PCzHJR5LIkuC5b0Lefg3D9PSvQJZNehMhEnnK/z1LZVKIc2YOcqdlzSgyjkCpZ0YoUtZ2ruS\nl17+OyPZCppboa62iXJqkM9+72p+9o1/IybLZCwTCBKvbcUqpGmbv4xMJsXysy7AtG0a2hZQSE8i\nOa6LEAqKqqGquv+M0HX9slV0VFX3xQ+ShOW4yFqQQCiKqhnouoFVVXzIsjLnFRCeS6VSxLZtXw+o\nB9B0X1PgeIJQOI5hBImGI7y8+XUaOhcRjiZ589QPmMjb2CZ0BIIUCfOvn/o+D/3XDHu3eaAaNAdf\ngSO/oH9wKzdcfh2Tw/2Mn9jL9PBWrlh0Af96/78wXSggE0GIKNl0hkRjC6PjI1Rsl76D75CoaUSS\nVWqbe5AQMrKioig6kqTMiUWFJP9DUizbxhUyWiCMrgfRNB1VUbAsC0mSkCXJl9W5Lq5jUyoVcD1f\nranpQWRFw0NCUQ0CgRCKLDM8NoIRqaWuroVHf3U3V3V9lbs/fDe70k8wWupHE7V84+HvUJQ7UEMd\nHDmVxCpDYv7NLI6q/PDf7iBmnmJqYi9xZ4w//OC7fOgr94CcQEZH0XQiiRr0cJJKMQ+SjKHA9MQA\nuqb52ka5KmvxnRSiKmmvSlmrpe8LmyRkVUczQqiavy3wPBzXnpPA+YJKB8ssU6kCo6wZqJrhi6cV\nFcMIoioK+UIeV6gka5tZunApn7jnERYtWMqCrla+c/OPkKgj75WpMXoYcyI47VezuN1k11gNU/2P\noMmw3BhjgklqtKPsSU9w432fokFtIlqTJN46H1k3fI22kIklm3CRCEVrKWUnyaUnwXWQJEVFVpQ5\nUYRvZFJQZBVZrspfPQ9PyNUtYVSFDnJVXOUhyTJSVTfoOjalcrEqfVdR9ACy6ktkVM1A03RMy6Ti\nuATDceqS9UxPjaOqOhvOv5BEUObJl1/AUGtpbV3CZLnCgYmn+NCHbmB4poleLUDnAsFkxqQcGqC3\n5T3smqwnFD4fgwb0cBQ9EEJSdWpa5qEoKp5roxohND2IogUwAmFKuUlKhTTyOfNu3TjrAvGtMTKy\npCDJ/iNz13VwqgYnv5wNNFVHlgSOW30Ejv980bVNzEqBfC6FZVkIRfMrxgii6kF0PYQsy5RN01+V\naIJwwCCXnWFBZzfzW+q469MfQ9UTROqayJcrnHfBtVhDOk888hCaFGMwlyE7FiHRcz4z+V6Cks3C\n4E5q5TzTRQdFqyc7M41rlQjF6wlGa3CsCkJWCYTj1cf+/qN617GQZi1us+JnueromHV++fopGUnW\nfExQ1Op+9057e6rAYVsV36HlOD74qQaKasyBqSIr/oSIwDBCBIwAplkhHAzR3tTA/3jg6wgjTDBZ\njx4IUdc8j3OWLefWuxbQd2qKA5NpfvC/f4qXWMaR48+z7pJb8RSFHeMKJwt1lLBxihmiNTXooSi5\n1Dgegki8HnCxbcu3zGkB9EBk1jYjz7nBZq0w0qxazGNOLOEDpepjBcwZl6pmEjzXxnFsTLNSdWip\nKJqBrOooig84CHBcr4oFBrLku7Yaamp45rknqdgegUQdkWgNqAGW9C7mo9/rYU3vh4nUt/PID3/F\nvbd/jYGpo9RYcTY/8R0msyYx2ulYvApCa2lecRmOC1apgKyoVIo5kCSMQATP8U0diqKhaAE0PVit\ngGoSZsEMRNXjQ1X95RsgZFn5B48fHoiqptixzapry5kDzNPBa8iSguv511NVHU1REXgYmsbY+DAT\nU5PIRphwNImsBaiva+bqizZwWccXqWvr5o2tD/H9nzzINVfcTD0aeSVKrG0RVnaa9hVXMjXjkYzF\niEZr6Fi0FjUQwirl8TwXq1L2tUuqXrX2VbVMWgBJVN0fkjjDBHVaOl31BFRVoFWc8M70FeG7xizL\nxLJN3/0lKUhVr45SNSwhTuuKVVVDliTkqozu5PAAnpAJROLoRohAMEJTbT0//dWDKMEonW1dXHPJ\n11m5ZBl/evElhkWSjAX90xbBcJR0yUQKJqhLxLE8D0UN0NS5GEXVscoFX/tkWVVfgzTnWZBkFcWX\nrUtzIsk5nx/ijK4gI8mz/+e/mytcHNvCskwcx/cMSYqErPjBy4paNVYJv8pkBUWWkSSB8BxS6Wkq\nlomsBXzA1AMEg2Ey2RmKFZOamgYyuTSNDU28vXUzi5ecTV1dK/v2bmbxwrOIGip9/UcIh2PEYjXM\npKdoauoCXOJ1rWRT41hmCVUP4Lq+mFtUvYcenl8BvkR2LiTwxOnVr4KiNJskb7b8/cO3q/qeYs9P\nK5Ls64Vn/blnukxkSUauyvIqZpl8IYeHjFZtU7oeQFMUMtl09bXun+s5VIRKXbKBaDRGfX0L8UQD\niWSzv5WCYTxJIRyMUCoVUbUgoWgtwXAcXAfbnDVncVoR652RAMSc8h9v1uY6u/pzSTrTWOnOuUYd\n2/JbJb5JQq6SKB8z5H+w3sqyPFf+xWIe23GRFA1VD6BqBqqm+wl1PYxACAGoisr0zDShSA2O5xEN\nRYhEa5AVDccTRKMJbNsv60Ao5jtUhIRmhAhFapBknwv4om0Lqq0bz0OatcfOumarXb1qijrjmLXS\nzQXva4l9N7kvpZ0tcXlWGicpc+eKOdeo7xY3rUrV00uVchtz2GDZtk+cFA0QfpW5HsFQBEmSqZgV\n9KqT3PYgHIn7xkshqmJtDcd1kBUNPRglFIn7Am/H8h0tZ1iApCqOn1H/4vQXnrW/w+nVr1aAV7W4\nOtXW4gO87Nvo56j1GatftcpLQuC5jo8ZrgtVhqmoms/aqlJ1pQpYQuCr1GUftWVZwbZtVE2b0zUb\ngcgcZXfBl/sK396nVHu+oulzGmjHmXW2evxftuh5M2+sBdcAAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Two folds",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    extern foldinit2 expr \u003d \"0\";",
        "    var foldvalue2 cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern foldfn expr \u003d \"/(rad znext + 1) + foldvalue\";",
        "        extern foldfn2 expr \u003d \"dist(z, znext) + foldvalue2\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"foldvalue.x\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"log(value + 1)\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#a8f, #404, #fa4, #ff8, #f40, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue2.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : log(1 + log(1 + value)) \";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#fff, #fff, #fff, #fff, #fff, #fff],",
        "                [#a8f, #404, #fa4, #ff8, #f40, #008],",
        "                [#caf, #a4a, #fc8, #ffc, #f82, #24a],",
        "                [#000, #000, #000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; foldvalue2 \u003d foldfn2; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 40
        },
        "reals": {
          "max_power": 2.0
        },
        "cplxs": {
          "juliapoint": [
            2.5077136382866323,
            -1.2237731710435231
          ]
        },
        "bools": {
          "light": true,
          "juliaset": false
        },
        "exprs": {
          "foldfn2": "(0.5 + 0.5 cos 6 arc(/(z - znext))) (1 - 2 atan(12 + /dist(z, znext)) / PI) + foldvalue2",
          "foldfn": "(0.5 + 0.5 cos 6 arc znext) (1 - 2 atan(12 + rad znext) / PI) + foldvalue",
          "function": "sqr newton(z^3+p,z)+p",
          "mandelinit": "c"
        },
        "scales": {
          "Scale": [
            2.9543834698745206,
            0.08276125256077045,
            -0.08276125256077045,
            2.9543834698745206,
            -1.640318284820271,
            -0.12416252018960504
          ]
        }
      }
    }
  },
  "lyapunov fire": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Lyapunov",
        "var x int, y int, color int;",
        "",
        "func get_color(c, value) {",
        "    extern breakbound real \u003d 1e9;",
        "    extern maxdepth int \u003d 250;",
        "    var lyaexp real \u003d 0;",
        "    var i \u003d 0;",
        "    var z real \u003d 0.5;",
        "",
        "    func step(r) {",
        "       z \u003d r * z * (1 - z);",
        "       lyaexp \u003d lyaexp + log abs r (1 - 2z);",
        "       abs lyaexp \u003c breakbound // returns a boolean",
        "    }",
        "",
        "    def a \u003d step(c.x);",
        "    def b \u003d step(c.y);",
        "",
        "    extern lyastring expr \u003d \"[a,a,a,a,b,b,b,b]\";",
        "",
        "    extern pluspalette palette \u003d [[#000, #800, #fa0, #fd4, #ff8, #fff]];",
        "    extern minuspalette palette \u003d [[#000, #8af, #acf, #28f]];",
        "",
        "    while {",
        "        select(i, lyastring) and next(i, maxdepth)",
        "    };",
        "",
        "    lyaexp \u003d lyaexp / i;",
        "    ",
        "    // and get values",
        "    extern plusvalue expr \u003d \"sqrt(atan(-lyaexp) (2 / PI))\";",
        "    extern plustransfer expr \u003d \"value\";",
        "",
        "    extern minusvalue expr \u003d \"0\";",
        "    extern minustransfer expr \u003d \"lyaexp\";",
        "",
        "    { value \u003d plusvalue ; pluspalette plustransfer } if lyaexp \u003c 0 else",
        "    { value \u003d minusvalue; minuspalette minustransfer }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "lyastring": "[a,a,a,a,b,b,a,b,a,b,a]"
        },
        "scales": {
          "Scale": [
            -0.33138294220261627,
            0.003672723681428989,
            0.003672723681428989,
            0.33138294220261627,
            3.0775871934836747,
            3.6380582340780836
          ]
        }
      }
    },
    "description": "Created 2017-07-29_00-51"
  },
  "math correct": {
    "icon": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAIABJREFU\neJyNu3eUZdV15/854aYX61UOnXOim04gaBBBAoEBCaUlWVi2hDE/W7KlGWvG4994edzyyD9ZwdJo\nbHlZAlnJKIAkLAawRE6im9Dd0HQDTdN0quqq6gqvXn43//64t0K3pLXmrXXqvvfq3XvP3mefvb/f\nvfcVauc3YwBE8kdIgaE0bhxS6OkjjiLa1Sqh5xFHIUQxMTHEMSRnMne+EJhK0RYCiOlbvIyZ8VFC\nzyfyfeIwgCgijmfPX3ABIebuj5RIrVGGSbGvn+kzI0S+Rxwk58+Nhdc5/5pxDCyY4znfz7+kUAqh\nJEImg3REbpuZU0eJgiCZnxRzv0nGuefNjkgIMtoAYmrlaaIwTCY7K6QQiPTIgvshEuG1VMRRSE9e\n0Tk4RK08DXG0QAB++2v2ugsUeu7nBb9JP2plWamQ8dwPlJSoQgeh1ulXifDJhzg1FgFCJqsax+nN\nwNAGZmcnjlI0Z2bmF0Ek14nTiQjEudLMKkdKkAZjk1X6+wzaXhNDG0Sef57FiV9XQBzPfz/7/vzj\nnBUk85WGbSO1TlZUKoSUxFIS+h6ceQttmuetukIojWHZGLadfE7Pmz2Wz45iWja2Zc8tgmDh6kuQ\n6VHMH0VqFY5pITJ5ZsbHsNGEnrtggf4vV/+3rfw5ViDQuc4u/FaTRqUyZ2aREEjLoWv9Nrx2OxEu\nVnOr70lBJp8nDkOiKCIKktURQiCVpljqplGt4LWa8zeUAhEJYikRs/5DLJAonZBUEt+r4yxegT85\nlVw7WiB8/H+x+r/tdf5v4hgZxzGe6yZWoNTcyBkGE2PDc2YplUqG1hjaYGb4LZQ20u81Mj0vVopK\nrYxjO6lcAiEkQiR7/Xxfg5h/n3yvCDIdmG03Uc2sM/u1lRbnrOSsH5k7nv/+nDF/La1SwWUcJyek\n/zC0Qd/gUnzfIwpD4lmvKwS21nSs3oTbaiKlAj2vXWFoLly7laNvvJmatQSZzjeWQJxcK1rgpdMI\nIoREKYUQIc1mkyjwz3Xas3t5znDOW/HftNdnHfC8yZ3zVjuZDK1aLXVKqaOKI4RSjFem6C6UUGFI\nHMeEcRstHGIpaAKGVChDI2OVCAWYpsXJ02fmrjXn4VEgILBtVL1BNOc8ZycvEUoiDZOsaeDWakm4\nnJVWCEQczznReWUIEOeFBiEQhkHsusnnOSWcJz2gLTNAGQZCSnpKBWp+RLteT24UxyhtEIcRUkqu\nNQ/yUHAxcRRTnhqjp9SLkBJXuGg/iRiTcUhJpKauVCp8DMrANE2iKMRTqU+Jo3Q6Aq0UTqkDkLQa\ndWbNXgiIBckf8WuxY4EliLnPQmuUZRF43rzZz8p9rvyo8uL37s5ZDlIpApF4ceIYqRRxNkdGG4lz\n04o9ZwJKXQMYlkVHVydKKpTWFPIlwiBEaU1PRwm31Z6zACEEUipM06AVNukZXESrWkusjNQ/SImp\nNZVGjThoYhS7CRqNZJv8BucvUkXMXl8ohZHNQhwjtGbxQI6ZmeY8WPqtWECggzjCzmQYKHUwWa3j\nhwFKKaIwJCfA1Aah0vSUihSKJQyt6C3mOT0zxWBPL34QcrZaI18qEfo+vuehDANpaKSQeM0GINCO\nTT6yKJ8ZnVNKLOI5gUKlyGQ7kUGAX54+Z6ICQSxBRDI55zyhDKUx8wU8nUSdscoCwWd/ly7s+S+1\n6z2f292I6wx2dJGxLQxtIKWPkBY5y8YwNEprqo0JnAzccvk6vnm7y8qhtfzdVY/xzksuwLIWM1p2\nWdRVZLrRRilNXzFD00tQpDI0nR1FGs0mkR8smBxzUaHlu3zn1lXc/9IMYeBDHBPHcerwxTyOQMyv\nfBqhYilxp8YJLVi1eg3lyTJxFM35pV97LbAA9YUvfG33He95gd+7OsuSRWvoLxaoNDWre3JU3JCO\nrMOxs6fZuGiAb/8/y3jvrhxCFSjmA8bqnfzrnXfw6Zs9Xp9cz3i1Rda2cWwbNxKE6QSagUsYxAkf\niONZEDYngFKKXLGDBw5WCXxvni/MWu1sNBGcK7wQCKmwtMa3LKSVxcoUmHGbxK06gt+w6gu3gZTI\nKzfD8xO7+O7d+7h6Q4tPXV/li+9pEkqT3kKW1f0lLl+c59q1sGHwFEIENEPBP3zhK/QODbJpx7s4\ncGYj7vgebrtuCU/9dZtnP/Uau9YvoaNYwM7m6O/qTVZTJjhCmeYcdpBKYRgmHd3dCW+YDadz3CPB\nGcqykIZ5LoZI+YgvBNlMjozpUBk+jd10UdL8tdU+Bx+k0Um9/yJn96IVG5muS9asXM7RAw+wInuE\n0/EuvAAGu7JU6nXMuM21Q7+EsT2MROuptByC8nHWb78EYeZZv3YFv3rgTuoz0wyfPsXNu2z2jyzC\nDSPqrXbifKXgyq3rGJ6qEUXhHHKUponntgl8f0HImndwyjSRuQz4s5wlsQgpE7yiHIfBXIuZRozv\n+4RBkDDX8zDUb1KIuuTGP9u95aKd3HHnD+gsOqxv/C+ee/w+sls+RdPVbFgcYjn9XLx5kF+9kaPv\nwg9g2yZP73mdp/Ye5D2/cwkTx/fT0TNAR9ci9r5wiI995ENU7bUIHOLIwjEkUw0PwzAZq7YIfD+J\nAkKiDIOaiLCUQeT7cyY7uz0sw6Q2cYrl6y6g3XYJg2Duf0IqTMOgUZumne8narVTfDHLHuNzodI5\nUSDhI+L1o2/FxcHlfP2ff8yyUpvTky7v++jtlCs+r502iJpnMAuDHHn9MO+4ZBWOZfCzn/07Z8eH\nuf6dl7Eqf4ZLNppMFa4lisE2YPL72yndso/9j9/L1e+8htv/JWDv0RGEEEyXywSeRxgGEEMtChjs\n7KE6PZkoJgVdiQMTKCUJLAszjvGaTULfn3NuQgqUaZHJWNSrDULPS9BjGBKHEXGcIs44SvV6rjkI\nIRCTrTieacDZyZDvf/ebXHDhZbxvVzfPnhmg5cFrhw6ybdtmohiGT59h/4vPUCpmWb9mFetWL2Hb\negdbwp0/fJpsxublA88T+Q16ioJdOzdw0ZU3cP3uZ/H8Ps7OVPF9jyA1UwGMTY/T39VP4LpzSvFC\nDy0UxDGmNrjxbQPc++wwgesmsDxOlCOlpCWhv7svTZr4RGGQCB9FqeALkyVzuyt5SYk4U4vjWgtc\nH7wgObY9aLYhjKE202BwIIvrg5KQdcAyIJ+B1/ftZfWWt7Fnz2H27XuO0He59G07eP/NO5ER/OL/\n3Mf7bn43D9z5x/zr5Gc5drZMf8Hi9eEJAt9HSklnocD45GS6byMaxFx74UZ+9dJhojDCNAzMXI7a\n1CShHxBFIXGUhEfLMPnwzl6+88wpwnOED9MwGM9th3MtYJ56S0Mm5hSTWksSpTANcExYsSxLTxGK\nWchYyf8WlXwyImDDjrcxdjbkyNG3qNSafOITt/Oua3fyxc99Cem1eN/Nv8M3vvgZtn3ga+R0jb5i\njuHpJlIptGHgOBmqrTZSSpTWKMOgN5PjyJlJlGGiDQPDNPFTtqpti0JnZ8I/DAORyfD9F8bThMs8\nqpzLWyxgnr+W0VISqRXq1j/46G4z30kYzdNuAKVAi4hiVqBaoxgqxM7Y2AbUypMUinmmG4I3jo5x\n6NXDIATTZ0d5+onHuXrnYjJ7PkBh/dX0dRXxX7+L5xtXMFFNnJwfRmiluXipzamyhxCgLWuObvd2\nFGh4HqZloQwzoQFSYNsOMYIoitCmgWFZ+O32POCZdY5KYdp2sl2IfyN4UtrAzDnofUc9nv3OP/M/\n/8cnmKqD50MQghdC1paceP0Q28c/iTQi9O88TaUFVfo4XYZGAyamytSabZYODXLRJVexbWOOrvBF\nOHUztIdZPCjZ4/x/rGzF7H/reXJOP24Y0mg3OXQ2RmuFlJJj1WnWd/USRhEr+4s0PA8pJRJJy/cQ\nQuCFHq1aC8O2aUmJcL2EjhtGymJjDK0xcjlalcqCRE40h4cSYCURhoHR0Yn65F98dbcfCr7z/Z9y\n+uQ4r+1/go3rFrFyMAcCirbH3l98haVrVlFa/SFGZ6DRThTl+TB8ZpKTp07ysd+/hfVLI770v3/G\n8FiTrYvP0p5u0ej/EE8f1hw+WUeKDG0vQCvFVcsshmvJjGzTZGmpk0LGoackUdPH+LP3X8iHVrzJ\nFKv4+OUF/us7JjkwMshIaxpLZShmHHzPQ2pFd08PzVYrAU2mSavdJONk8VqtFHXOAyupku0Tm5qw\n3kR95q//524n00dnVz9np2aoNVz6l+zgkacOctcPfsZ7tmV5Ze/P2fihB5kJbF695y/IrrwG109C\naaMJY+PjvHzwZQpda3lu30vceuuH+d7DAc76W/jGP36LhrWe/q4s9VaI60fYpqYR27T9CNs0uHzD\nIqpNn5GR/dz90RYf3/YgI7Uu9h/Ywwdv2o5sHiPbfInN0d3E3b9L3Y1xg4DVi/qpeUnyJI5BGwbt\nrINuebitZsIOZzlEmmrfefF2Gn6E12gSeh7qtk/v3p3NKiynhGXl6ega5OzEFIdePUwUw9bLb+CY\n/zbuu/8h1l6wk+zqa2i2U1AGGFYWpWyCSDFZrnLsxAk+eNkyWoXNfO4r3+aam2+j2lIMTzZpuQFa\nCSK/hlQWAI6hOXDsDbauXMI9HzlF3LWe/PLree3AXn7vY7eTz1msXtLDiVo/E0f3s+GS64njHFlm\nuHzzMkZnAqQ/gYtDZ6kDd3qGaBYJpiFPiMQvKMOg5gYo06BZmSEOQ2QYJaGvUIChxf0UO3tx/Ygw\nVlSbLtpWmNk+ppoaKaHZSnxEGCXh0rJg1eqVrF23mWY7pB0KHnpxhDiCD37gYzy55yCOJVFKYJua\nYtZi54YVWIaimLW49epu3r7pArKM4xdW0NujQVi86+aP4Mfw5S/9MyMjowwuHeJk9hqkVuxYZ/FX\nnR9kRXAP//iuZ3CK/fR3dzNTqaYrrRCzqT6lkVpjOw6F/j5atSr10dG5FJ+67dO7d4dRsqKGCWDS\ndgNarkcYxoxP+rxy+DD1RpMtKwpgdeGnCgjD1BIEZHMWmWwXQQCl/g2IqEWlZVMo9tJoBcQRaCUo\n5R0qdY8wAktLnnzpTTZ2V1jSGzPw+n+jtGojrWMPYfbsoBXAmg07+fuvfJN3vmMXQ0tX0JnzcWzF\n1x900WaGi6/7KEQdvDneJIwFURyxYulipsuVhHFKidQGZqlEvVwm8rw5zEEcIyHNHcbgumDbUCh2\n0t3dT1d3P8dPDVOu1mm4Id+790UMYz7DFJNwlyAEz4NczmLXrrdhZTLMtAuEKSSXUmCZio6sxR9f\n5aO1IGNpChmLnRs3IvNr2Lp5PXuPnWb04P08c9d/Jo59XB9MBwYXr+Wr/+u7yOYIK9TzdOfhb//2\nz1m/oo+SAxf3HODxj58gm7HJZnOcGBlF6cTkzUyGjt4e/EoVPD8BSQtyjVLJ+fxiGCWpN9uxyOUK\nGKaNH8Z4QUQYCUI0vZkGhkrqGrMAahZphqki/CBRqACUFJhakrE0/Z2Kn+yzMbUiY2kytiKY2c/6\nZRZSwavqDxkbF1zzJ/9G4AeY7iTNNmTyJSZmmvihou1sBGDf/mF+9vDLPPr4Ph5/+AGMsz/lsrUD\nBNE8yTIdh8GBfpq1WlL9WkC05uoQpVwCbWeFCALQGgzTRmkLkEQIwhhmak3u/OEeejsS0iMXZJzO\nf83Sbq3ANCRZW9DfSQphJbapyNgmh057fPEbP+DzX7+fw2Mmfdd8nsfG385o02HfqTxnp+DM+BT1\nls/Pf7GP8XYHZ6fhRz+5l89+9jOMHXuW979zI6dmLMYrLo5toU0Tw7Kpahg/O0no+7/OAlPUqB0q\nWKUitVZqASRWIJWRFj4MEIowFgQhXHvlJr7x9Tu5+Zbb0Cr1BQKi8/INKrWAKK2CtZpVDu0/SHbw\nMgwtkTJGEnP5RbvoKUkGu2DQmeDhX03w1puHWbT4SoqdFo89/hLDZ8YoFToxLZNGC0JA6Axf+upd\n3Nj3EuvWXM8L1a9w9smnULIbx3GwDE00OUUQe2kUkMg4yRDFQoCCOIrQR8ZzNNsxmawgTEgWUUQC\nKqROvKg0iFFUm23+7h/vpavg0F2AiTjhDLVmYvIyTgSHROhZhKokTI8cYemay6g2wFACJUWy9cKA\nf/rWt7j3n/6Iex+JeOqZx+jrLPDGcZ/pmRqHXn0NL4jo7OqlPD2Fn+Y51m3cwYffvYW/+bzHv3+r\nQGl5SGfXWmS9TbWlmaxUUVonQhoGcRzSqtXnTLYRhZSKRcSjh+PYCxJHFoSJhQQBlGd8RkZHGBk5\nzdjEOLVahTAMcEzNksE+du24gPde1c2RiSxjU0konQ2PpDlPP0zemwYMdcFbo9Dykt9FC0jX/pf2\n8/KhF7G1JI5DbAWLBgaYqUzjtpv0dJa46u27ePsFDpHTw2g5Za8+jE60CWKb42Mulo7Yd6zMdL1J\ntdlm3WAnzx85SVdHkbMTk7TqdaIoREpFNp9npjyB+r1P7N49O/FZQhSRRIR6vU6t3qDRbNL2XMIw\nJJtxuGjrdjZl9vP8cYN8R8+coCIlUZYBq4eg3gZDg4x8hjJ1xpv2HCaXAqRKft9V6sYyTIgjTJ2E\nmWqthpKKnu4eFg0OUZ6e4tjxURYtX4EfzFP3WGjCCJb3a46NBmRMia0C8tkcE9U2Umlm6o20SJKg\nRV/HhC2PKAjRs8WSKA2FUWoFcSyApHgp0iJmFEO91aaUtzgSXcFDjzzIrR0mpf5VVOqJ949JLlbI\nCHJ2cs2+nM+JmSKGSsOiWFDwFdBRNNi6+ULK5cXUajO0W3WiwMM0NT2dHaxcsYxSQfDqwZexNAhn\nPtnb0wHTNTgxBkv7HKxwgvXjf8iuyz/Joz/9c37Qv49XTo1TFuB7HqV8ntGxMYIgYZHiiSNxXG8m\nGvXTrSAVVCoRo2NnODN2hvGJcSrVGVyvDXGC3x3TxG3XWbl4iKsu3cTSlctpJAUhbBPOvP4kKzdf\nQVoaoFxL7iGAajO5z+xLysRqlExCaeDHRKGPIMJQsHypTd6BnA0FB5r1GpPtPJ3ZiNeGJTP15Hor\n+1w2TP0X8ku3E/f9LgiTu+74CnuaN/P0cZdmu029UiHwvCQtF/jonA2ul+zXWSuIQwjCkCCMCMMo\nrVAJEr8d0/ICPN9HS8Gx0yOcumeYnBnxP/7qk7RcqAwf5B3vuIy8DZONZIXCCEyd3Mf157HHrAJm\nw7BtgZETaGkiJXguPPTQHkbeeomPvnsTF/c+Sb5ZJlz2DwxPyeQcM9lqyrB4cORGbtBPEzguX/3a\nV7GcIu+8aiUNpnj+zTMYlpXklZWCVow0Z55ncclj/MSBud6jIADX9XE9H9cPEkVEcTpSByY1pumQ\nzRUpFLvIdfTz91/8BnkxReBWyb12Kw/+zWKGrGMsi15kWW8ibK2ZYgOdTHr2aOjke8F8UlcAHQW4\n8YZL+NR/+hPMbA9G1OClPQ/hWNCRTc6zTcjY8KUv/zMnJgTtDZ/jxHiIsjv5i8/8ESs7J/jYuv9g\n0+JuLNvGdiSd+UwCmJzVv7+7d2gFsTUwh+tbbahUq5QrZaq1KvVWk7br4qcMy9CaXCZLd2cXS4YW\ns2r5ctavWccH3/d29j3zBB+8cQva0gxEx7ELBjOv3Im16iMEYWL+s00eSiUCWHEZw3TQSW4D00gF\nM8CxIKwOI1SOB3/5JDuv/QTW+j+l3oZaaxZqJ2PN6s08/fQTPPbEXt489hbvvukGsnKGH3/761y4\nXDEmLuH1kQquG9BoJieruP/i3ddfvYOpajIx34dqvcX0TJnyzAzVeo1Gq4nreURRUia3TZOuYokl\nQ4u4YOMm1qzqIZvJ8K933MHOLUtZUf8yxAH/9qUnOXZqD1vf91nqLGe6IQmixAlqDUZqCU888jCb\nLliLVknecaATMoZLqag5fsql7mX54d3/zvbtF9HR1ckzz5/k7h/9mCvevmMOfCkJxaJm29YdrF2z\nnptvupjRU2/xwBNH+LNP/wlDy7dycszne488RldpiMAPktRYzwXv2Z0PKzil5YQRVOseU+Uy0zNl\nKtUK1UadVruNHwbExGilyFgO3Z1dLF+ylFIhS2dRUsjBDddsZ3qqTu/UnTj9mzlVqfKBP/gwZ579\nGeGKj/DgfT/n9LHXuPKipWQzBsUMtKpl3rVrET/64Y9YvXId1ZpP0JqgEZY4dtLj1PAoB14+yJnR\nMQLfo6d/FS/sO8jpkTH2PLuXyzZmsPJ9CfoUkHGgp9siZ0O2s5/X3hjn4IGDOKe+yBPT70WbPZTr\nDQzDIIx81AVX3r5bOoMUCt1Uqi2my2Wmy2XKlRkq9Vpi/r6XkgyBIRWWaVLM59mycT0DPZLj9/0F\nmaXXcPe9j7J2/Vq+96TmjTNZfn/dU7jZdYgLP08rsij2rSPfvY5n95/hzu/+mIFFm3n4ib088MgL\n3PKxW6m1DV574zSnxtrEIsPJU6cZHjnDxNQkrudRrbc4dvwkI2dGcD2fXWs7GG318n/uvZubrrsY\nRBJNHvzxt9h10YUEsaBrYClGxwpORr/DwdNtoiggRlNvtwn8ALXzuk/tRirqjSaVapXpmRnKlUoq\nfIOW6yarn3aBaaWQQuB5LkeOHKJW9XnySBM708VzL75AR7GLV48e55Ofup3//n2XjVf+IfWoQKUJ\n9RYoLRCqQE/PIs6MT3Di9DDTlQrbt++g1oRypU6t3mR0fJyxs+NMTk9Sq9XwfB/P86nUqviBjxCS\nExNtTp46hR8Knt37Cs8+sxevMU1z8hidL/2/HI02smzpIpquYrRiUG1EjEw3mKzV8T2f0PdRG6+8\nfbfreTSaTar1OpValWqjTqPVpOm28YKAMI5TaitRUiEQeL5HtVHn9OgZwkjy5ltvIpWiXm/yl3/+\nUapNeOSJFzCyK/nFfT9h5fqttL0ki6QNgRdoqvUGnh9g2TnyhUEmJqeZnJxiqjzN5NQU0zMz1Oo1\nXN8jjkEpiWVaZDJZspkstm2hlQYknu8jhGLDxi1cd901LLn0I3QOrWR8Jok+q/pcfrfnx7wVXkql\n4TNSKaOQ6Jbn4XoufuDjBwGen3x2fQ8/DIjiKGnykhIpFDJteZNCYBgWxBFCCfLZAssWDbF98ya0\ngnoVLr3ivTz61LPI2CTnJBYQhAnAlMrAMCxyuQ5MK8Nrb7yB73vUajWq9QrNZgPXbRPHEUpKbNui\nmM/TUShQKhbIZR20ksSRTxR4hKGH7zV59PGn+OUv6mxb181NH/p9bBPu+8lP+eCuHHrTLj67zuXW\nf8ozMl3A9Xx0rdmk7bXxAx8vCOYUEURJDU6mwF2mjQxaG2ilMJRES4FpKArZDP09PSxbPMTqlUXG\nytBywc4Uaftw6daNHHllP07ftoRwxRDFCbBCKFw/oFqv02o1qTcbtFpNfN8DIgylyGYzdHV0MNDX\nx6LBQXp7uinmDbROOUjaSeK1m0yeXU55eoyeTCWpZAm47bb38/Wv/m+Ce/fyp3/6CdYu6uat8RmG\np8roSqOBG3h4gZ+gv7SuBnGa8JBopTC1xjKMZJjJ0TYNMrZNV0eR1SuWMzSQpWhHjFYkbR+cTJbl\nK9fx4munGR8/xSdu30ZMkjVyPR8vCPH8gFbbpd5oUG/Wabdb+IGHACzDIJfJUioW6evtY/my5Sxd\n3EHGSQTXCiwTDJ3k6Cwzy8rlqxkZ7uOFvU9x8IUX2bxzBwL4b3/5KayogRZNrpB/x6PGH6CkRFZa\nTartNnXPoxn4eGFIkHZpKKkwtMYyTCzTwrJsHDtD1smSz+Yp5IsUC0Ucx2Fq+iyLe6DuSZrtBF4r\nQzAwsITBoWWsXrONlpdQ2EYjptls0Wq3abouzbZLvdWk0WrT9nyiGAzDJJ8rUOropKurm1JHie6u\njgTyiqRuaah5RdjGXD8mq1YWuPod13DkxBQP/vQe3KnjWBK+9s2fE8c+vUOLiOMkpCu57obdbhgS\nxAnml0KgpcRUGktrHNPEMS0cyyZrO2Qch2wmQy6TJZ/Nkc/lsG0LohDHttjz/Kt09fTj+elshI1p\n2hSKnXiBwPNiGs0mtUadWr1OrVaj1qinlNsjimMsw6QjX6Cns5ve7h46O0pYpsmpU29x7LUDXHnx\nChxLEqf027Hg2UcfYeOGFXMEq9ShGRxcztOP3U9x+Ht4xQvZcumVlJsW/+nbDVxRZKbRRNfDEA1o\nIdBSYEiJqRS21tjamGN+jmXj2BZZ2yHrJIrIZR1yGSfJxtqKxQOKQGyh7c13wmoNtpPF83x8PyQI\n3GTlWy2a7TYtz6XturT9gCBK9nwmk6W7s5uhgUF6e3rIZRyECCHyODU9zv33P8Ibb43whb/+OKNV\ngQSCWOMYcVoATXTf36u45WOfZNlQnooL5Qbsf9Nk1eqdTM40MJVESiEx5LzAjmGSNW0ylk3GdshY\nDhknm656jlw2RzabJZfNks/lKBYLdBRMhvoUZ6YSyhuGC7JDIglfUiqiGDw/wPU82m46PI+27+NH\nIRECwzApZPP09w2wbOlyhgaL9PSY9Pc5rFu3jB3bL+b0lCST7+GvP/99BjoS+Pz+916JY4BjQIeo\nYmogIukZECnpqhzC/cWlaCkYKTc4PjGNzmsDQ0ospTBTZ2drjWka2IaJY1k4lkXGtslm5lffsS1M\n0ySXTfbfW3t+RPeWDxOmggfReb2JaUIljCL8IEwjToDvh/hhSBAlRQrDMMlmcnR3dlMqqaQNOB22\nCcuWFlm/5hoyVpIf8MIY7dcpZrKIOEQaBkqbBCm9Xr6kxMSZk3QPLGV8ssn1t32BwqjB828kPkAW\nbIeC7ZC3HfJOhryTIZvJkrMzZJ0MGcch42TmRjaTJZfNkXEyKCl5+eXXeeqhn3L5TR8mihak1tLK\n0Xy3a9LPO6uEMIwIwoggSqh2FMdAEnEMw6DVbjJYSjpRbBMK2aQ7JWOnJMqAH3znO4SHvkuudj/i\n8Ut4YXceFQyDMNF+HSPlBwMD3Rz61U8QsUdX/3Je+MVPcCxNIWOji06+LFRhAAAGoklEQVQWrSSG\nUknLqaHnQp5pmtizw7awrUQZ2ayJbYIUivVr19JbXMTJs+flFeP55Ohsv1aMmEt8RDGEcTyfiovT\ndLxQ2HZynyeePcYf3LSIcsXj+GhMJutw9uwkv3jgp1yxYwUf+cB1OC+/jx987Sz5vlNctKmP/Z9b\nx7b/fhDDWjzfFx3UODrscujoXlYXjnCguZauXpvjZ6fRhWwOLVPN6wVKMIwFQ2MaJoahMU0TK+1B\n1Aq0Fqzsk7w8nMDc8x/qkuq8Zk2R5BfnrEIkzxFFCIIo6R7JZrKsWFZi+vgR/uGOo9x403UcPHKE\nw6+9jNuqccUlV3DjDWvgPy7HX3UZH/+bPGOH9nHft1/C7suzTRpwdh+idycjJ44ytGwt7//Q77L8\nBNxxUFDomeLNsQQj60I2h0oVoFTStW1oA0MnitBaYSiF1skzAe12k85ihoyV7PGcA8cmM+esfLRg\nlZl9um1W+HQryNnnjEQCsYWQ+FFIpVHnxOmTvO+qlbxQ7uKF115m8/aAV14/wsTUDLfdcgvbN2XJ\nZyNOxAarsyWwStzzyBt85L/cQMfaG9Ns6XqIWwx2aYibPPfY3Wy/cCN3TW5iojLD1qU5Do8o1I7r\nP7M7QXdWYuqWjW2ZOLaVgB8jUYaSkjgKmS5P8vDjD/OBazdw/z3f4Y/eu4XxqqCR9gzM7v+5bZCW\nzpIiakQQBHhBEgk8z0tYXhDghwnp8sOQyUqZA68OMzw2ShALXjp0kKlKmUI2z4GXXuDpX73IhWv6\nufv+VxjoyNLTBRdf93uo7i0Y2cUgreTG009yz/fu4vCR0+SO3YGz6g958LCiXA9462yDZttD3P61\n00mlSEl0ivwMQ2NohU4FV0kNmTDwaTarTE6MMjkxgo7r7Ny4nOlqg2vf9U5Oji8ofESzFabEDyQV\n5IBmq0W9UadaqzJTrTBTS6l3u5myvgglElwiiZDEOKbBQFcna5cvY+2qFWxel8ebOcaKvhz2mX8B\n0yIfVDFWXQuqANLCnTmD1bMFVBf33HMv1658nb966iYePzrJtdsv4fFDJ2m0XbRt20ghkFLM+QGt\nE0eotUIpgZp96CLS2Kais1hg88b12FTpGejn7KTHseEYqcXc3p+1AJEqIc3/IoVEKT03tDLQ6XuR\nUu8oiohEjCklecdmqKeXDatXs3njMga7Epj9g58f5IPXrsN46Tku3rqEo80tuF//DFs/9Q32/Wof\nW7ctAn+cN7/3Rxx0/4qHR7bw6KGjrFmymRffHCdMC6HSNi0s08QyTEzDwDBMLNPENDWmIRIAYSSk\nw7EVuZxDX2+OxYMZLtjYT8sDwzKRWuB65zrA2WeW5rK8aXu7lAqlDAxtJFamdfoAhSSIIYgTf5Gx\nHbpL3SxfupyhwUE2DdSpt+Hnv3yZk2NlnjlYZvDGu2hv/DIP7B1l6x//HZXTz7N0406eeeDfoXmc\nrmu+SM/ii9h/5HUu2XgxYZRss4TdSqRhpBMxNFprDK3RWqLV/N6dLXLOZmxPnBjmlz/4csLv02KK\n5/NbHeEcFph7PiC5l9ZmSq+NpN0NkVgAoJVB1slSyBcpdZTo6zaZaueYqcPY1Azr12/lnddcyp//\n/U/5tweOMNIeonHgXyjW9zEZreTp6rvYV3s3H/jCG5wYb7Jh7WX8bM8TPPPq42xc1MWq/hKFjIPW\nKpFUiDhNdgiUnH+oQ8ok4ypSZWRsWLZ0EWpqaK6kvlDg81tzZyPBrDOUQiXmr42kE9RIlKCkAiEJ\n4wTbG0qTz+TI5/JMTk7wujfJSbNFceBC7EyRp/cfYMXKDYzWItZcsJ0fPfQi36rcyVCum+ob0L/u\nBj79lYe4ePu1PPXcf7B02aVcsekSxqszPHdsmMOHnqOwfBPq6g/t3i2EQIqkSigEGDpxfMaC1LVS\nSdxXErI2LF97QVIPDBPYO4sC419TRkwcpV0ZKSCKomSfB2FIEIRJMsb3afs+zcAnBjpshyX9g6xa\ntpyhgX52bO6hFvbT9kBIi5Yb8PwrLyOV5tJtmzCzK3ny+f1sWb+SYyMB/3bfPVx+0bWUa20yuUEa\nrkfTTSiqFJL+3qXklYFUMnnwAAFxHOG6Lc5OTHD/Az+kuwgdORjoSgiHYyXH/Xseo+HOCzr7ND3z\nsD1VRDx3nG2+mH1gSimNaSSh1rYcLNPG1MlWcKOYEOgodtDbXaBRfnOOYboeOJkChpXlTKVGK4Cz\nZbCcDhYtWstffv0uGm5EjQKH3ngOQ895YISAKAVbbd/HDQL+fwIQSd3gIwhXAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "bailout": 512000.0,
          "ambientlight": 1.0,
          "specularintensity": 0.5,
          "lightintensity": 0.5,
          "shininess": 1.0
        },
        "cplxs": {
          "lightvector": [
            0.0,
            1.0
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value ",
          "addend": "0.5 + 0.5 sin(2 arc znext)"
        },
        "scales": {
          "Scale": [
            4.9773715201665176E-9,
            -4.7493194776638216E-9,
            4.7493194776638216E-9,
            4.9773715201665176E-9,
            -1.6238121304307953,
            -2.9367567196741064E-8
          ]
        }
      }
    }
  },
  "minmax spheric bulbs ": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap. This one is in fact very similar to TwoFold",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) { ",
        "",
        "    var trapmin real \u003d bailout;",
        "    var trapminpoint \u003d 0:0;",
        "    var trapminindex \u003d -1;",
        "    ",
        "    var trapmax real \u003d 0;",
        "    var trapmaxpoint \u003d 0:0;",
        "    var trapmaxindex \u003d -1;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + trapmin)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"arcnorm trapminpoint : value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"trapmax\";",
        "            value \u003d lakevalue;",
        "        ",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm trapmaxpoint : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapval real \u003d trapfn;",
        "",
        "            if trapval \u003c trapmin then {",
        "                trapminindex \u003d i;",
        "                trapminpoint \u003d znext;",
        "                trapmin \u003d trapval;",
        "            };",
        "            ",
        "            if trapval \u003e trapmax then {",
        "                trapmaxindex \u003d i;",
        "                trapmaxpoint \u003d znext;",
        "                trapmax \u003d trapval;",
        "            };",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "bailout": 2.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm trapmaxpoint : value",
          "lakevalue": "1-trapmax",
          "bailoutvalue": "1 - trapmax",
          "trapfn": "circlefn(dist(znext, floor(znext+0.5:0.5)))",
          "bailouttransfer": "arcnorm trapmaxpoint : value"
        },
        "scales": {
          "Scale": [
            0.191413399527265,
            -0.14474106876550985,
            0.14474106876550985,
            0.191413399527265,
            -1.4944749097537904,
            0.1399947846387461
          ]
        }
      }
    }
  },
  "minmax trap 1": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap. This one is in fact very similar to TwoFold",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) { ",
        "",
        "    var trapmin real \u003d bailout;",
        "    var trapminpoint \u003d 0:0;",
        "    var trapminindex \u003d -1;",
        "    ",
        "    var trapmax real \u003d 0;",
        "    var trapmaxpoint \u003d 0:0;",
        "    var trapmaxindex \u003d -1;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + trapmin)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"arcnorm trapminpoint : value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"trapmax\";",
        "            value \u003d lakevalue;",
        "        ",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm trapmaxpoint : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapval real \u003d trapfn;",
        "",
        "            if trapval \u003c trapmin then {",
        "                trapminindex \u003d i;",
        "                trapminpoint \u003d znext;",
        "                trapmin \u003d trapval;",
        "            };",
        "            ",
        "            if trapval \u003e trapmax then {",
        "                trapmaxindex \u003d i;",
        "                trapmaxpoint \u003d znext;",
        "                trapmax \u003d trapval;",
        "            };",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "trapfn": "arcnorm(znext-z)",
          "bailoutvalue": "trapmin trapminindex"
        },
        "scales": {
          "Scale": [
            0.014903969714924022,
            0.022164406158571768,
            -0.022164406158571768,
            0.014903969714924022,
            -0.16624784358593772,
            -1.042493288442685
          ]
        }
      }
    }
  },
  "minmax trap 2": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap. This one is in fact very similar to TwoFold",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) { ",
        "",
        "    var trapmin real \u003d bailout;",
        "    var trapminpoint \u003d 0:0;",
        "    var trapminindex \u003d -1;",
        "    ",
        "    var trapmax real \u003d 0;",
        "    var trapmaxpoint \u003d 0:0;",
        "    var trapmaxindex \u003d -1;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + trapmin)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"arcnorm trapminpoint : value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"trapmax\";",
        "            value \u003d lakevalue;",
        "        ",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm trapmaxpoint : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapval real \u003d trapfn;",
        "",
        "            if trapval \u003c trapmin then {",
        "                trapminindex \u003d i;",
        "                trapminpoint \u003d znext;",
        "                trapmin \u003d trapval;",
        "            };",
        "            ",
        "            if trapval \u003e trapmax then {",
        "                trapmaxindex \u003d i;",
        "                trapmaxpoint \u003d znext;",
        "                trapmax \u003d trapval;",
        "            };",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value/99",
          "function": "mandelbrot(z, p)",
          "trapfn": "line(zlast, z, znext)",
          "mandelinit": "0"
        },
        "scales": {
          "Scale": [
            -2.905422087814835E-5,
            1.9057796074824554E-4,
            -1.9057796074824554E-4,
            -2.905422087814835E-5,
            -1.62400635003345,
            0.002472815033526283
          ]
        }
      }
    }
  },
  "minmax with dist": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap. This one is in fact very similar to TwoFold",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) { ",
        "",
        "    var trapmin real \u003d bailout;",
        "    var trapminpoint \u003d 0:0;",
        "    var trapminindex \u003d -1;",
        "    ",
        "    var trapmax real \u003d 0;",
        "    var trapmaxpoint \u003d 0:0;",
        "    var trapmaxindex \u003d -1;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + trapmin)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"arcnorm trapminpoint : value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"trapmax\";",
        "            value \u003d lakevalue;",
        "        ",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm trapmaxpoint : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapval real \u003d trapfn;",
        "",
        "            if trapval \u003c trapmin then {",
        "                trapminindex \u003d i;",
        "                trapminpoint \u003d znext;",
        "                trapmin \u003d trapval;",
        "            };",
        "            ",
        "            if trapval \u003e trapmax then {",
        "                trapmaxindex \u003d i;",
        "                trapmaxpoint \u003d znext;",
        "                trapmax \u003d trapval;",
        "            };",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value",
          "bailoutvalue": "log(1 + trapmin)/sqr trapminindex",
          "function": "mandelbrot(z, p)",
          "trapfn": "rad(znext - z)",
          "mandelinit": "0",
          "bailouttransfer": "arcnorm trapminpoint : trapmin"
        },
        "scales": {
          "Scale": [
            4.1739085040288506E-4,
            1.1271121242795416E-4,
            -1.1271121242795416E-4,
            4.1739085040288506E-4,
            -1.7825856381410068,
            -0.005333581929501679
          ]
        }
      }
    }
  },
  "mmagnet": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Pendulum with 3 magnets",
        "var x int, y int, color int;",
        "",
        "func get_color(c, value) {",
        "    extern pal palette \u003d [",
        "            [#fff, #fff, #fff, #fff], ",
        "            [#f00, #ff0, #0f0, #00f],",
        "            [#000, #000, #000, #000]];",
        "",
        "    extern stepcount int \u003d 250;",
        "",
        "    extern stepsize real \u003d 0.05;",
        "    extern friction real \u003d 0.07;",
        "    extern gravity real \u003d 0.2;",
        "    extern height real \u003d 0.25;",
        "",
        "    // here, strength is the same for all.",
        "    extern strength real \u003d 1;",
        "",
        "    extern magnets expr \u003d \"[2:0, 0:1, -2:0, 0:-1]\"",
        "",
        "    var len real \u003d 0;",
        "    var pos \u003d c;",
        "    var vel \u003d 0:0;",
        "    var acc_prev \u003d 0:0;",
        "    var acc \u003d 0:0;",
        "",
        "    func do_magnet(strength, m) {",
        "        var d cplx \u003d m - pos;",
        "        var dist \u003d sqrt(rad2 d + sqr height);",
        "        var factor \u003d strength / (dist * dist * dist);",
        "        d * factor",
        "    }",
        "",
        "    var i \u003d 0;",
        "",
        "    while {",
        "        var acc_next \u003d -gravity * pos - vel * friction;",
        "",
        "        for magnet in magnets do {",
        "            acc_next \u003d acc_next + do_magnet(strength, magnet);",
        "        }",
        "",
        "        vel \u003d vel + stepsize * (2 * acc_next + 5 * acc - acc_prev) / 6;",
        "        var dir \u003d vel * stepsize + sqr stepsize * (4 * acc_next - acc) / 6;",
        "        len \u003d len + rad dir;",
        "        pos \u003d pos + dir;",
        "",
        "        acc_prev \u003d acc;",
        "        acc \u003d acc_next;",
        "",
        "        next(i, stepcount)",
        "    }",
        "",
        "    value \u003d len;",
        "    pal (arcnorm pos : (0.42442 * atan log(1 + log(1 + len))))",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "stepcount": 100
        },
        "cplxs": {
          "lightvector": [
            -0.667,
            0.667
          ]
        },
        "exprs": {
          "valuetransfer": "log(value+45)"
        },
        "palettes": {
          "pal": {
            "width": 4,
            "height": 1,
            "colors": [
              -16777088,
              -256,
              -16744448,
              -65536
            ]
          }
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "new icon": {
    "icon": "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\nTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Two folds",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    extern foldinit2 expr \u003d \"0\";",
        "    var foldvalue2 cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "        extern foldfn2 expr \u003d \"/cosh(/dist(znext, z)) + foldvalue2\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#a8f, #404, #fa4, #ff8, #f40, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + foldvalue2.x)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#fff, #fff, #fff, #fff, #fff, #fff],",
        "                [#a8f, #404, #fa4, #ff8, #f40, #008],",
        "                [#caf, #a4a, #fc8, #ffc, #f82, #24a],",
        "                [#000, #000, #000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; foldvalue2 \u003d foldfn2; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "bools": {
          "light": true
        },
        "exprs": {
          "foldfn2": "(0.5 + 0.5 cos 6 arc (z - znext)) / (12 + rad znext + /dist(znext, z)) + foldvalue2",
          "laketransfer": "log(1 + foldvalue2.x) : value",
          "valuetransfer": "value",
          "lakevalue": "log(1 + foldvalue.x + foldvalue2.x)",
          "foldfn": "/cosh(rad znext + /dist(znext, z)) + foldvalue",
          "function": "newton(sinh z + p, z)",
          "bailoutvalue": "log(E^2 + foldvalue.x + foldvalue2.x)",
          "bailouttransfer": "log(1 + foldvalue2.x) : value"
        },
        "scales": {
          "Scale": [
            0.0,
            -1.554232614613272,
            1.554232614613272,
            0.0,
            -0.3789209238259062,
            -2.131806680069798
          ]
        }
      }
    }
  },
  "new icon (1)": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "ambientlight": 0.75,
          "lightintensity": 1.0
        },
        "cplxs": {
          "lightvector": [
            0.0,
            0.8
          ],
          "juliapoint": [
            0.40566542126897226,
            -0.02148212391923303
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true,
          "supersampling": true
        },
        "exprs": {
          "valuetransfer": "-/value",
          "function": "z log z + p",
          "mandelinit": "E^-1"
        },
        "palettes": {
          "lakepalette": {
            "width": 5,
            "height": 4,
            "colors": [
              -16777216,
              -16777216,
              -16777216,
              -16777216,
              -16777216,
              -16742400,
              -120,
              -30720,
              -56832,
              -16777080,
              -13391309,
              -86,
              -21965,
              -39373,
              -13421654,
              -1,
              -1,
              -1,
              -1,
              -1
            ]
          },
          "bailoutpalette": {
            "width": 5,
            "height": 1,
            "colors": [
              -16742400,
              -120,
              -30720,
              -56832,
              -16777080
            ]
          }
        },
        "scales": {
          "Scale": [
            -0.010100725443729568,
            -0.054812655409945746,
            0.054812655409945746,
            -0.010100725443729568,
            0.5145077599421077,
            -0.15200392847493654
          ]
        }
      }
    },
    "description": "2017-07-28_15-31"
  },
  "new icon (2)": {
    "icon": "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\nAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 600
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ]
        },
        "bools": {
          "light": false
        },
        "exprs": {
          "valuetransfer": "log value/999999",
          "lakevalue": "0",
          "foldfn": "(cos 6 arc znext + I) / (50 + rad znext) + foldvalue",
          "bailoutvalue": "foldvalue.y",
          "bailouttransfer": "foldvalue.x"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            -0.05952227491346712,
            -1.9993864245533703,
            1.9993864245533703,
            -0.05952227491346712,
            -0.300571130127294,
            0.006216808704382307
          ]
        }
      }
    },
    "description": "2017-07-28_17-37"
  },
  "new icon 2": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "// used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "var i int \u003d 0,",
        "p cplx \u003d juliapoint if juliaset else c,",
        "zlast cplx \u003d 0,",
        "z cplx,",
        "znext cplx \u003d 0;",
        "",
        "extern mandelinit expr \u003d \"0\";",
        "",
        "z \u003d c if juliaset else mandelinit;",
        "",
        "extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "var color quat;",
        "",
        "while {",
        "znext \u003d function;",
        "not breakcondition(i, znext, z, zlast, c, p, color)",
        "} do {",
        "// advance to next values",
        "zlast \u003d z;",
        "z \u003d znext;",
        "}",
        "",
        "// return color",
        "color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "// if the fractal accumulates some values",
        "// like in traps or addends, here is a got place to do it.",
        "",
        "func breakcondition(i, znext, z, zlast, c, p, color) {",
        "func bailoutcolor() {",
        "extern bailout real \u003d 128;",
        "extern max_power real \u003d 2;",
        "var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "value \u003d bailoutvalue ;",
        "",
        "extern bailouttransfer expr \u003d \"value\";",
        "",
        "extern bailoutpalette palette \u003d [",
        "[#006, #26c, #fff, #fa0, #303]];",
        "",
        "color \u003d bailoutpalette bailouttransfer",
        "}",
        "",
        "func lakecolor() {",
        "extern epsilon real \u003d 1e-9;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "value \u003d lakevalue;",
        "",
        "extern laketransfer expr \u003d",
        "\"arcnorm znext : value\";",
        "",
        "extern lakepalette palette \u003d [",
        "[#000, #000, #000, #000],",
        "[#f00, #ff0, #0f8, #00f],",
        "[#f88, #ff8, #afc, #88f]];",
        "",
        "color \u003d lakepalette laketransfer",
        "}",
        "",
        "{ lakecolor() ; true } if not next(i, maxdepth) else",
        "radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "}",
        "",
        "escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "// this one is just here for testing light effects",
        "// circle + donut + green bg",
        "var rc \u003d rad c;",
        "",
        "{ value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "{ value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "{ value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings. * ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "var c cplx \u003d map(x, y);",
        "var value real;",
        "get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "var c00 cplx \u003d map(x, y),",
        "c10 cplx \u003d map(x + 1, y + 0.5),",
        "c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "var h00 real, h10 real, h01 real; // heights",
        "",
        "// color is already kinda super-sampled",
        "var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "// get height out of value",
        "func height(value) {",
        "    extern valuetransfer expr \u003d \"value\";",
        "    valuetransfer",
        "}",
        "",
        "h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "// get the normal vector (cross product)",
        "var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "// normalize np and nz",
        "var nlen \u003d sqrt(rad2 np + sqr nz);",
        "np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "// get light direction",
        "extern lightAngleToNormal real \u003d 0; // angle to normal",
        "extern lightDirectionAngle real \u003d 0; // 0 is to positive x.",
        "",
        "def lz \u003d cos lightAngleToNormal;",
        "",
        "def lx \u003d cos lightDirectionAngle * sqrt(1 - sqr lz);",
        "def ly \u003d sin lightDirectionAngle * sqrt(1 - sqr lz);",
        "",
        "// Lambert\u0027s law.",
        "var cosA real \u003d dot(lx : ly, np) + lz nz;",
        "//if cosA \u003c 0 then cosA \u003d 0;",
        "",
        "// diffuse reflexion with ambient factor",
        "extern ambientIntensity real \u003d 0.25;",
        "extern diffuseIntensity real \u003d 1;",
        "",
        "color.a \u003d color.a * (ambientIntensity + diffuseIntensity cosA);",
        "",
        "if color.a \u003c 0 then color.a \u003d 0;",
        "",
        "// Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "extern specularIntensity real \u003d 1;",
        "",
        "extern shininess real \u003d 8;",
        "",
        "// r \u003d 2 n l - l; v \u003d 0:0:1",
        "var specularReflection \u003d 2 cosA nz - lz;",
        "",
        "// 100 because L in the Lab-Model is between 0 and 100",
        "if specularReflection \u003e 0 then",
        "color.a \u003d color.a + 100 * specularIntensity * specularReflection ^ shininess;",
        "",
        "color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "// two or three dimensions?",
        "def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "func drawaapixel(x, y) {",
        "0.25 (",
        "drawpixel(x - 0.375, y - 0.125) + ",
        "drawpixel(x + 0.125, y - 0.375) + ",
        "drawpixel(x + 0.375, y + 0.125) +",
        "drawpixel(x - 0.125, y + 0.375) ",
        ");",
        "}",
        "",
        "// which function to apply?",
        "def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "ambientIntensity": 0.75,
          "lightDirectionAngle": 0.0,
          "diffuseIntensity": 0.25,
          "lightAngleToNormal": 1.5,
          "specularIntensity": 2.0,
          "shininess": 64.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm c",
          "valuetransfer": "log(1+value)/40000",
          "lakevalue": "znext.x"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            6.17259319541581E-8,
            1.481047465518587E-7,
            -1.481047465518587E-7,
            6.17259319541581E-8,
            -0.7434984620857783,
            0.13193109274660714
          ]
        }
      }
    }
  },
  "new icon 4": {
    "icon": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAIABJREFU\neJx1m3mYXGWV/z/ve++turVX9d7pJUl3Fjp7SELCIgIRAgTBR9xRBP25zCi4jMqMzmgcR1HBdRRH\ncMBhGVlFdoKsCYEEsndC0kk6nd73rqquveouvz/ure5KYPrJeW6nqrrqnu/5nuU955T41XexNQU8\nCqhyVrxaAE0KFGwUTBTbQrENpG0hbZCWI8K9KhYoNqicLooF0nae0wBdAb8HhDcK3jAoOtgC8kXI\npCCbBNsDagA8AdB8IFQoWZArwHQKEhOQNaAAlAATsNyrCRhgFsEogJEDIwtmCszC7EvLomp+BU0q\nKIqKIiSKFCgIpOZFYM+KbSEwkbaJtEoodmlG+TIAqg2qAA/gEY7CiguWYjuP+TwK+OsgWAWBKOh+\nsCVk8zCddhQcH4RYHfiDoAccAAqG87wpIFeEzBRIF2UJ2K5GBiBAMZ23tSRIAZbNe/6omi/mKC0k\nihBIV4QU7kvKANgILGSZCS4I0irOAuAq7pPgU1X8qp9sOoVPsR12KD7w10CkFmoaoLYeQmHnTtM5\nmEw4Eq6GeALmzYdACIQCyTSok5A3IZUDLQWZEvgloICtOACULIcWho0ERBkY83TFy3io0utDCuko\nLUDiAICwEVDBABtJGQQNxfKg2CUUy4O0iqi24VBcavi1AGFvEOEP4mlxraj7QPcx+NRLNC1fB23t\n0NAGosa5HTsJE2MwOAIj4+APQ98AXH8dZAowNAZFGxIZ8PpA84OSxBizUOfVOCCaFkgDrDwUsgjA\ncl3ENt+tPICK6nGsLQQCgRACnH/gAsAZIChYqLaFYmkotoFieVFtC6+Q+FUPYT2ACEehqgZq66C6\nGmJVoERoOudKwAeEgSVAFZABMQi1PY4lCxYUAcUDjz0N13/eAUH3geoBRQPhcaguIH9iCn31AiiW\ngAIULSAHlo1dcvFlViqBUG1FxZYChOssQriWFzPWl4DEPk0U20bDQrFMVNtEw0YXkqDuQ4QiUN8A\n8+ZB7SJgHjAHCLof7TpqcRo88wEdmHScuWQ5YtoOGNgwNQZT0zCdhWwR8gaUTCcAGmDnDIhFIZWF\ngu24hAlmCcwM5LKgnKG8Y1xQbSmwpYItJUgJQriCCwSu/5et76CuYqMJG8122OCxbfyqhhoIQl0d\ntLdD1WpgLbDQuSlwLMOkc/V4gL2Oz9INvSfhWA9MZxxlSqbjv/c/BqEoDIzCyBiMxyExDRkw886f\nW129yKYGxw2KBhRsSlkoZR33j9RDcvR05W1ANaVASoEtJbaiOMpLiZhhgn3aVQKqFOiKJOz1EAsG\nEVUxaG2BUAewitJ0FM3/HLASWMysQ5Vc5aeAvEN94pAZhJfedHx/eAJqax0WGDYUSpDOYx/uQySn\nIR6HZM5hetZJd5YB2beGCV4chmQWkmlKCSiMzZCEwdFZ/pWVB1BNQAqBIgVlNpSZUAZh1gVAkQJN\nCnSPRjgQQNRUQ9s88KwCNgCNaGGALwNgTe9HhuuBcWAYGAUagDRk+qF3EAbGsB98GFGwIGuTk0F8\n65bNMiGVRWRzFN5JUMpBMQmeMNhFsA2wy+mvdwgSKYqTkB2DvO2EkjII4gzlAVTDVdAUAktIxxUU\nBeGyQFLODi79pURTFXy6FzUahZZm8CwHzgPqOfNHhmvA7oZj/+tQdzwOl34Qenvg8HGYSMJUElE/\nl/HnTmLkoJRP0+o9Cqm0WwBZkIPh7tkCpjozq0g502U7UxRSs0qXFS/XR3YFCLh/oxquYiZOjWG5\n7oCsAEHg+r5AVSQeTcUfDEJVDALNwAKg7gzVLeAIcAByPY7v/u1xjJRF7sGthOY2QDIFwQaYjEM8\nSbZrNlInXk1g5yHcBKUMGGlIVCgc4d1VXTY1q6z1HjIMNFYA5gBg22656wIgXFdQHCZI6RZICBQJ\nmqLg1b1owSDEYu6tCPfty7cXBfqArdB5yHHAvmHSw4JiAoQB+akRSinw1w8iR/KYGUgoEDMdq43G\nXWVOzFa7kzjVpQSSFTCXQSvwf6e7SqYYFaKWKANgo5bREwIUiVAUNK+XiM9HfVWUqrlzQa4FLsKp\n+wCywNNAJzABZtqxaKQWtj4HY1NOauo9STBoMrAXqqNQTEDiBCTsPB4JPhWSpiSORQCNHkrU4IRJ\n3b3xPiQNWEhgDIeVWoWCSfcx6ZqknHfKlAcn9JaVNwG1ZFsoLgtm3EAIbCERqoqiqXh1nWg4DLIR\naKtQHpy01gD0Unj0PryZFIz3kksU0QywU+55IAmkQfbD+HFHqW5ARydr5QkV4XY+y1GCXMEI/fhZ\nwwl89NMOSCQF6hhkAg/TjJEjSI4q1BlCTyLx4lSk3gogKiUDp52d1JLl5HHDtjEqQZACoUgUTcPr\n05HRCFALhM4g1yngAAx34a2uYmTfQQJ5A6Xg5OjiqEMSYxzCGtQ1whXZz3EkJPnCRQ/xagIajl+E\nesCDGX6ImvYSH1pl8MsXJM9UB9h/8Et8kX08tKKNqYNhPk4/FhN0MEQbJUbJO6dVDCYw8ZNDp+A6\npjUDQvmaqmCM5QBgotoWKjaGbWO6IDixQKKoKh5dB8XvEq5MNN19u0Nwcj8MDMDwEA1VXqb2GegC\n1GkYfQlKRegxIYtgHl5qGu4lnDfITS6mI5Kif/B5Vl6s8sC6em7aOcZ9W88l37ab1eN59GUv8pvD\nl3DvWXew86zl3PHOQsg3cvmJJgbppp08Xkr0IYiSpIiCH4kHFYnhionEQkFx0+FsVFDWbA5tkVJB\nkQqKoqCoKqqi4tFUdI+HoN9HVTiE7o+4xEoDAzh5vReGX4POgzA+CiOnIJnFJ8HcA1OvwcHSUm5f\nWeIvxiIaP9zGDe9cQs05+9E7P00xMsjbnaf451+v48ruAe4ZS3H9xsvZO7WT8VN5Pn5zDbeuHuL3\nwzuYjgcJaCco5dJ876KjbOs4SfeBC/CiUcDHAB50PNiAjg8TFRMVw72aqBTxYqBguJwxUVCLZgnN\n0jBsy3EBlwXVddWsX3AtmXS96/Im8fh2YjEf5BKQjENPDwz0YowPY05NUEyAOgW+LOCXfHqZypQ4\njLcVlMEkakcNx7+9m6a3TKr+Pk70szGMMHzulrepswUX1sAP/y3EpVdAby38y12jeM5tJ97UjfZS\nE38aauCCDfN5ee+z5Ac/QVewSD49l56ozZxEgfMZp4UqCgwTpUAAA42iC4OBhUSdUd1yWLFsk3eL\nIlUURSXg81Edi9E+fx7nnLUan7oQv78VXfcBGXw+L1CkNN6HcvgQDPZixUewk5PkToF/AoYehOOd\nMN5n052oI1XaQLbralINO3lxb5biB1dx6rkR1v0yT+P0cvrX9RM+upKLltfxbCrBd4fy3HbiJua0\nbaN07Vzuv3Y1X48fZ9ECjWRiDLv/ED/5p0V8Y+4Oftk3yVlrt7Gko5X98QLH0u0oZNAw8KO5aiuY\nSFLorsqni9JxqbJFVTW8mgfdqxMMBKipqmJutBFJvevrBhAHBiE/ghKPQyZDfqSfVO8YWgICY3DL\nIx/i9sZTDJyv8Culhos+H6e35yQHv5ph+dgE895v0z4wzcUNKtWFSe4+6yiDES93HahjqKOGWz9T\nxU/jXZT057l2/2LaX7qEg2/dR/1jAab3fYZCYjuZdht1vpc/vznNTZ9cRvCIxfCB7SQbD1O8UqV3\n3wLaCWJglpt52Gik3TDodDTKRzuBsmCjvUVVNDTVg+71Eg4EqKmuoiFcjUrATXk2To4/BVOTMDUF\nE2OomRR6fprkH+CanjBjnzjKod6LGZns4tpLFyHHFtESzTP/jgF8vV8ieXQ3n3q9ja98eQX1xTw3\nhfI88uiNWNTypHiYX63Kcucl67nnhVVY8eWMtAiusHZTs1bj4eAOVseCjL7zSTr8hxmtLVE9mSLx\nyPkMFy+ise0Y90en+FN/FX25EDFULJfow2hIV23noC9nmn3KvEusLapU0TQvPq9OOBigKhIhFgni\nm2ltVgPHId4P8SkHhPERSqOnUBI2t4w1ogxdxMc21fL3ozsoBku8dWgE7yXT3BdNcO6OAn9etJvg\nMo2W7tW83fcKx3oNxJU+Lsy8Rvd5h4j1G6wcVhnZP8S/rN/Pk+P7+NyVPYT0Rvo8Jtt2Xk1gZB4L\nzWbuXv8S2Qc388LuTajnv0Vo7Gne35Dn6zs2Uah5ivzkOZTwoaDQgwfdDYMKNh7Uyk4nSvP72aJK\nG0314vP6CAUCxIJBwgGdkCoQZB3qG4OO4mOj0NeNMXAc84TFyJNw+ak0L9/Sy9hPjtN3nocLF0hu\nvHktw1/rY0nNHLSN1eS7plikb2an9w0C9dAUXobcYzPsjbOwxqSqDtYsLFIsFBhW4bMbgXiGn+6y\nWFtb4kOfHqRztI9dDdu4uwXWHczzt+Ja5vQ/RKYVbv3BOv6p5RXu3CfJFleQbhzkZLIWP6obDEv4\nUZk92Ds1otLwPrao0kRTdfy6jxdf3s+cujD33/s4l120Dk3kITcJ42MOAKNDpPd1Uthp8Z03F/K7\nDVke67YIxw1WRucytTvHhXuW8IvAedy1rwvzyDoS2k6SKzXCximsaIpouETWHCTWHscbhVAd1LdK\nGtvayCopQlUWhjeCFcizcWEBKYvUJzLUFIskdn2Lc6p2cPY1U/g+c4r+U3m0D5hse3aKsBLkoRqD\nSw+8w4fXjvP6SDNTRogQFj5kRf06eyZU5l/h27KwbQmrVqxg+dIONl1yLvNbmrn8kvPxaRoew0Tk\n86SOdeEdG8LqO47sy/LvjwaZ/6FWXn2ul+rrwJ6w+e3yBB/fW6JFG+HhE2Gy+UYeX/oaGzyQzp/H\nSOoE0z4I1kFdK8xdEMHSCvhCgvo5CxCKih7w4w2EaW5upbGxlaHJFPWNkuaWGEFPCq17J7d/dyWP\n3zPME/d8jI1jG6Cwj0e3nMNzQ0Mof76UqvBhvrZumruy1TDpY8T2UY2Fhnu8rwBCab9c3RIJRYmF\nwkQCAYK6F5+q4kHgExKvbSPyebyqxE6nELuOsOmvUfZHc/g6MxwJ5jjaCyduXMzFe3L891Ofpa5l\ngEjNQUw5RMnIcShoMqL1Ut0OpgQtBNX1YGDjD4XwB2JIVcWSOuFwEL8/gObxUDJNqqqjWLZCQ30z\nzU21LFk+wqqdQzQ0xvA2qFTXvcn9dhz58wtojizjkbslt93XzuH+aTrqxzgRnwPFEEEsfCinnQtA\noDRttLaE/VHC/gBhv4+I349P09Bsm6Ci4jVtRC4HqSRiZAhRHCVybQdvtwZ4LVQgPpHjS//YyGEz\nwM//a4jp/i7+WlNi+qjOen87u5VR1BrwRiBUBdLvdMmdVr5NKFyLx6uTK+SYP7cVj+ZBVRXa5s9D\nUzUUqRCLRAkHAzzz98PE6nTmt8ZYLcf544kp3iLHpoVFNhw8n1d7FzC49Tdc13qEfl+BqtUhDp3M\nQqaFNDpBhBsCnUhQwINaNC3yxQK5fJ5iySASCaMWTeyS4YQMKcAowUAfxWP7Md62WP/sXs5uA9v0\novdHWPj1EE1fXkyeQS576gMsTD/Bzl6Dp+VBSq2QtqE+AtMmeL3O5MtUIFzdgub1oakaLc2tBEIh\nQl4vtdEoddEoKV0nMTbOkpUrKQ0OcM3V65gaHqAmEiJeSOBPNpJYMsLirg7uXn8fl4znyEzaXHhz\njM+mk3zqkICqKIwr5G2VIbyoWFj4yZAgQgE1b0Ch5ACQzWSIT0yxoL6BkF8i8yXIZqDvFHbXXn73\nsiTxmsb21SbJEYNNGxuYPtKLlwSHH1jKnXyM9fVP80KfQUK3mYhAWx1kbUiWnKmRooHQQXo8mAKE\npuIPBNADPqqqq6iLRphbV48uq6mvKcJiHQiAbSCKBebPaURGw9Q3NfO37F958y2V+3xHmNzxRdpN\nhXu2PMKhkWUYb77Kyb5RsBrAn4eMygjVDDNOB3ka0fBioYQvZEvIqxHWA8T8AaoDAWJenWrNg9e2\nYXIS+8Db3Hmnwn8vS9DVb3NAN/BOwvP5abQOwZsplQ2N77DxP8Pc9WYnSR2GYxCqhZLiWBwVpArB\nEKga6N4AXk0n6A8SjURobW6iY+EC5oaWo4pzgVZgEc48wQOeAp6aNci6i0jkTpB7p5N4apTFcwxe\nnmjheLyFnaE5zD30PMXFA9x7zCKmw4VDYxxafBxSdVByqsEQFn5sp7vUuw+KtkUik2Y0PsnoVJze\n7h48lu0MKof6ye09xnamCR4B1SfIC+i+DC73RbjmzRYuUFp5syNI4frtqFMwEgbbCzkvTAApAYYK\nlgYF05192BaWEHh9OtU11bxvwQbq5ZeBTwCrgOU4LfWzgHaQyxBaK8g00fp2Ys0t1NYvRNM93BIc\nZF7NNp76r12YxU0kT4SZEApLm1ezRi/iX5ZxDrLugLCIcA/KGrL9AuE8LASKVDEtEz0aZiqXxRYC\n3tnPHYMr6I6lOLc1ynzTx4+/2MGmQIwfnUzwD/oAT948h4XbFnJ/TDBVizP5UpyJt2FBQYW8dLq1\nOcMBwQRQVernNPKRVX/AI77gVpwngSfAvgN4hdnxr8c9gh9wfl+zhepPvUSs7WwMQxJfOsjT/7CT\ntoY3eH7Hd/iXa9t5cNscupZ5+EC6GX11LYgCoJDBQwEvBRRUW0hsbCzbwrZtZxYgBJqQCNOEZWv4\nQnIbG/4JniXJKz9aiu/bJ1g/fRnf+fgL3PBQPaH736FYyDLaUGKyfHyAmT50QUDCHaOrJnhMp+O0\nfMUKPrn6LgSTwAlyxa1MDw5z6tAhGqqrmU4+QkP9H6ledhnS48UZqHgdRrAM29qF9HionWtwIClo\nCLXTHN/H1cb3yD9j8pdzTnJnwc8bh/rIJ47gtPNsEkhSKOio7q0KgWlZ2NjOgSgUxK9qkM2QeP1Z\nxJMlToRb+PXSfr5290mS03n8/iep6gnySOgsSsZWTtbBZBBsH06vqZxspXOYLAiYlKCqoJtgCsm5\nK85BlypD1kOYx3p47deP0d1f5I/DJb7XZBKbZ7NLgU9/ew6Zo51Uz50L0QiEEuCdg5AKtLfT3NfN\nbbvScGIpmnkOcv0fufi6OlZbBW7/xSWUSo87Y2KhOFNkBNNYBFBQYpeKLUHVh1/VqAlGaGto4Ky6\negIlg+Lfn+anjwV523MWyS+muXgqyQ8psaApjK+tkY5FYQ5uOsk1z1XzYtM0JZf6eFzlve7/3dLL\nFM7n14ThG1+5CawSgxPPUbW/k+s/F6EkOomXJFfXwVNdJqnJEMOdBicPvUlTjcCenkabmkQZH4Om\ni0CuhqprKL5yCz2v5njuqoNYhR5u9ujcvS3Nkq4MW/NHOW5oYC4FMwSmBgjyOKMyVSAIByPUhqNU\nRcIoloWaycHQIPc9XqRbneL1AyfJdMJ0NfwooHLSXEDP2i7u/OSVbPrGbu4J9CALrsLCjTUqs3Oo\n8hTCgFTJiQNv7drDsjlzuNgQ/OHWt3mz8VmSL67h3EKKfhoJsYgdax9mIPVhbjr5KLte72bl0h5y\nkSaa65uQvIAzdX4Jkbe4YxqCBqwJprlNvRyZfpbNXpioAZLzHesXLHd6DBaSHBKZL5kYhTy6qlIT\nCtFcU0vQ44HBfkbrdc55IUkoB1MLwNgIu1MW1+7ey9d/nqP5359gZGCYZBByHmZXVWz3d7MCgHIv\nWoVFCxcwPD6GJiSf/u4zJBdNcP62Oi4t7GEDU1xBK8u1BZgH/43AvKfZuwdEFpJjFlOj/fSc2O1u\nPgSBRag+PxuRfO4ljdfmezly8DyaNhuI2i3UaJ8j3HQMOAzeEfBO44RjGERBmhaoUiHi89MQjVET\nCKBksxSf385dTx7hsT8s4gOFj/L9lfX87H3rmJojOeEPMJd6wjUm3ek8Oc+Ma733AM6qAKEEvUPd\nhAMBLo1Wc9HTBboXNLA4N8YCoJ0UP/zIozx4xfc5rpVYlWkFC44ehcK0s0NVSBtYL211M8ZulFyW\nqYXN3J7/BB9Oprlx+p/J2grxzmlejd1P+gggomAFwSxnFSdAqUMF0McG3UUHGzuXRx0b43/vjnDW\nR3Rqv5vhwJpHaD4EK/5zlGMd8Gv9Qg6sSjG8dZi0FzJl6pff2zrd92cyguXEh/60zbHebrb325y6\nLkuX0cTimT8rcOgITJeW0HGVwhxlmHQn+GzITYNXgOoHuXA+DN8JW/8KAxaxuglIRHjt1E/5+lW3\n8MOYyWU3vM1Pj9ZiB0Yg6wNDglU5O3IaY5RsKJkGtmXj9XqJbjiPr2+/krboKMvyOS7c3IwXZxz1\n+jffx5cvf4NHJt9mRVgyGcVpG2oVllc5fUZV/nFnbx4v+PQAR36wjycm/dQ8dBwdZ8a0B7j/lOQb\ni/upHvsJuQdThIG6IFBwVt7mNjZDJAqNP8DuGaDu8Ce5a0eWVc33Iud/j6G6CPET8P6XJ7l3YhC7\nUAOmx4kDVDJAIMFdyTFKCCFoqq1BK5ZIPfMYx/cGeevDUeSbQzxarxDYHOKmf93O7YN5Lr7Ey6bj\nK6mbcF2qbOHyUK7SFcogGI4Sw32wv7+P9IdX4rWzmC1+PM5TpIGDGQvzqRTLXklQbUF7m7MMZhfA\nJyAxMABP/I3SL5owk3meDv+F3/qgdPxmvhVdzztVWT5u6Nw98Q7FAYBaEDFnr0hWWsQFQFEgGo5R\nXRWjXvcjXniKn8ULnDiSZGW9h9sti4+/6OGBQymsK7389Po1fP4PBf7QchCjHPjKAU+eYflKEGyc\nTKE5exFHX+rmQyMaE5kipQqv8eBMG+cCrVGI+tzdQwvmhKF+6RpG9vdhdCf44ASsf/0CvjMJhzeP\n8tRzu3j5ue9iG9+i5AH0JvBUO7uGjrqn/cw8Etb9zK+pIWJY/PbJFL970SQtbH75wFEyGvz55W/z\nxV7413sKPJ+M8OyNcxg1TOJ+Zse0ZUXL9C+Lwuw0zXQeM8dh4quC8U6NtW2XU/xUEyZOXPfg7JBF\nBYT8EPVCaxXU+53unDE4SkNDlMaDXk68EcA/P8X73v9NfnTyLm5fabA48ktC+f9CCQJiyj2NiVmD\nnOaVQfBLAbaNjkTu38Pu4TE2dsLxNYLOKhva4KNX/YJ/2AShXkHPN3NsXT5KqeQAa+MCUB7eaxWu\nVjmidXcYkWDXw5F4nI6VsFLpYv/AGCsVZ5+vHfBHoaCDGoaQD6xpWLAYershu2uAwzbUBQTX6DXs\nHO3kmalOrlug0FFlYvcoDHROYIYBOQdkHmTWWbvDd4YLWBBQPPg0DWGDrfvYfzTD3z8a4J43Wthk\nwFX/I5EJHy3jIb7a7WNg8wQvTZvkPGBFXJPNLAe7VK8MhGXBfVxzTDwUh31nCYb/NMBZe0q8sx66\nN/uYB5QS0KRBIANNHlDHoft16PDAF5oauXwYBk58iV8Wxhg6/0doZ4fZGWrk9yuuIt6bZiQEBKrB\nqgIjDHbA+WDVdNdHXRdQgCpfmKpQGE86y+gP9qAvCfADLudW3xAHgyqxcYvN0xMkh89n1WdU/nrw\nOJ9fJshWMxvsyqsalcpWukBZca/7XBFIw5Rhk7msxBs/vpn2JfAnEeKeay7guRvmkToLvlkj6doB\n3790PlvPDhALrkN9yEDUQpX5IHf5SnwjfB/z0x/j5UyEb93/NCMRw1nELtSDFQIrDLYOtuYWLLMM\nUOzz2HIqlSU3MUptbS1jw4dpv/Iycsd20LZgMbuODHDOtMKYaXPFR+cQGj3Gg+icvR9OFiwyuMpX\nxgKtwu8rpfzZZbBUIA5ddRYBYxdX/ydMhrNsyyXYtnMpSXWAjQvX8e//eANnv7CVV/flmN/3IZ5W\nx7hel7T2TfP/LrZ4aCzOd47uY5xR9mRxNs2Z4yx0mGEwfWDqTlPCUJzOrOubChexBQsafBbzauZw\n6SeuYXPMxvvqG7x+UBK/Ks3fczZfW9XA45vr+e3xai77ZCu74v1kR20KigPwjLU9rpSBKMeCysKo\nvOWk4mwtTcGUAdUdgsvmVrHmVdh66RFu7FhHVuzjxw+8wi2LbyCn72P3x/ZyyZpafrPnQ2Sb32D/\nSBChSX5+qsirCs7+htEAdg0YITD8YHjB0FzlFWeF3HYqQYVL2IIB8yIh1rUt4oq6RvZe83u+8baf\nX23dTOK2Y1z7tRv4265t+F8eZmWkj1hvEvsVD0erChR9Lq29zBZEmvv7e8WBsjt4mN1sck+QB3Lw\nwmCO2GqT5/MBqqXN0kdTXL/I5Pl5E3T05Km53+ApJcmj7TtYbsI3tSL7DYNUretWSq1Dx2IVGEHX\n8h4HAFN1q0E5U7sLfoLNSfjA6lp+cu2nWHXHn1n6xyTTNmQbIBMDJTyfj+wY4ZqpHMuBKzbDjYHF\n/H57FxNBnKWwKE6A9bhglIGprAMqs4KCUxgprksEVSgZ0OM+1gsrMtC1WPA/T0CwDb6VselrAV9R\nYTJuzrJIAD4fpIPgaYKiH/I+yAegVA1ZDYoeKKpQVJxGpeXclIo/CvMSaFLBa9nsfNbgun9ew62/\n20OhCGwAa6WPN9+R3LsW1LSff9XP56HxF5msZvbcX0nzysJHniGVKdEGdAnCAsNwGj5ld+qAg1OO\nv3ziI0C/S+9qyNqm87ryWpuhg13nTFysMIiAawndWSOVOBWgojpbsFLMACCxnV3ytvpG5po2T/Ua\nHPmfd1jbqDn9yGlYMtxDi5Lnqo4m/vpGlrvf2MHhI7bDIh+zByCD05fyqLD8mcFwpl7QnRrdxOmg\nlleR6lw3KoO6EKdXasLM1D7mA38AZD3YERBhpyVleMHyMpOfhbsDLdzv71RkKonXBwYMjY3SMz1N\nrafI6KaVfP/1EvM7JZ+6E4K3FbixaSWTo8M8zBf47X8sJF0Nt0ZbCIzirHAmmU1xlQC8l/LlbOFx\nFrNnNvpUIKhBSHViQ8RVVgOiHgfkAE4wC0RBaQbRCMLn0MMKgOl12s92ORK7AEhR4YYuCMKeZYDQ\nNFoUha7LF/Jqbif3VYX50Ya5HFmo874RiwOv7OX7NYJLNv6JLfkJzr4A1jvXAAAEjElEQVR6OS1J\nP3mN2eNvktkFXXdt/7QC6TQwFOfLD6bhRGQhnVGAJwRSd8xu4Zx+QjoYPrA8oMVAbQCtDgo+h/Iy\nArbqWN3yOGJXKF/+CkBZeWUWBOl0KWH3nmGq4pM887dj/KbzakZi01z7Sg/HfnUBtR7BVRKeGmxg\n96cW8tqYj7Y/dvJIdxfBvGtpfRbwd6W/07KBBKk5Ilx0hOq4gjcIqhcUr7OW59FAqwUlBkYAqAE7\n6FDDDoLldyu8IAi/W5ers8qXP3QGAMFp2UiCwvn5LWKnheWT9B7r4Yo16xl/8AAP+HL8vkrlyhdG\neaDa4ETB5sRX/5WOFx9h9IkEraM22QsVDmdspxNcbob6mU2BZ/YFhHTpqLogKK6FFGdmpnrc4KSA\npTrVW7IEvirXurpT1JQ8IILu//VZq1sel/4uEFb5y1TCYVn5WiGS5nbs8z2kqkpsq84x9zPN3Nr7\nce660OaZ6xaS7k0xri/gA+efR+B/f0BuyMPSmIl/cwPPN+uEczjrwm63By/v3RC13YAg1XeLojki\ny4ipzgBR9UO0zvFx6Xeiu+J3xNIAHwivKx6HAUJxgXZ9XtjvTsMVgVDFq4MeAjFJbSTGupa5fOQr\nd3Bku8Y/bq5n2SfTrN0+xl19XVx6CN4HrAMef3+Jpi6TsbKldffNKw/2dgUIisuAsvWF+yJRcXe2\nnL2WmYLmsAG1gkGuC1kKCG2WRe9S/r0UPz0WOAAEwxCZIuzVmTc8ginTJPLwb99+lWQt2LddRPMP\nO0kyyeWXQ1QGuenhSXo/q/PnrgrKVzQ+Z1LjjPVFhcUrmhN2JQAVkVK4sUF4XEqXmVFWuvK8LSsU\nP0P595Lyn9kgmdcKVdVgQmMoxk3X38vcxzXMGCRawV4PqAYDn0ihflejPvk5PlYMMTjWyI4/m2Qj\n8J15AefrAieBIZzF/jROKjPcIKloEIi4xUj5azkVQtmC6ulSBsUuT3Xc15WVPlM7USFnPn0G/Z0s\n4H5JChsCuo8NS5Zy9/ckd37gfLSo69NvvM7Fio7nZybGDXs5vm0+t2k2IlxCsVq4t6UNT5rZ0rfc\nHyiXvGWXKORnLTVzR5UmKb9YPf1aqTyVysvT3ahs/UrFK+k/85ztAuF2hbEs0AR1wRC/Kh0mOljg\npkuX8/NtsHyn4Ob/AO/DOdpNi9j2aT4oO6leliJycy2ln32YF0Z7maOAmGb2zH9GunHobjmfZVlg\nuwFCuHd1ph9Xlox2hcnEGcq/l+XPBOH/wluCwk2rt5BOw0AfowOn2Pm1L1DYX+DJFZJdD69lflsf\nI2th5Y4SxSK0HozjPU/ywMYcfT1hNv3ldQa251m/QuWVnDVbyys4ZbKOU/EJ13rlmy/7fjmwlWsC\nu5y6yiJnf7fPeKz87ehKsaWb7mRFumP2egYqEq/ujmy9jOdg658e4+cvHsbe+gyf5kF+fCJJfMnX\nsA2bs4CvtMPQqjC5530s817HqKVw8TVV3Lm/BPOBEZyvZSjMpkTbBss8XWxr9oYqY4GoMM+Z5pop\naird6Az6v8v6Nu9yhQr5/7FjGEWES5bOAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "juliapoint": [
            0.40566542126897226,
            -0.02148212391923303
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true,
          "supersampling": true
        },
        "exprs": {
          "valuetransfer": "/value",
          "function": "z log z + p",
          "mandelinit": "E^-1"
        },
        "palettes": {
          "lakepalette": {
            "width": 7,
            "height": 4,
            "colors": [
              -16777216,
              -16777216,
              -16777216,
              -16777216,
              -16777216,
              -16777216,
              -16777216,
              -16711800,
              -16742400,
              -8290048,
              -120,
              -30720,
              -56832,
              -16777080,
              -12255318,
              -13391309,
              -256,
              -86,
              -21965,
              -39373,
              -13421654,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1,
              -1
            ]
          }
        },
        "scales": {
          "Scale": [
            -0.03769256209406104,
            -0.00912715902332267,
            0.00912715902332267,
            -0.03769256209406104,
            0.5158559829223773,
            -0.13929920220162678
          ]
        }
      }
    },
    "description": "2017-07-28_15-26"
  },
  "new icon simonbrot": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 2200
        },
        "reals": {
          "max_power": 4.0
        },
        "cplxs": {
          "lightvector": [
            0.0,
            -0.667
          ],
          "juliapoint": [
            0.3137697865134521,
            0.7548060435083614
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true,
          "supersampling": true
        },
        "exprs": {
          "valuetransfer": "/value",
          "function": "sqr z abs z + p",
          "addend": "arcnorm((znext - z) / (z - zlast))"
        },
        "scales": {
          "Scale": [
            0.019582853954522514,
            -0.0013369282431125204,
            0.0013369282431125204,
            0.019582853954522514,
            -0.2755482936630595,
            -0.5836500525082243
          ]
        }
      }
    },
    "description": "2017-07-27_15-22"
  },
  "new icon(1)": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Two folds",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    extern foldinit2 expr \u003d \"0\";",
        "    var foldvalue2 cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "        extern foldfn2 expr \u003d \"/cosh(/dist(znext, z)) + foldvalue2\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#a8f, #404, #fa4, #ff8, #f40, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + foldvalue2.x)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#fff, #fff, #fff, #fff, #fff, #fff],",
        "                [#a8f, #404, #fa4, #ff8, #f40, #008],",
        "                [#caf, #a4a, #fc8, #ffc, #f82, #24a],",
        "                [#000, #000, #000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; foldvalue2 \u003d foldfn2; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "cplxs": {
          "juliapoint": [
            0.5666,
            -0.5
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true
        },
        "exprs": {
          "laketransfer": "log(1 + foldvalue2.x) : value",
          "foldfn2": "(0.5 + 0.5 cos 6 arc (z - znext)) / (12 + rad znext + /dist(znext, z)) + foldvalue2",
          "valuetransfer": "/value",
          "lakevalue": "log(1 + foldvalue.x + foldvalue2.x)",
          "foldfn": "/cosh(rad znext + /dist(znext, z)) + foldvalue",
          "function": "mandelbrot(z, p.x) + zlast p.y",
          "bailoutvalue": "log(E^2 + foldvalue.x + foldvalue2.x)",
          "mandelinit": "c",
          "bailouttransfer": "log(1 + foldvalue2.x) : value"
        },
        "scales": {
          "Scale": [
            0.005174041242831022,
            0.013904241901619489,
            -0.013904241901619489,
            0.005174041242831022,
            0.4896873912474015,
            -0.33901231056548664
          ]
        }
      }
    },
    "description": "Created 2017-07-29_12-30"
  },
  "new light": {
    "icon": "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\n3pOJcQAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "// used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "var i int \u003d 0,",
        "p cplx \u003d juliapoint if juliaset else c,",
        "zlast cplx \u003d 0,",
        "z cplx,",
        "znext cplx \u003d 0;",
        "",
        "extern mandelinit expr \u003d \"0\";",
        "",
        "z \u003d c if juliaset else mandelinit;",
        "",
        "extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "var color quat;",
        "",
        "while {",
        "znext \u003d function;",
        "not breakcondition(i, znext, z, zlast, c, p, color)",
        "} do {",
        "// advance to next values",
        "zlast \u003d z;",
        "z \u003d znext;",
        "}",
        "",
        "// return color",
        "color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "// if the fractal accumulates some values",
        "// like in traps or addends, here is a got place to do it.",
        "",
        "func breakcondition(i, znext, z, zlast, c, p, color) {",
        "func bailoutcolor() {",
        "extern bailout real \u003d 128;",
        "extern max_power real \u003d 2;",
        "var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "value \u003d bailoutvalue ;",
        "",
        "extern bailouttransfer expr \u003d \"value\";",
        "",
        "extern bailoutpalette palette \u003d [",
        "[#006, #26c, #fff, #fa0, #303]];",
        "",
        "color \u003d bailoutpalette bailouttransfer",
        "}",
        "",
        "func lakecolor() {",
        "extern epsilon real \u003d 1e-9;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "value \u003d lakevalue;",
        "",
        "extern laketransfer expr \u003d",
        "\"arcnorm znext : value\";",
        "",
        "extern lakepalette palette \u003d [",
        "[#000, #000, #000, #000],",
        "[#f00, #ff0, #0f8, #00f],",
        "[#f88, #ff8, #afc, #88f]];",
        "",
        "color \u003d lakepalette laketransfer",
        "}",
        "",
        "{ lakecolor() ; true } if not next(i, maxdepth) else",
        "radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "}",
        "",
        "escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "// this one is just here for testing light effects",
        "// circle + donut + green bg",
        "var rc \u003d rad c;",
        "",
        "{ value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "{ value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "{ value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings. * ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "var c cplx \u003d map(x, y);",
        "var value real;",
        "get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "var c00 cplx \u003d map(x, y),",
        "c10 cplx \u003d map(x + 1, y + 0.5),",
        "c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "var h00 real, h10 real, h01 real; // heights",
        "",
        "// color is already kinda super-sampled",
        "var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "// get height out of value",
        "func height(value) {",
        "    extern valuetransfer expr \u003d \"value\";",
        "    valuetransfer",
        "}",
        "",
        "h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "// get the normal vector (cross product)",
        "var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "// normalize np and nz",
        "var nlen \u003d sqrt(rad2 np + sqr nz);",
        "np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "// get light direction",
        "extern lightAngleToNormal real \u003d 0; // angle to normal",
        "extern lightDirectionAngle real \u003d 0; // 0 is to positive x.",
        "",
        "def lz \u003d cos lightAngleToNormal;",
        "",
        "def lx \u003d cos lightDirectionAngle * sqrt(1 - sqr lz);",
        "def ly \u003d sin lightDirectionAngle * sqrt(1 - sqr lz);",
        "",
        "// Lambert\u0027s law.",
        "var cosA real \u003d dot(lx : ly, np) + lz nz;",
        "//if cosA \u003c 0 then cosA \u003d 0;",
        "",
        "// diffuse reflexion with ambient factor",
        "extern ambientIntensity real \u003d 0.25;",
        "extern diffuseIntensity real \u003d 1;",
        "",
        "color.a \u003d color.a * (ambientIntensity + diffuseIntensity cosA);",
        "",
        "if color.a \u003c 0 then color.a \u003d 0;",
        "",
        "// Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "extern specularIntensity real \u003d 1;",
        "",
        "extern shininess real \u003d 8;",
        "",
        "// r \u003d 2 n l - l; v \u003d 0:0:1",
        "var specularReflection \u003d 2 cosA nz - lz;",
        "",
        "// 100 because L in the Lab-Model is between 0 and 100",
        "if specularReflection \u003e 0 then",
        "color.a \u003d color.a + 100 * specularIntensity * specularReflection ^ shininess;",
        "",
        "color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "// two or three dimensions?",
        "def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "func drawaapixel(x, y) {",
        "0.25 (",
        "drawpixel(x - 0.375, y - 0.125) + ",
        "drawpixel(x + 0.125, y - 0.375) + ",
        "drawpixel(x + 0.375, y + 0.125) +",
        "drawpixel(x - 0.125, y + 0.375) ",
        ");",
        "}",
        "",
        "// which function to apply?",
        "def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "ambientIntensity": 0.5,
          "lightDirectionAngle": 3.9,
          "diffuseIntensity": 0.5,
          "lightAngleToNormal": 1.2,
          "specularIntensity": 1.0,
          "shininess": 32.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm c",
          "valuetransfer": "value",
          "lakevalue": "znext.x"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "new light test": {
    "icon": "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\naqb+P1XugqV944edAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "// used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "var i int \u003d 0,",
        "p cplx \u003d juliapoint if juliaset else c,",
        "zlast cplx \u003d 0,",
        "z cplx,",
        "znext cplx \u003d 0;",
        "",
        "extern mandelinit expr \u003d \"0\";",
        "",
        "z \u003d c if juliaset else mandelinit;",
        "",
        "extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "var color quat;",
        "",
        "while {",
        "znext \u003d function;",
        "not breakcondition(i, znext, z, zlast, c, p, color)",
        "} do {",
        "// advance to next values",
        "zlast \u003d z;",
        "z \u003d znext;",
        "}",
        "",
        "// return color",
        "color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "// if the fractal accumulates some values",
        "// like in traps or addends, here is a got place to do it.",
        "",
        "func breakcondition(i, znext, z, zlast, c, p, color) {",
        "func bailoutcolor() {",
        "extern bailout real \u003d 128;",
        "extern max_power real \u003d 2;",
        "var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "value \u003d bailoutvalue ;",
        "",
        "extern bailouttransfer expr \u003d \"value\";",
        "",
        "extern bailoutpalette palette \u003d [",
        "[#006, #26c, #fff, #fa0, #303]];",
        "",
        "color \u003d bailoutpalette bailouttransfer",
        "}",
        "",
        "func lakecolor() {",
        "extern epsilon real \u003d 1e-9;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "value \u003d lakevalue;",
        "",
        "extern laketransfer expr \u003d",
        "\"arcnorm znext : value\";",
        "",
        "extern lakepalette palette \u003d [",
        "[#000, #000, #000, #000],",
        "[#f00, #ff0, #0f8, #00f],",
        "[#f88, #ff8, #afc, #88f]];",
        "",
        "color \u003d lakepalette laketransfer",
        "}",
        "",
        "{ lakecolor() ; true } if not next(i, maxdepth) else",
        "radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "}",
        "",
        "escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "// this one is just here for testing light effects",
        "// circle + donut + green bg",
        "var rc \u003d rad c;",
        "",
        "{ value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "{ value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "{ value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings. * ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "var c cplx \u003d map(x, y);",
        "var value real;",
        "get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "var c00 cplx \u003d map(x, y),",
        "c10 cplx \u003d map(x + 1, y + 0.5),",
        "c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "var h00 real, h10 real, h01 real; // heights",
        "",
        "// color is already kinda super-sampled",
        "var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "// get height out of value",
        "func height(value) {",
        "    extern valuetransfer expr \u003d \"value\";",
        "    valuetransfer",
        "}",
        "",
        "h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "// get the normal vector (cross product)",
        "var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "// normalize np and nz",
        "var nlen \u003d sqrt(rad2 np + sqr nz);",
        "np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "// get light direction",
        "extern lightAngleToNormal real \u003d 0; // angle to normal",
        "extern lightDirectionAngle real \u003d 0; // 0 is to positive x.",
        "",
        "def lz \u003d cos lightAngleToNormal;",
        "",
        "def lx \u003d cos lightDirectionAngle * sqrt(1 - sqr lz);",
        "def ly \u003d sin lightDirectionAngle * sqrt(1 - sqr lz);",
        "",
        "// Lambert\u0027s law.",
        "var cosA real \u003d dot(lx : ly, np) + lz nz;",
        "if cosA \u003c 0 then cosA \u003d 0;",
        "",
        "// diffuse reflexion with ambient factor",
        "extern ambientIntensity real \u003d 0.25;",
        "extern diffuseIntensity real \u003d 1;",
        "",
        "color.a \u003d color.a * (ambientIntensity + diffuseIntensity cosA);",
        "",
        "// Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "extern specularIntensity real \u003d 1;",
        "",
        "extern shininess real \u003d 8;",
        "",
        "// r \u003d 2 n l - l; v \u003d 0:0:1",
        "var specularReflection \u003d 2 cosA nz - lz;",
        "",
        "// 100 because L in the Lab-Model is between 0 and 100",
        "if specularReflection \u003e 0 then",
        "color.a \u003d color.a + 100 * specularIntensity * specularReflection ^ shininess;",
        "",
        "color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "// two or three dimensions?",
        "def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "func drawaapixel(x, y) {",
        "0.25 (",
        "drawpixel(x - 0.375, y - 0.125) + ",
        "drawpixel(x + 0.125, y - 0.375) + ",
        "drawpixel(x + 0.375, y + 0.125) +",
        "drawpixel(x - 0.125, y + 0.375) ",
        ");",
        "}",
        "",
        "// which function to apply?",
        "def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "ambientIntensity": 0.0,
          "lightDirectionAngle": 3.9,
          "diffuseIntensity": 1.0,
          "lightAngleToNormal": 0.79,
          "specularIntensity": 2.0,
          "shininess": 128.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm c",
          "valuetransfer": "value",
          "lakevalue": "znext.x",
          "function": "cos rad c"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            10.0,
            0.0,
            0.0,
            10.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "newlight": {
    "icon": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAIABJREFU\neJx9m3ecHUeV779V1d03Tc5RMxrNKIwkK9iybFmSbTliHGRYG2xyNM8LbMC7bHjL04fHI+7CLhm8\nGEwyZm0DNhiMk5wlWVmjOJrRBE3OMzd1rPdH3zszEuz2fOpTPX379q1z6nfO+Z1T1eLTn/q4llJg\nKIVhyFyvMA0D08z3BpZpYBgGVu6aYUhMQ2EohVISw5AoKVBSoiQoKZCCXNMINIIAgQ/aR/sugWfj\n2knSySlmJkfwMpO0VClW/vgpGo8up3/dGSpHNlJ7eJzVH/kL0o9+lf3tWxlIdAM+6AAAtAAtQRsQ\nGBBY4EfAi4IXBycOdiF4ZSCbQDeAXwdBJcbY2EhOIDXfW6aBaZpYpoFlmVimGfaWgWeE10zTwDcU\nZq7pQKGVDJsUoETYCyCvBBEAOrwkQEjwCfCySZy5IR55/HnWbixDrUiQrBuDMdj4rvczdPh/0/Xg\nVylqK2agoBNwAA9yz0MDWoUKwAw/0z4IHwhA61BJngmkwXPA9iErUEvqKnfZdhYn11zXwXFsPNfF\n9z18L+x14KODgEAHBEGQ035+APqCXuSFzJ0DiDwKcsqQQmPIAEv6jJ7v4O++tZfznU08etMkmz96\nL+tXruXE8wfoOvd75OgqTl87THdhFcgUyAyIbKgI4QJu2AsnRAa58QUB+D74AbgaHA1eDDIFMFsM\nXhGqrqp4VzaTDhXg2DiOjes4eK4zL3zg+2Ef+KEitEbr8Ee01uGPLRL+QkXoUHihkeSEB6TUKAmm\nDIiKDC3mG3w/dTeUFXC+ZQmlZx36Dx9g7ZZW7rpvG6/u68kJngoFRs+jK9QwuWseaBu0lxPeB88D\nxwMnAFtBMgGUAWUYAg+0wHU8XCdLOgWmaRKLRolGI8RiUZxolFgsiuc5+G4E33MJ/AiBbxIEFjow\nQZto7Yc2aCoEConCRyCERCJA5cYqQAqBRKA1mIlKrt7xNuSzuwmOmHzw9TdIjxbQlmrnpm+9hRd+\nfwDExIUC/0+H0CFChA1YoKOg0wg/RdzxERRgsIRpbAyhPS54shC4ro3r2ti2hevE8FwnFN6LEsyb\ng4cOojmo5RySDnKOzkCgkWgEEi00Wki0FqG9ilAJ4e9JpBFlLFPEbz9QQG1Rhvf/ajXOkT7seCH/\ndv/P0Mbw/yy8YP658z15RNg50zAQOgViluXSpd2vYT9VGEpnw8GhQqvVMvd9gWNnF0zBcwly5qAD\njyAnvNChVxcEiJwCJKGNeyJACIUSKlSClAuj0zqnCIEyLErKqigpiJDQo8Q/O8H0RDF9tXv5x6+9\ngy984tE/FXiRjH+ihMX3CUBqMFykcolaDluyR1gO7KEaafjjGP4EUtsIvFwL5psOPJLJWZLJOVKp\nJOl0inQqRSaTJpvJkM1mcGwb27ZxXBvXdXBdB89z8T2PwPfwfT/nPwJ0zoHq/OCFRCkDKxInEivA\nDkzmXphjxy8uBxe+v/tlbn3glgsF+u+UcfF1AUhC02uBsmpYvc7jE7+Hrxf0c7ZYo8rd0l3F8SkC\nw5r/lhDMe+/84bqh48l7chGOPTwXoIQIf08ssnEpcj1IKVCC8HyeHwQXKFviY2Cz8vgf+NzGa1jy\ntQjyt3Ds7Ov4xn8j6MVC54etCYOUBJJQW/UxGt39nD0k+fJxQcOYYKSpCdkcjxNtWInUWaTOIUCH\noURc1DLpFOlMbvazmRwCstjZLLZj4zo2juPguW6IAtddFEk8/MAnCMIwqnUQBov52coFzyDLR3Zf\nT8ErRcz1Bbjawb4GSj/U8j8LfvH5lhi4cM+Kt0C9yfDtL7A/cy9j2SfQLVFSQSvUu6ieW5xdDT1D\nualTIOT8M0RelfkQA/ietzCrImR7SuZnm4X+gvNF98s8KVrgA4IAtI/n2gyNTnBZ0ZsUP/s0X/34\nAI/cnODaLdvI3myz4b8K6ClPo497/60SEjas0u2MXBZnzZMlvHB9hHW/7MVJttK+5zna5G85X1ZC\ngxul/uCbqNKm0l0TNFDtjkDOEcKClxYXtDDGax2EkJYyFHLRucrBfTHk1QVKWKDHUuTJUkioAt9D\nozHNAlqbKzCsct42cor/WHsf/vc6OHz+OI3/ugb/Ky7OvgzRT9dzzeR2RlrGcRNZ1ItX8JamInrH\nBDc+c5p4apqt3X1UxaFtfICCCBQVmlSdTSMnp0gYEtFmrNDd1ya5ZXKAQCoCkUALEzDQQkIumF2M\ns3gsSkFBgkQ8TkEiTiIeJRaLEY9FiMeixKIRohGLaMQiEjGJWiYRK8wpLENimhJTCQwJSvgI7RG4\nWezsHNnUDK49i/RTfPOXx/EzPdy0Fu7rgBuOwy/aYfv0El4vGeb2Iw4dsXVcro7gudDcDM01kIiE\nBDCTgbm0JJWOkcqYpLOKdEaQzgpcT6KWBjO7rpEztFwOE0M65M/CAASC0NstRkHewwTax5ASQ4VN\nSolSuWRIhM5PKbHIIf45FOQTJeYZ47zpSHA9j/qSNEXRcayY5K5GzdFz8JerYPLsDHdW+SgLblk7\nwqVr4borYcMKKIrDbBIGRmFwDKbnNFnbw/cVGgMpDKRUSKEQXF+mEVMUH3+Muv91gGW/+TyBjKNF\nBI0RIkBcrIKwj0UjFCQSIQISMeKxGIlYyBpjscgCCiwzREHEJGKaWKYiYipMQ2IaAkNqlNBIPLTv\nEHg2npvGycyRTk6RTk3h2nOk5kaYmxvElCH3KohAUQyK4xBRMDUNr+yH/iR0jdUyF5li+rCP5bsY\nEgoTUBCPYFpxhLAIAgMDOQkSbit9O3OPgW8CuZRVCIFGI3RIYBYUETrEMOYbuK7CdRSeoXBNheFK\nDCUwcn4gTI81rtA5kpTXvkIiEEogpAahc0hSSCwUCUxDkIhH8J1CvNJitNeA0lkM6WDJLErPYqcn\nOXwcPlmxHP9UNUMrh8Afhkwp7HD42FtuoeNrZxnvf4OpOYfiuCAaA0OBavqndbvKl6yg9HAv2giz\nRpC5IC8vsvwFZyjQ6CDAMBQqV0NQUqBUvi6wyBEKjRBiPimazwrJp8fBPJOEIGcKGiXAkAIzl6LH\nIibxiEUsahExJQQOk5MDnOqEO1evZdbaTpDupPDJGsp6lxMZbGG5eZTfNm6GyZepq1tLemCYjBuE\nGTMKVfOkuSs9O029Nxum1IuSdZEj7X9KthZIkswN0FDyAuGVCv1AXuCF0kBe6DCihP/n2GEQhsMw\nr/AvUMZCuPTwvSzp1CSjo6cpNGHL4WpY907Ui7+l/PESCrDo2/YM6foTLLMl08c6GavRRF+ZQxLm\nPm4QIHyJPH29g2f0XyTXwsDmZ4XggpBF7vN8njBfO/BcPN/FzZEh13HmawyOk8Vxcue2fUH67eTu\nm/+e6+J5Lp7n4Xkeruti2zbpdIpMJomTHeObv4LWh9fBLTfBQ7+l+pflGLhY+JAAdsJdT1zL3Iop\nENOcuKKVAIMAhY8k4/sYGKNs1g+xO/FBtmfzCsgVFESwoBixgIPFmAgCTRD4OSUY+L6L50k8JfBy\ntu/kKW8ucQrLVl5YRQok2pf4SuBLUDJAESBzoVHqML8P3AzZ9BSz00Nob4zqwiQPt8CSd32Mvs4+\nSP0Kg2VIAgQOABuvXM0ZoxixMkL9yXYK93SjUejcn4PGqHSrKJ/9INfY4bjyoul8MpT3+Vqi0TlF\nLEQDrTVBEKbIQRCGmsALBfJkju9rPxQ+UOjAyDWF9sMW5KKBL3VOgFB4oV0kHlK7iCBDMjnB/sOd\nTEzCF+rW0vwzTU/fD8Lix2VzyAM+Ah+PJAy2cPBoFwe/eJyWtgb0s0lyLj2X+YaTa1w9OMq0xYL9\nz894Lr8XizNOkXcS+UJXeHvgo7U/XyfwfYnvCTyhc7PuoQODwJcEvkHgK7RvoE1F4CsCUxJ4Ak9q\nJD46cNGejQ4cJC6mCkhYAY2VBWzuE9ywP4Z9JfRsjcHl7SQScSo+CwInN2key44ayI+3EOBixCXC\nm8uZr7wgzTM8M1dUvcjThdoKyE/6gsDiIiNYZDLzSvAJfIEnghA5gSLwHAJD4XuSwDNCRXgKbRlo\nX6JNiRIaoT08N4OdTeLYSQhsEhEBBQaFCihO8Ow9HqU3/SVr4uUMj40x9r2vAxEWKs95P+WiCBBp\nP3dtviSLyCnC+LM59mLBcogQQhNW8y4kQ7C44pv/cR+tIfAFbkCIBgmukpiGxHcVvmcQWAYEJlhG\nyDUUSDzs7ByjY+eZme4jk4GqEsgWw/gAlPvVbHnM5KmJA7wydhocA27zSFf10PDr5hw2F4XW+aiz\nMIGhHOF9Ui+C+Dz880Iv8vb56o/AnxfywjBFyOYWZXdB4OF7Do6TIZtNkU4nSaXm5lvo0VPYdgbf\nc0B7WCpkeAcP9zE9AQcPwbGTsKQM3tL0V6xt38CJqSjmGsLipzUNTe+m9tcrFnum+TYfcudFXsxk\n5J9HwDzXm5/5YAH++kITMJRCSTAkIfvLJThSaHTg4Xounmvj+37oflTIG6IRE9+LIIIIiggRFUVa\nFvGoRWVlKd9IbqT66n4KY8tQe/Zw3YPr4M5TdK++hr7fX0v5oMmEOIRVVEj1d15E4s+LePGxAPv5\nBD/3f0j2/1TwixAhRPjgC7PCsFfSwFAC0xBYhsAyJZYhkQJcLyDrpEmmZnE9G3QQKkspYpEIfiKO\n0HEMGSdqBuioRiHxnCylDecZGR8j8bzHL1Y2hcXNw0n6Js9ARyepd90JNTU4I/2Ml0SpRiwa38Uh\nW/8J9PMR4c8Xmi5wfAtaySti8WEoMJXAMiQRSxG1FLGIiaEEruMzMzXDxGQKxw1zgjDb84lFHDx3\nDkkRlnSJKJeM6eLHA2IFiqp4NVOFo3RfMwWTWWjeBg2XYJTUsf2WnaTTKfasXA2jvay4+XYmn34M\nTb6ikQ/ei43i4uJx+JkxL6C4SPB8yOdPFZE/pOSCmY+YikTUoCAeIRE1iUUSHO44jpsJnxX4Obcq\nwLHD/yPGLDEjiwgstGtiBIUkZAG/u+wErU/nfnPdalh2NasKmyk3E0jHoMws466NN/LkyQ7OfuoF\nqjqrSPb2k/mApnIwhvTTuVm+EAcX49z4k0uLS8v5Gv6flz83+zklmJJYRBGPGhTGTcqKYlQVG6zd\nAP/4Sit3OGfRQObt24n96mW0gLkklBaA0A6TEw4DA5CsmKLjKKgA9m+Cy16CyPRWViXXYgYaHRWo\nmMmhzm6G9h6Ho1ux/243yYlS+O2rsDpFZf8q8o4ulG0B+qEcegEbd6wP/9N5TeSF/XOh8aJr0QgU\nF8YoKSympKiQksIExYUxChMRygojNFVFafpiDxT0w3tmWfbhFrpuPsPd58DJFaEbqmBTO5Ql4JEn\n4YiUTNz9MYwvHaEh6bOs8Si/SH8Gv2EGLikFNQdeCs6chkCFkCodhr/eQd2Mj/GBFzHcZM4pLuQw\ni6dQhuwAjY+8QLZFUyz0xe5kkRJzTQowpMY0IGIKYhFFLCIxpYednuTkyTf48qVHIFEB/+XRdd8Z\n1sl388vbElhuWHySAYyPwiefg5/f/z4mbv84tUPjWMkJBtZPcazfZJ37KIgBGBqD40fhzKnwyyoL\n1ixYcZgspK5hNbj+/OznHV++CUzAAqKcueMSfKIX+oC8EvRFmBeLZn+xGYQVQw9DaiKmIB5RFCcs\nElbAq6+9yWfGTep3r2GtM0Proa0c2zCI4iDLn96MXPYCCQlrV8CuLV/Av/9nGL8eYTjdSd0N5Ug8\nYocdHBJkri8E+xEYvwmUB/mQJ3JL4PFSSEtUxqDvoS00f/Cl+ZkVucRHIlFYnL6hCGJ7YKqH7p1p\npFiMjrzAYXHmwrCaOxeLWljX95DCw5SaqCUoilssqS7hcyNXkF3fQNeODsZWuux/4TTZjzsYnGBN\n2QuUtBvsnr2S/zp7E+PPv8Rwawf+kjioLAWeJsDAx8InSvSJWRhdDuUpkGmQLohF+wOKShDa5M0z\nvfDT13BI0Hf7aQJMAhQahcBClGjU2/Zx++dv5f4H3wkZUCur2TUP9YsJ0UUF0YvvURJiFsRjgqJE\njJKCKMUFEeIRzSfXDPHEAxbT31jOO+5fS9orZFiU0RUkOVlbxH6njNmygK7AZfW972dkf5K2v9jJ\npKXo3bOPgqdq6Ok5RMnZGk7f1AHUw5btcK5vYZbI2Wn7KrasWMnyihqWtm+lwzuK9Q/3EPtBV264\n4exPa8HMRyPM6gQRVU3b84UYQi84QLHYB0goiIJlwsQ0aLnIHHKH54Lrguuk8dwUgZ+AwEF7Pn/x\nH9Oc+/gIO+o284Nf/hJcAX25AetCEAaUF0NpA0f3HIRtm1haXMuqqxrRsUt5am8nfHwn3cmfYaTu\nwLrratY31vN69yCc67nAS5vV1RjC4LmfPAr9I4BNdKyW7MN3M1r9G5bcbAOS8Y9K6OhhsNZkEB+W\nTSCFfxHcNZQUwNJqqCyCv727jGdj1/Pn7vN9yGYhk4Z0epRsZgbPTWPIgB9/xKb1N5eSPDEM3UC3\nhlnCHSwFAuoroa4Wquqgso6GxhaGB6d58nev8NRTz8D3jlIxHGPrA/+ApydIP/oEruMTv3TDRXYK\nCsHLr74GA+dBuCADprrGGX3ocXh1LX271pDGovEblXAWmJgJZ3T1KtQlZexavESnJKxZCju3F/GN\nl20ePLyB8cqXaAKs7MJ9+ea44U4UU0HUmiURMUlEFQVRkz+OTbH/mQl87UKacGuPAZSVQ0ULlC2F\n4noaC6qoihRhapPBc/0wOQTSI+1rREEha6+7lr49exkqKWFjy1IG9u67wFS93r4QFXnF1NVAYSHU\nVsHkJJzuItkwQnCuFLu4G5rroX4jFDSjyiqKdxUHNlKHNDIagc3tcKrb5fXXN9Ldvo9Le7Zy8pIo\nrf0TBIuihSnDMoDthKzOlKDEDFHDpjBmcFtTP88e3EHyneO4p+1wgC5QUQOVa6CwjZZYHTVWGUVG\nAYWRBLU1tfQdORB69/FRZk6fou/V18LvdnUzMDAAs3MXKADXhaYlsKQR2lei2tqoraigpLwCWVlF\ntroCBs5zi9HDKb8KyjdA9WYMWYlxrrONV/6ll3seHiOwIMhCSRy+fbKB+gMlVNg7WXJ2Fcs+8QVk\nAqxcmKysgtoiOHYGfCNclDAFJOfATk+SSU7SVAk/vOMZPnr8Bg7yLHg5BSSjwDJWes2UOUVEAwMl\nBR4+k5NzsGQp9J0OoZV1L3ROQ8OwbSsMDkJXd27WBXd97D5mk8ncXqYgRLMAUwpiqp3qTTfx8J13\ns2r2I5zsqYZZjdGmUcbfXLYrc34pY2/EOHbFDMuHXRoq4ftHmznjvUF/2qFjIsXx1ZfTsfVa3Cdm\n2Fu8mq2xXl747p2cf+0s1VMBBlAhmjg/PIMQsO8QdPZCzIT3VHXT31HLWZUM/cBYOSvE20jYtQhb\nEtgB+OFGDt/zGJwYhqkRkItCXe6Qt9/Kzm3bGLcs0mc6Q0cEnHj+BbqCgEgsTsyIYAkTAwPlGfhJ\nTdfxUboH4oxHq8FIw1QvnghQ1W+Yu8qtcfpbPZpufTcdqU70aym+/Y4RftW2ikzXJKy6g/KGDayv\nauNI/8s0HUgxNGSzb9sdyK13MPDoBJ2lNs99aw1nX3Jp2noJXbd+jN9sv4bHvjzHYMcQV9XO0dyf\nwIn7rD9ks6/jbxmSaUadOUZTU8QlVBdVUBwtoGdqDG/8LEh7UbwHrr2WHevW8fTLr5B+9fVw5fPS\njTA4FH7e3894AF4kjhlInIzHzGSa7p4Rjh84CTN2yCHMNIg0ZGZQjVTu0oNxoj1VpNdPM3E2SU9z\nLc8eivHuAyMce7mKytp3UqEiCAeG3jxCrVSMvf1+kk8+S+GatQx2PUPt/hKmjhdQ98BHONA/RudT\nP6Liy9OUpEvonl1P9vpGEmfPYEyv4Znk/VA4C26SwBvH6zvCSPcJxo04BW4Rm+qXcrzr1yCzFyDg\n6p3v5MUfPQwnT4bhR2timy7DUwrGRsP7Mg5zVXWUGjFmZzOcHBpnuncIegcIHVgQsknpgZ9G1ZDd\nNXn1aoY2z1J6+40Ufr6XstNxbv3KOXZ/06G3+Tpmj08yNtLHpes2cebgHxkrTZOc7qLkulsYf+xR\nMBSFxRYziQwzew9S2HKcqp8uIQp0ve1V7vvMSX763CzmoQwVMYVMH2SstYjW6g8zOfs0mEmQLpmB\nXvo6+hj5ZZZ07wCR0kniRhwn7gAD9O4eBXscgC1//Vf079mLd/o02975HvrefCUUzoiy/JLLqSks\n4/TwKHZXD4xOQNaBPEEWAUgfRIAauXLDLlX2Jt8v6+Kxxz0S5zMIZul8Io5G0DA6xyXLPkFX9vec\n2fsyXPEKTb+opaInypD5MIgwrWv70t8y+NLLLFuzBvVVG4WLxqXOv4zs+9owP1eI9MfANYmpKL3L\nj7A6sps+NZYbkAfSgcgY6ZbfwDv2Uf38Soo6p6nqkjSV1jN0RQGMTEFhMa2brqCn9xwkJ+g79rWw\nYiQEVLSxYukmXjlyEPeVl2F6OnSkWoEwobKWFVdczcTUGDhJ1D9umdy1dDzNHdcv4+ud3aRaHUq6\nLSQuoDCIs7/0Mfy4hFIbTg9QMVBEBE3huVrKz9Uz2TzL4O7XMO//INbfv4GBg8RH4uNPjDPz0AiG\nPxLmaIGJEFFm6x3cQzbTm5fCTDL09NIGcwaqPBgYZa6lj/IzJeGy+bBH1Zs2Y80zcMVNLK9qZsXq\n9XQe+DXLXiijvqec0ZUneH9siKdenIShcwvOU8tQAdVNrGzfxKrGFsYEZAa7MK7acgvrmuPY0ydZ\nb5cxcfudTJx4iPKBKCNfdkn86xR2SS00RGj5xRgGTZj4mIDUJh3bpgkZhEcwNo4ujiO/ZsMHXSBA\n5ppG4GNiI9G+ZtlrZaSUiTWXxREe1DRgVFWhBo5Q/7tJqh6/ktHbp1BkMVAoAs584CQMzCBfLeeP\nz30DEtXgXkWMZ7CIsOaZS3nxyffBlx4Nd4zr3B45IXMZbwRcEzImG6rbeE78Afmj7z3Or3/3Uz7/\nkMPh+JsUqaXMtJoUbGthVl3L8m99k/Kdd5MoMCh5IUxTLTIcvvkoWQwog203/gNlUwHNJUsZWl5A\nefYd89xyoUqvCDBxkGQI8JFYX0zgLKmFtjYYOo/3jE/N0/1IN8Pk7QNYzKFwiAAKTdsPm2j/4xUE\n8ufhpulUD3TEmVwGM7hE7knQ+5UfwdLG0NtLm4Wdoj6kHeamJckRSXG2EeVMIJUPr+7WXNl0lLUj\nhcgH/oUVRxMUf/pe+MUYYtJkfaSd1HPXkRy5L7eymuLGF2BT0xu84+QB6n/4XiKWRdd//ghjRTlv\nPvIIARaBiMynpAEGgjjWP72NFJJ0MbRs/jCc0TA1GxY33taPdUkWiYfCReFiERBB5GoPkDUtSq+7\nBcw5iPXCFd/mam+IrnvKODCYZtUJh+LISCi4zIJKh8oSWZicY2gsijFTzuM/fgw/1ofszpZw/L3v\n5Z/+0MqZojpmiXP6qlM4cyaoJLv/87s8/9RuNt+9lTP/8TvO3HApR1d+iD9+uIE3v7ECOwLbr4Eh\nOtlRsoRVPz1A7UffzfitEc51rCaIFKExCDBRFFFz2xm610c4s6mEX//oMMwOhsVBAc3FGwmO5rET\nIPEQOCgp6F4HWTTdHyhk6pkf8oHpg/zhqm622FfgJuCfkntg9jQbaoax9s2Fs69SoGbAmARjHJxx\ngkMmXl8lVB9lQ9sOlHvPd3f17P0Fby3sZEebxTOGglvfxcCPfxk6ES1hSjPhrcTbU8fdV41yaq3J\n9/03Kd3jMD2T5srLVvOpK2t59/KX+cfTK1h53Q56TjlwqJDpsnHsgg4SI1UYxHh94CVYHoXNH2RL\ny2WsuWI7Zw0J57uY7t1PcR/MrB8mNhzHIIvEJq5MJsq7Caqa+fTaFyk+Nk1GwskBsGbP4xvQWA/v\nXR3l6s0m72nv5KHeWpAzoGZBTYOcBnuYsvO/4fhAAbR/jppfnUOlK+7ZdfPYHn6XTdA5EieSLiI7\nfCIUXuTezPANvCOVfOKaFfyw81k+uqWHoROaS1as4KZrLmVlaws15UW4dpJ/Py8Z3HuctTe8ndGX\nngPXpez/PECstJjxT62j4meCyKEG6pvfQkk0jiUNWkor8SpLmRl4A+8tEYIv3cbc2YMUd4kwGgWT\nLE9BmxxgqCfcxxRIcHyQJjQ1mLQ0r2JV2yqWL23h98+dprVnmDeLLFATIRpkBsQsxqYraT/xPdad\ntygrKEIh1u06a7ehy9/C1jt8qg8e55wlwXJC21HTYI6A/gMly3/ODc3XUTgFn/zYh1nZtoSa8iKi\nhma47wi3f8JnoukU6GbWN9xFV9d3qLjz7Yz9+FHaP3Av9dFK1u/czmt7xpjo6mEqFmdF1RLispDW\nomaGnngCuiNE1r2NxpmVDGTPYOtyNgY7ePzBOjp2KmJbLqfwtbPhcr6EkuIIS5vaaG5spL6mhrjh\ncPfAGJN/KGJsWTKXT5AvYHLV/l6uXeEyMRNhajZAUXz1LqwICElX/3LONbyVd9YcoCM9A2oSjAkw\nZyGeoax7HUOzSdZvXMkP/u0BOk4cIRERFMcNSuKSbx8fZrZoglJvluyrTxNVmsof9zLWuor6tSvR\nKcGTzx8JMzmhsQf7kUW1jAzO8dybvaSGV5OduhItCljWsorTs1dhtK9nX18jeCNY61bR/5NHWT0b\n7ibRQtJY18ySxkZqqqsoLirAFB7fPnKK8y2T4HsXFC/K3n8dH585y/c//EmOvXSIzPYKFCXX7MIw\nwYpCLAFzE0Trb2Ck+xC6oI/5FXEDNo1OsfF9D5L6+Yd4ubuZmDjP4PBpKoosqkrj3NN+ntvUHL8e\nuoZat5CCIyk0ipHlM5wfzZAoqGH86OlwF2OOoIz1DzE2noERG7Iac8Uy7Nkeeo/9Bs238Yc68av6\naUx5/O/MHzkwUU5teg4tE1RW1NK6bBn1dbWUlZQQj0aJmz7/79klbLc2NstIAAAGPElEQVS20usd\nQLzLghVttDxXwQ3PvcnlaySP/3OM6/b67PtjFwZB/q0qTWTgGB9a8mWefWgZ6y+JcADmi4C1K3Zw\nokcxNWhQNwGXV/dg+zA6Aq+8vpfZMahIwBf3mERfG2GSOUyge8Uk+Oe5as1nmXYnYHAgrAcKFZIU\nOwtzE+BXQ9V6dtRfSllTA48c/C4rXopQGHTikMXefoLn9hSySWTxVSX1dTW0ty2lubGWyvIi4nET\nX7j0jtl8sfFJWmsgedu/c+Kzf8MdZ04hI/Dhe2GHs5Nq+jnQnmAZy1EUbtuFVGBaLBGHmL0kRrN/\ngt3UUyQkdmSOtprLeGtwjmfOXEdvRtJR1MHauSmEgDWt8M0brsX/zx5e72/hxL61nL/bp+g4+Agq\nJspY/v1/5vWv/5yxE0cvyO3DrSkKfAsyERgppOtEAbGOLiJnd1N/9814Ha+wfecoeiqOL8uwYqVc\nsvYS1q+7hLbWZdTVVFFcVEg0YobbdJWkrnoJZqSc2GPf4aYiqKqFG7dBa2M53/tZnNiIh4Gdo2fx\nq3YhBBiKGy//If+8KsaX9vjc7vVw8O/uwTpxjMs7B3nN2MlMrwmB5kOlJkm/g6dvvY/4oQPIP9Ty\nbOtG3Jkprl4zQFn3UtLfeDc9NZrxkm7s5g2kDh9mfmEhv4UlX5LWEjwLxi3wJR/Map4sX0nvyAxN\nbjs1b13CeM8Inirm0o2Xcfnlm1je2kp1VQWFiTjRiIFlqHCV2jSIRS2ikQjNDQ001NawoqWexppG\nTKb50oRidlMxJUfscL8CsSt3ARD4HB+7gbHEYXr/5RLuKbiZa4//nP6uDaRrKjm9vyl87UxLDrGc\nwg23Yhx8Cl27jO5kD0bvMJblUW4P8q2/SfKZH75OTbdJw6sBvRMH2PyXf8vAvr0hJRV+rtCRb26O\nuY1C+mWu4jMUbnqBmp9chvPIo6Rmp8iqalav2cD1119HW+tSCmIm+A6+a6N9BwIPIQIMBZYhiUYM\nCuJRigoTFCViREwBgcvP/hij8N23UR41sf7vFIrI5l3zkBSKxNAU2f2VPLmngEjDZla2T/P7J1eD\nnXsRUYb2O3h2gKnat/Mx90c8HanHWXo7n7omyb985FZwMwz/9gRnKuco6iklWQI9Rw7mcvBcMUK4\nYfqbp6tqElQ3WIeZuhLuek87D969kuV6JYn2LL4u4J5730Xr0iWMDvZw7uxJ+vu6mZ4cJZOaw3Uy\n6MCd38YjhUZJjSHDTdhOdobPP/gmL1pRkqUtjOw9SfGd70VQ9EmNUqAUWBGorobBM5C1wc+nk7le\nGWG0MHMrJgVF0NgM9qfA7Ofb27/Csw/9HevXQP9ZePit76JlxzbsvgF6fvNSSHnze47m9x75ISoC\nG5wZsGdBwAPH6zjd+pcEWx9m9NQSbr1tJ7ffvI2nHvkGe174KVJFCAJNc0MtzY21NNZWUFVenFuZ\nklgyQAkHpW0Msih3jBX39TF9aTdVlz/I6CvfAuWjMC7blY8C+B5MT0AqBV4AgZ7fKBZuoFY57y3C\nXhm0zL3A9eWTvHP1HA88fiVlhTOcSjXQeczmsRv30vPPkslHTzBem8otBy+CvMiASuYo6wQY2XDh\nJA4D1eUU3mwguuOMpeLce+/7+PRHdnJuWRMvTu/nTMxmZcpmZm6CweEBhA5fuhKBi+/a2NkkmdQM\ndmYO7Wcxlc9Ht/fx8h9c5K8OU9dbwGjzHAp12a6Q8wcLr5nqRetleRol8i13TQjQAVOxZXR2xnn+\n6OUQCPrlBspTL+I3KWLTczwjztFz3y0E2TcgHV2AvsjmFjrnciagF15xE5BuqaT6J68zUtCOX9DE\nbTfu4Af7/ovNr71GxYk6Rv7+VlbtPhbS4iAglRonahlYCrR2SM5OMjzcw9BwN052Gi87hp8e5eiV\nb+X875MYxBlrOoZCbgwREORaHg25nOwCgYVcUEr+vnSKIMghQ1lgRhlPjDE+diPJ6ih33XIDH539\nDs/X3UV2aByCTE4J2dyL0M4C2ZILTYkS1pydZF/ZFRhly3D2PUjZ7pc51V7MniVRGr6fwqgoJC4n\ngHCFKh6xKS6IUZQwSM+e55U9PRw8kmF2bpbLlqdZe24p/UPLiQ/adN4/TNNffIb/DzWrLAyfK23D\nAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "// used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "var i int \u003d 0,",
        "p cplx \u003d juliapoint if juliaset else c,",
        "zlast cplx \u003d 0,",
        "z cplx,",
        "znext cplx \u003d 0;",
        "",
        "extern mandelinit expr \u003d \"0\";",
        "",
        "z \u003d c if juliaset else mandelinit;",
        "",
        "extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "var color quat;",
        "",
        "while {",
        "znext \u003d function;",
        "not breakcondition(i, znext, z, zlast, c, p, color)",
        "} do {",
        "// advance to next values",
        "zlast \u003d z;",
        "z \u003d znext;",
        "}",
        "",
        "// return color",
        "color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "// if the fractal accumulates some values",
        "// like in traps or addends, here is a got place to do it.",
        "",
        "func breakcondition(i, znext, z, zlast, c, p, color) {",
        "func bailoutcolor() {",
        "extern bailout real \u003d 128;",
        "extern max_power real \u003d 2;",
        "var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "value \u003d bailoutvalue ;",
        "",
        "extern bailouttransfer expr \u003d \"value\";",
        "",
        "extern bailoutpalette palette \u003d [",
        "[#006, #26c, #fff, #fa0, #303]];",
        "",
        "color \u003d bailoutpalette bailouttransfer",
        "}",
        "",
        "func lakecolor() {",
        "extern epsilon real \u003d 1e-9;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "value \u003d lakevalue;",
        "",
        "extern laketransfer expr \u003d",
        "\"arcnorm znext : value\";",
        "",
        "extern lakepalette palette \u003d [",
        "[#000, #000, #000, #000],",
        "[#f00, #ff0, #0f8, #00f],",
        "[#f88, #ff8, #afc, #88f]];",
        "",
        "color \u003d lakepalette laketransfer",
        "}",
        "",
        "{ lakecolor() ; true } if not next(i, maxdepth) else",
        "radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "}",
        "",
        "escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "// this one is just here for testing light effects",
        "// circle + donut + green bg",
        "var rc \u003d rad c;",
        "",
        "{ value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "{ value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "{ value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings. * ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "var c cplx \u003d map(x, y);",
        "var value real;",
        "get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "var c00 cplx \u003d map(x, y),",
        "c10 cplx \u003d map(x + 1, y + 0.5),",
        "c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "var h00 real, h10 real, h01 real; // heights",
        "",
        "// color is already kinda super-sampled",
        "var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "// get height out of value",
        "func height(value) {",
        "    extern valuetransfer expr \u003d \"value\";",
        "    valuetransfer",
        "}",
        "",
        "h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "// get the normal vector (cross product)",
        "var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "// normalize np and nz",
        "var nlen \u003d sqrt(rad2 np + sqr nz);",
        "np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "// get light direction",
        "extern lightAngleToNormal real \u003d 0; // angle to normal",
        "extern lightDirectionAngle real \u003d 0; // 0 is to positive x.",
        "",
        "def lz \u003d cos lightAngleToNormal;",
        "",
        "def lx \u003d cos lightDirectionAngle * sqrt(1 - sqr lz);",
        "def ly \u003d sin lightDirectionAngle * sqrt(1 - sqr lz);",
        "",
        "// Lambert\u0027s law.",
        "var cosA real \u003d dot(lx : ly, np) + lz nz;",
        "if cosA \u003c 0 then cosA \u003d 0;",
        "",
        "// diffuse reflexion with ambient factor",
        "extern ambientIntensity real \u003d 0.25;",
        "extern diffuseIntensity real \u003d 1;",
        "",
        "color.a \u003d color.a * (ambientIntensity + diffuseIntensity cosA);",
        "",
        "// Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "extern specularIntensity real \u003d 1;",
        "",
        "extern shininess real \u003d 8;",
        "",
        "// r \u003d 2 n l - l; v \u003d 0:0:1",
        "var specularReflection \u003d 2 cosA nz - lz;",
        "",
        "// 100 because L in the Lab-Model is between 0 and 100",
        "if specularReflection \u003e 0 then",
        "color.a \u003d color.a + 100 * specularIntensity * specularReflection ^ shininess;",
        "",
        "color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "// two or three dimensions?",
        "def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "func drawaapixel(x, y) {",
        "0.25 (",
        "drawpixel(x - 0.375, y - 0.125) + ",
        "drawpixel(x + 0.125, y - 0.375) + ",
        "drawpixel(x + 0.375, y + 0.125) +",
        "drawpixel(x - 0.125, y + 0.375) ",
        ");",
        "}",
        "",
        "// which function to apply?",
        "def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "ambientIntensity": 0.25,
          "lightDirectionAngle": 4.5,
          "diffuseIntensity": 0.75,
          "lightAngleToNormal": 0.9,
          "specularIntensity": 0.5,
          "shininess": 8.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value"
        },
        "scales": {
          "Scale": [
            2.078784951010416E-4,
            0.001244225209285213,
            -0.001244225209285213,
            2.078784951010416E-4,
            -0.746085706071178,
            -0.10344568063745987
          ]
        }
      }
    }
  },
  "newton fold": {
    "icon": "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\nIjB1+H+mz84t7XY7VQAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "cplxs": {
          "lightvector": [
            0.05,
            -0.95
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm znext",
          "lakevalue": "foldvalue. x",
          "foldfn": "cos 2 arc(znext - z) * rad(znext - z) + foldvalue",
          "function": "newton(z^3 - 1, z)",
          "mandelinit": "c"
        },
        "palettes": {
          "lakepalette": {
            "width": 3,
            "height": 1,
            "colors": [
              -120,
              -56832,
              -16777080
            ]
          }
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "newton fold 3d": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "cplxs": {
          "lightvector": [
            -0.667,
            0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm znext",
          "lakevalue": "foldvalue.x",
          "foldfn": "arcnorm(znext - z) * rad(znext - z) + foldvalue",
          "function": "newton(z^3 - 1, z)",
          "mandelinit": "c"
        },
        "palettes": {
          "lakepalette": {
            "width": 3,
            "height": 2,
            "colors": [
              -120,
              -56832,
              -16777080,
              -75924,
              -9043968,
              -9994264
            ]
          }
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "newton gauss": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "mandelinit": "c",
          "lakevalue": "foldvalue.x",
          "foldinit": "0",
          "foldfn": "max(dist(znext, floor(znext + 0.5:0.5)), foldvalue)",
          "function": "newton(z^3 + p, z)",
          "bailoutvalue": "foldvalue.x"
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "nice 3d": {
    "icon": "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\nAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 3.0
        },
        "cplxs": {
          "juliapoint": [
            -0.028515096670653075,
            -0.8794912769816118
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true
        },
        "exprs": {
          "valuetransfer": "value/50",
          "function": "z^3-z+p",
          "mandelinit": "1/sqrt 3"
        },
        "palettes": {
          "lakepalette": {
            "width": 5,
            "height": 11,
            "colors": [
              -8225423,
              -15333299,
              -3768010,
              -16248048,
              -11081675,
              -6842729,
              -15882676,
              -9362561,
              -4346391,
              -5942668,
              -7990991,
              -16186225,
              -2199511,
              -5599400,
              -13394744,
              -12304113,
              -5972537,
              -13160649,
              -3641674,
              -2904036,
              -30584,
              -13765299,
              -12581103,
              -16711423,
              -65536,
              -120,
              -65537,
              -8648425,
              -1845062,
              -256,
              -5570612,
              -13943309,
              -986386,
              -9857404,
              -16711800,
              -5570612,
              -13943309,
              -986386,
              -9857404,
              -16711800,
              -7829249,
              -914634,
              -15184601,
              -9993246,
              -16776961,
              -15332331,
              -16538099,
              -7720026,
              -123963,
              -1068289,
              -9447318,
              -16448253,
              -12100575,
              -1159366,
              -4392592
            ]
          },
          "bailoutpalette": {
            "width": 9,
            "height": 1,
            "colors": [
              -22016,
              -13434829,
              -16777114,
              -1,
              -8512198,
              -12643577,
              -14666983,
              -14522676,
              -1
            ]
          }
        },
        "scales": {
          "Scale": [
            0.016838667646340125,
            -0.019964348102917053,
            0.019964348102917053,
            0.016838667646340125,
            -0.2560735815063657,
            -0.6902572214137942
          ]
        }
      }
    }
  },
  "nice lights": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "bailout": 512000.0,
          "ambientlight": 1.0,
          "specularintensity": 0.5,
          "lightintensity": 0.5,
          "shininess": 1.0
        },
        "cplxs": {
          "lightvector": [
            0.0,
            1.0
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value /99",
          "addend": "0.5 + 0.5 sin(2 arc znext)"
        },
        "scales": {
          "Scale": [
            0.0049287730937950195,
            -0.0018292142854582894,
            0.0018292142854582894,
            0.0049287730937950195,
            -0.7432631565774305,
            -0.13832178238756435
          ]
        }
      }
    }
  },
  "nice mix fold": {
    "icon": "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\noAAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            -0.667,
            0.667
          ]
        },
        "bools": {
          "light": true,
          "supersampling": true
        },
        "exprs": {
          "valuetransfer": "value/999",
          "lakevalue": "0",
          "foldfn": "/(1 + circle(0:1, 4, znext)) + I / (1 + line(-0.75:0, -0.75:1, znext)) + foldvalue",
          "bailoutvalue": "log(1 + foldvalue.y)",
          "bailouttransfer": "log(1 + foldvalue.x)"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            -7.398501576922633E-5,
            -1.1972007707768486E-4,
            1.1972007707768486E-4,
            -7.398501576922633E-5,
            -0.7410943845244385,
            -0.1721190322553334
          ]
        }
      }
    }
  },
  "nice newton": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"c\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"newton(z^4 + p, z)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "foldfn": "{ var dz \u003d z - znext; (0.5 + 0.5 cos 2 arc dz) rad dz + foldvalue }",
          "laketransfer": "arcnorm znext : (atan value * 2/PI)",
          "mandelinit": "c",
          "function": "newton(z^6 - 1, z)"
        },
        "scales": {
          "Scale": [
            1.202384385698616,
            0.5106766180397093,
            -0.5106766180397093,
            1.202384385698616,
            -0.0810472175438155,
            -0.02747823445407914
          ]
        }
      }
    }
  },
  "nice newton (1)": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"-c ^ /4\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"newton(z ^ 4 + c, z)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan(value / rad znext)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "foldfn": "(0.5 + 0.5 cos 6 arc(/(z - znext))) (1 - 2 atan(12 + /dist(z, znext)) / PI) + foldvalue",
          "mandelinit": "-1",
          "function": "newton(z^4-6*z^2-2 p z + p, z)"
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "nice phoenix": {
    "icon": "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\nRXEp/wfJPoVR13ec9QAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Slight variation of Default, simply added branch_avg in break condition.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "func get_color(c, value) { ",
        "    var branch_avg real \u003d 0; // sum of addends",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern addend_start int \u003d 2;",
        "        extern addend expr \u003d \"0.5 + 0.5 sin(6 arc znext)\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "            ",
        "            // and also add addend according to smooth_i value",
        "            branch_avg \u003d (branch_avg + smooth_i addend) / ",
        "                (i + smooth_i - addend_start);",
        "                ",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"branch_avg\";",
        "            value \u003d bailoutvalue;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"value : log(i + smooth_i)\";",
        "                ",
        "            extern bailoutpalette palette \u003d [",
        "                [#f80, #f22, #40f, #008, #080, #ff8],",
        "                [#fff, #000, #fff, #000, #fff, #000]];",
        "",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "    ",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "            ",
        "            extern lakevalue expr \u003d \"0\";",
        "            value \u003d lakevalue;",
        "            ",
        "            extern laketransfer expr \u003d \"value\";",
        "            extern lakepalette palette \u003d [[#000]];",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else // i \u003c maxdepth? then lake.",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else // bailout or epsilon? ",
        "        { branch_avg \u003d branch_avg + addend ; false } if i \u003e\u003d addend_start else // do some work here",
        "        false",
        "    }",
        "",
        "    // draw single pixel",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the drawing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 5.12E8
        },
        "cplxs": {
          "lightvector": [
            -0.667,
            0.667
          ],
          "juliapoint": [
            0.5666,
            -0.5
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true
        },
        "exprs": {
          "valuetransfer": "value/20",
          "function": "mandelbrot(z, p.x) + zlast p.y",
          "mandelinit": "c",
          "addend": "arcnorm((znext - z) / (z - zlast))"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 4,
            "height": 4,
            "colors": [
              -6739404,
              -8300468,
              -8876687,
              -13000350,
              -13639480,
              -2432513,
              -393987,
              -1058825,
              -4540173,
              -2168481,
              -13684475,
              -10009732,
              -8631756,
              -1280098,
              -10073724,
              -16448959
            ]
          }
        },
        "scales": {
          "Scale": [
            0.0906801810562914,
            0.0533164158858437,
            -0.0533164158858437,
            0.0906801810562914,
            0.3687694364999416,
            0.7219651117057112
          ]
        }
      }
    }
  },
  "nice sinh newton fold": {
    "icon": "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\nUpIbm+jyonAAAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 2.8
        },
        "cplxs": {
          "juliapoint": [
            -1.4027865514679811,
            -8.661198999787041E-5
          ]
        },
        "bools": {
          "light": true,
          "juliaset": false
        },
        "exprs": {
          "valuetransfer": "-/value",
          "lakevalue": "foldvalue.x",
          "foldfn": "/(10 + /rad(znext.x - z.x))  + foldvalue",
          "function": "newton(sinh z + p, z)",
          "mandelinit": "0"
        },
        "scales": {
          "Scale": [
            0.007238106080814334,
            0.0034921265360262983,
            -0.0034921265360262983,
            0.007238106080814334,
            0.3248590129991406,
            2.5400405995370208
          ]
        }
      }
    },
    "description": "2017-07-24_14-53"
  },
  "nice3": {
    "icon": "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\nvz6bN5kemwAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Slight variation of Default, simply added branch_avg in break condition.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "\tvar i int \u003d 0,",
        "\t\tp cplx \u003d juliapoint if juliaset else c,",
        "\t\tzlast cplx \u003d 0,",
        "\t\tz cplx,",
        "\t\tznext cplx \u003d 0;",
        "",
        "\textern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "\textern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "\tvar color quat;",
        "",
        "\twhile {",
        "\t\tznext \u003d function;",
        "\t\tnot breakcondition(i, znext, z, zlast, c, p, color)",
        "\t} do {",
        "\t\t// advance to next values",
        "\t\tzlast \u003d z;",
        "\t\tz \u003d znext;",
        "\t}",
        "",
        "\t// return color",
        "\tcolor",
        "}",
        "",
        "func get_color(c, value) { ",
        "\tvar branch_avg real \u003d 0; // sum of addends",
        "",
        "\tfunc breakcondition(i, znext, z, zlast, c, p, color) {",
        "\t\textern addend_start int \u003d 2;",
        "\t\textern addend expr \u003d \"0.5 + 0.5 sin(6 arc znext)\";",
        "",
        "\t\tfunc bailoutcolor() {",
        "\t\t\textern bailout real \u003d 512;",
        "\t\t\textern max_power real \u003d 2;",
        "\t\t\tvar smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "\t\t\t",
        "\t\t\t// smooth_i is interpolated here",
        "\t\t\textern interpolate_smooth_i bool \u003d false;",
        "\t\t\tif interpolate_smooth_i then smooth_i \u003d 0.5 - 0.5 cos PI smooth_i;",
        "",
        "\t\t\t// and also add addend according to smooth_i value",
        "\t\t\tbranch_avg \u003d (branch_avg + smooth_i addend) / ",
        "\t\t\t\t(i + smooth_i - addend_start);",
        "\t\t\t\t",
        "            // the next ones are only used in 3d-fractals",
        "\t\t\textern bailoutvalue expr \u003d \"branch_avg\";",
        "\t\t\tvalue \u003d bailoutvalue ;",
        "",
        "\t\t\textern bailouttransfer expr \u003d",
        "\t\t\t\t\"branch_avg : log(i + smooth_i)\";",
        "\t\t\textern bailoutpalette palette \u003d [",
        "\t\t\t\t[#f80, #f22, #40f, #008, #080, #ff8],",
        "\t\t\t\t[#fff, #000, #fff, #000, #fff, #000]];",
        "",
        "",
        "\t\t\tcolor \u003d bailoutpalette bailouttransfer",
        "\t\t}",
        "\t",
        "\t\tfunc lakecolor() {",
        "\t\t\textern epsilon real \u003d 1e-9;",
        "\t\t\t",
        "\t\t\textern lakevalue expr \u003d \"0\";",
        "\t\t\tvalue \u003d lakevalue;",
        "\t\t\t",
        "\t\t\textern laketransfer expr \u003d \"value\";",
        "\t\t\textern lakepalette palette \u003d [[#000]];",
        "\t\t\tcolor \u003d lakepalette laketransfer",
        "\t\t}",
        "",
        "\t\t{ lakecolor() ; true } if not next(i, maxdepth) else // i \u003c maxdepth? then lake.",
        "\t\ttrue if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else // bailout or epsilon? ",
        "\t\t{ branch_avg \u003d branch_avg + addend ; false } if i \u003e\u003d addend_start else // do some work here",
        "\t\tfalse",
        "\t}",
        "",
        "\t// draw single pixel",
        "\tescapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "\tvar c cplx \u003d map(x, y);",
        "\tvar value real;",
        "\tget_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "\tvar c00 cplx \u003d map(x, y),",
        "\t\tc10 cplx \u003d map(x + 1, y + 0.5),",
        "\t\tc01 cplx \u003d map(x + 0.5, y + 1);",
        "\t",
        "\tvar h00 real, h10 real, h01 real; // heights",
        "\t",
        "\t// color is already kinda super-sampled",
        "\tvar color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "\t// get height out of value",
        "\tfunc height(value) {",
        "\t\textern valuetransfer expr \u003d \"value\";",
        "\t\tvaluetransfer",
        "\t}",
        "\t",
        "\th00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "\t// get the normal vector (cross product)",
        "\tvar xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "\tvar yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "\t",
        "\tvar np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "\tvar nz real \u003d xp.x yp.y - xp.y yp.x;",
        "\t\t",
        "\t// normalize np and nz",
        "\tvar nlen \u003d sqrt(rad2 np + sqr nz);",
        "\tnp \u003d np / nlen; nz \u003d nz / nlen;",
        "\t\t",
        "\t// get light direction",
        "\textern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "\tdef lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "\t// Lambert\u0027s law.",
        "\tvar cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "\t// diffuse reflexion with ambient factor",
        "\textern lightintensity real \u003d 1;",
        "\textern ambientlight real \u003d 0.5;",
        "",
        "\t// if lumen is negative it is behind, ",
        "\t// but I tweak it a bit for the sake of the looks:",
        "\t// cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "\t// cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "\t// cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "\t// for a mathematically correct look use the following:",
        "\t// if cos_a \u003c 0 then cos_a \u003d 0;",
        "\t// color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "\t",
        "\tdef d \u003d lightintensity / 2; // will be inlined later",
        "",
        "\t// Change L in Lab-Color",
        "\tcolor.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "\t// Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "\textern specularintensity real \u003d 1;",
        "",
        "\textern shininess real \u003d 8;",
        "",
        "\t// r \u003d 2 n l - l; v \u003d 0:0:1",
        "\tvar spec_refl \u003d 2 cos_a nz - lz;",
        "\t",
        "\t// 100 because L in the Lab-Model is between 0 and 100",
        "\tif spec_refl \u003e 0 then",
        "\t\tcolor.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "\tcolor",
        "}",
        "",
        "func do_pixel(x, y) {",
        "\t// two or three dimensions?",
        "\tdef drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "\t",
        "\tfunc drawaapixel(x, y) {",
        "\t\t0.25 (",
        "\t\t\tdrawpixel(x - 0.375, y - 0.125) + ",
        "\t\t\tdrawpixel(x + 0.125, y - 0.375) + ",
        "\t\t\tdrawpixel(x + 0.375, y + 0.125) +",
        "\t\t\tdrawpixel(x - 0.125, y + 0.375)\t\t\t",
        "\t\t);",
        "\t}",
        "",
        "\t// which function to apply?",
        "\tdef fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "\tcolor \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the drawing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "bailout": 51200.0
        },
        "bools": {
          "light": true,
          "interpolate_smooth_i": false
        },
        "exprs": {
          "valuetransfer": "value/19999999",
          "bailoutvalue": "i+smooth_i",
          "addend": "0.5 + 0.5 sin(2 arc znext)",
          "bailouttransfer": "branch_avg*6"
        },
        "palettes": {
          "lakepalette": {
            "width": 3,
            "height": 5,
            "colors": [
              -16777216,
              -16775353,
              -4203956,
              -4203956,
              -52179,
              -9085757,
              -6161034,
              -4014018,
              -16777216,
              -1120529,
              -16777216,
              -65730,
              -2621480,
              -1120529,
              -35944
            ]
          },
          "bailoutpalette": {
            "width": 8,
            "height": 1,
            "colors": [
              -16711621,
              -15,
              -1,
              -7783841,
              -4426,
              -12713896,
              -7143390,
              -1074
            ]
          }
        },
        "scales": {
          "Scale": [
            -1.275140806317907E-7,
            -3.084483757456835E-7,
            3.084483757456835E-7,
            -1.275140806317907E-7,
            -1.7465254311194451,
            3.5628061356917815E-6
          ]
        }
      }
    }
  },
  "nova": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"c\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"newton(z^4 + p, z)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan(value / rad znext)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "bools": {
          "light": true
        },
        "exprs": {
          "mandelinit": "1",
          "valuetransfer": "value/99",
          "function": "newton(z^4 + p, z) + p"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            0.38578808823407,
            0.0074586981651921114,
            -0.0074586981651921114,
            0.38578808823407,
            -0.458733185727037,
            -0.023538319929681008
          ]
        }
      }
    }
  },
  "nova branch": {
    "icon": "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\n4P8B4U8vvU9jG94AAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"c\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"newton(z^4 + p, z)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "mandelinit": "1",
          "laketransfer": "arcnorm znext : (atan value * 2/PI)",
          "foldfn": "{ var dz \u003d z - znext; (0.5 + 0.5 sin 6 arc dz) rad dz + foldvalue }",
          "function": "newton(z^6 - 1, z) + p"
        },
        "scales": {
          "Scale": [
            0.49624524633762646,
            0.0330597451443778,
            -0.0330597451443778,
            0.49624524633762646,
            -0.4961940254698633,
            0.045697624036008494
          ]
        }
      }
    }
  },
  "nova with mb": {
    "icon": "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\nl/h/Dr6wgxrkQDQAAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"c\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"newton(z^4 + p, z)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan(value / rad znext)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "foldfn": "{ var dz \u003d z - znext; (0.5 + 0.5 sin 6 arc dz) rad dz + foldvalue }",
          "mandelinit": "(-c)^/4",
          "function": "z - (z^4 + p) / derive(z^4 - 1, z) + p"
        },
        "scales": {
          "Scale": [
            0.5893974000828406,
            -0.029669701274943283,
            0.029669701274943283,
            0.5893974000828406,
            -0.25539986694115513,
            0.01377168072800282
          ]
        }
      }
    }
  },
  "old fold": {
    "icon": "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\nAA6gye4AAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    // This fractal is defined by z - R * f(z) / f\u0027(z) + p",
        "",
        "    extern R expr \u003d \"2\";",
        "    extern power expr \u003d \"6\";",
        "    extern argument expr \u003d \"c\";",
        "",
        "    extern mandelinit expr \u003d \"(argument * (R power - R)/(R - power))^/power\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"z - R * (z ^ power + argument) / derive(z ^ power + argument, z) + p\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan(value / rad znext)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "laketransfer": "atan value",
          "R": "1",
          "foldfn": "{ var dz \u003d z - znext; (0.5 + 0.5 cos 6 arc dz) rad dz + foldvalue }",
          "function": "newton(z^3 + p, z)",
          "mandelinit": "c"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 2,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961,
              -1779011,
              -13281720,
              -1909520,
              -14907558
            ]
          }
        },
        "scales": {
          "Scale": [
            0.8949990934523657,
            0.34890699060693187,
            -0.34890699060693187,
            0.8949990934523657,
            -0.11317345698741899,
            -0.1739317230670273
          ]
        }
      }
    }
  },
  "old light": {
    "icon": "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\nF7bg3WrHKQC1AAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "bools": {
          "light": true
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "p exp sqr z": {
    "icon": "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\nBUYeiMVpJjImAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 500.0
        },
        "exprs": {
          "mandelinit": "0",
          "bailoutvalue": "log(20 + i)",
          "function": "(exp sqr z) p"
        },
        "scales": {
          "Scale": [
            -0.03100912481804466,
            -2.322629682298259,
            2.3503376942132563,
            0.10444133980235885,
            0.011265104126146647,
            0.21314180311767322
          ]
        }
      }
    },
    "description": "2017-08-01, 11:55"
  },
  "pendulum that takes the whole night": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Pendulum with 3 magnets",
        "var x int, y int, color int;",
        "",
        "func get_color(c, value) {",
        "    extern pal palette \u003d [",
        "            [#fff, #fff, #fff, #fff], ",
        "            [#f00, #ff0, #0f0, #00f],",
        "            [#000, #000, #000, #000]];",
        "",
        "    extern stepcount int \u003d 250;",
        "",
        "    extern stepsize real \u003d 0.05;",
        "    extern friction real \u003d 0.07;",
        "    extern gravity real \u003d 0.2;",
        "    extern height real \u003d 0.25;",
        "",
        "    // here, strength is the same for all.",
        "    extern strength real \u003d 1;",
        "",
        "    extern magnets expr \u003d \"[2:0, 0:1, -2:0, 0:-1]\"",
        "",
        "    var len real \u003d 0;",
        "    var pos \u003d c;",
        "    var vel \u003d 0:0;",
        "    var acc_prev \u003d 0:0;",
        "    var acc \u003d 0:0;",
        "",
        "    func do_magnet(strength, m) {",
        "        var d cplx \u003d m - pos;",
        "        var dist \u003d sqrt(rad2 d + sqr height);",
        "        var factor \u003d strength / (dist * dist * dist);",
        "        d * factor",
        "    }",
        "",
        "    var i \u003d 0;",
        "",
        "    while {",
        "        var acc_next \u003d -gravity * pos - vel * friction;",
        "",
        "        for magnet in magnets do {",
        "            acc_next \u003d acc_next + do_magnet(strength, magnet);",
        "        }",
        "",
        "        vel \u003d vel + stepsize * (2 * acc_next + 5 * acc - acc_prev) / 6;",
        "        var dir \u003d vel * stepsize + sqr stepsize * (4 * acc_next - acc) / 6;",
        "        len \u003d len + rad dir;",
        "        pos \u003d pos + dir;",
        "",
        "        acc_prev \u003d acc;",
        "        acc \u003d acc_next;",
        "",
        "        next(i, stepcount)",
        "    }",
        "",
        "    value \u003d len;",
        "    pal (arcnorm pos : (0.42442 * atan log(1 + log(1 + len))))",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "stepcount": 1000
        },
        "reals": {
          "friction": 0.1
        },
        "cplxs": {
          "lightvector": [
            -0.667,
            0.667
          ]
        },
        "bools": {
          "light": true,
          "supersampling": true
        },
        "exprs": {
          "valuetransfer": "log(value+45)"
        },
        "palettes": {
          "pal": {
            "width": 4,
            "height": 1,
            "colors": [
              -16777088,
              -256,
              -16744448,
              -65536
            ]
          }
        },
        "scales": {
          "Scale": [
            2.0,
            0.0,
            0.0,
            2.0,
            0.0,
            0.0
          ]
        }
      }
    }
  },
  "phoenix fold": {
    "icon": "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\nfOjUf8sAAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "bailout": 1024.0
        },
        "cplxs": {
          "lightvector": [
            0.667,
            -0.667
          ],
          "juliapoint": [
            0.5666,
            -0.5
          ]
        },
        "bools": {
          "juliaset": true,
          "light": true
        },
        "exprs": {
          "valuetransfer": "value/10",
          "foldinit": "0",
          "lakevalue": "0",
          "foldfn": "(1 + cos 12 arc znext) / rad znext + foldvalue",
          "function": "mandelbrot(z, p.x) + zlast p.y",
          "bailoutvalue": "log(1 + foldvalue.x)",
          "mandelinit": "c"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 5,
            "height": 1,
            "colors": [
              -16777216,
              -65536,
              -256,
              -1,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            -0.04544637024070988,
            0.03854807602516508,
            -0.03854807602516508,
            -0.04544637024070988,
            0.18629205657718195,
            0.4896076224990113
          ]
        }
      }
    }
  },
  "precision atan": {
    "icon": "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\nxf8F180wC6DSGj0AAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "bailout": 5000000.0
        },
        "exprs": {
          "mandelinit": "0",
          "bailoutvalue": "log(20 + i)",
          "function": "z * atan z + p"
        },
        "scales": {
          "Scale": [
            0.007759055507129738,
            0.0035270402942911387,
            -0.0035270402942911387,
            0.007759055507129738,
            -71.79064471668043,
            -5.464781050771781E-4
          ]
        }
      }
    },
    "description": "2017-08-01, 16:34"
  },
  "precision exp": {
    "icon": "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\nZuv/g/H5/wGzSBRBIAKidwAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 500.0
        },
        "exprs": {
          "mandelinit": "0",
          "function": "(exp z - z) p"
        }
      }
    },
    "description": "2017-07-31, 20:24"
  },
  "precision exp sin": {
    "icon": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAGm1JREFU\neJzNm3t8FOX1/9/PzO7Ms5dkcyPBEEKCAQG5RDGAchFR+YpgwRsgtUKtRW2tYNVWUTR4AVpbxXqp\nIni/tlbxAuIFxIIURCoXFUUIAUMCISGbZLM7szszz/ePJNZv608hwO/V83rNXl67c57POXOeZ+Y5\nn3ME3yfd56rv/f37pGKWME2zRQhRq5Q66A16bMvd/7Ohv6/PbR/dfEnB5KxuPa1EZXXn47PdRZ9H\n7SuUUjz28m2vr3113Y/+kXHPIK3ihY++fPceUif9GbH7RUTtynKlVNi27XKK765CiIyO4vr2V63D\nBn6/LADwPO80pVRUCHG9vmH6OTe/nHfHrCldrwoO//15B3dvD8++IsIfX3p9j+aklbquW1qW5p79\n+LNvP7i/7r0Zn781n1T/P/fTNkyH/Ss2ua67RAixFGhh1y2ZRwuo+N5fOxoB//JyREq5ybKsYiml\nsixLGMOfVgAejHRWX/aBlFLlJ363adqyHqW3jT1XSCmnemULnwTQNkz/D9WWZYmjhA34vgjo6ABK\n3WYYxhQp5QsAlmWdZppmBYCU8hud2fldLu3Wo/uz2TlZzNnVddofpkym08SVE5VSF4C6p+1c0fYe\nsSxLeJ43wTTNdwOBwKmk3JIO4et+t/3tr98dAUc499s/muHcq4XT9HC7IVLKqcCT7b9fclE663eP\nebJ/mX3bC+VXjMornvykmYxxIPUvdZZliTbHlSulwsAO27YfBaB47tsIRh82xqQMUvXrBHxXBBxJ\naFXMEmbuyUpKqUzT/Cua1s9n+Bb4hz01Q0qp3FMezXBOnHND+ynLq7pRseGlVWP+OGPPqS889+S8\nu367t8Hn+0alV7bw2yOUX3DTtSWANE3zOtM075M1d6wDMeiwsRpWnOK5D0B7BHT8iu+gYlYPwzAm\naZr2IjASKHf73Ppp6p+3/soona30XYs4e4DknY9qvjHogsHvjFv++Jt3WXGr9JZFD3Fmv42MHvbM\nqsvnXj9y9W6bbQ/dV2UlrK7t60XbWjDSC+QN0xL711iWtcnofVVUVDwxUyklk8nk7yie+z6CkYdr\ngDgk45WKGnvnzE8mk3+sf6HzzuxbBw+Te99+2us6caTMLnve3nLrJDve6AsNucdxNpfrZ48t461d\n54zL/vr3z0657tL0hHmhVtfyaPRvs5/PBDBNs2Hqo2dmLH96QKJhy0OBHx9YjIkXfTQwNcMIpT8/\ndfLYKQ889ESGf/hTlfqGK5t6dM+7+bf3PvbcTTde++MDVannRGIvwBql1HPAQNu2rwTSfD5fP8dx\n1rfZZX+PRf8SKaU6lCMQkKq4sFB1DkkVyczY3Xv025NkJG/x0IvnqVE3va06/egF1av0VLVp06Yr\nDcNYLKWsyZv03u4TRvRXJ1//xat5k1cqKeUzP3/uzRTQNZBVqMbed4Xqd8Z0VRDsNia/e1d1i1rR\nLTu789TcySsapZSnm6a5WUr5j7zJK3eNnvZLNf7Ci5WUcnVJzxMag6GQklLu+p9LfqKueKi5N6c9\n183sPHSMb9jT10spu5kDZteYprm51yUvKNM0W6SU3UzTfNQM5SmK7+omCn6h6D5XHbID/l9HKCBV\nJDddZQb7qXOLA+qp+WeNjwSOU931ggOBUPpLT6xd9HZabkRJKVXe5JWqqk49kzd5RUxKqcY9dP+M\nGR/eo25Uf1Ez1auqy+DjVE6gp5JSqp6XLlVnfLJgSt6kFS1SSpVXMmDbyCt+oqSUP8/OzFClJWnK\nNM0ZoWCG6jHwXPXYu2r8iTlyZXpargqGAipwiPjbV9gjFgH4fQIzW4LMJRg/nW6JVdaj+h45t49k\n6boM4mrfi51Omjp5xtrTLKc5/cWmtNppCXwk8JPEj4sBruT8yuHLd9Su6vX5xpM7P3fD8Y8EpD7T\nTB3PjGHGF3f8/TN52pmRoirCxKs7k/hiC0ndIeUq6IAlR80B3ygUAk0YhMjiZL2O3tkWgwekGDkC\nim6RmOHc6bceuPK+RvyhZgxaMEjgJ4EfBwNSEsMK0qP+IPf2+mnLwwc+e05Grp5eoWJE/dtI5bfw\nadcIm7dbxOMeylF0yPJ2vEfbAQACgV9AxKcoytQYeKKf0WcL9tQkiVx2IxV9E9QToBFJDJMWDFrw\nk8SApMSMB0lvSqdPJzju5gAf3r+SGCuoD33GQS3KQQRxF1zVsav+bfH98F8OXxQKB4gpwV5HQ8Z8\nZEZNJv3SZXW3L4mTSTPQjEYzGi0IYkAL4CAIKA0nafDV2lzm/6mATM1PuqFhKz+Wq5NULt5Rumy6\nz+crPzqq/k0EKCHwdIGrazghP415eSS7hanVQ9Rj0IiPGDotaDQDB4G9nke9A4YlMPYL8r1q7OhH\ntCR3YXlRUiTxlDrSC/+NHJMIgNbI9BTYKYjGYdd+HXuTJJwlsHtpRNN9NKNhA0k8Erg0oUBzcQ2X\n7YaFq9UQ6lKNVlAJTiNeLNk254+eHDMHoEAJcBVYjqC+RSe534exx4ed6aPJ7ycR8KOhYyAARRiH\nBl2BzwItyU5flOPSqiDzAG5dHGU7KE+hPI547rfLsXMA0DoPNFzlw04ZOIkAVlOAhlgQrCD4DfAJ\nMlFEUARxycLB0x3QWxC+gwjZSCoYx5EOmk/hJVs1/9dPARAIJRCuDz0VwGenY8ayMJtyUE3ZRFvS\nwa+BdDF8DmEcQigMUpiahT8QxwvHsdIsmtJcGoOAAcoC1wP13xwBou3Q0NG9ILqVgdGSR6i5gEC0\nkE7RzsQbJTFfCrQk6T6bbCzSSRHAIYBFMC2ByE0Sz09Rf5yHWQtakwa2wPIUSh0dJxwbBwiBKRQB\nBIIMHLsQr+l4tIYeBOsLCdZmotI8UroNhkVQJsjUfKThIhFIkqSJBIHjLJJNKQ42emTFBHttHzUp\nj7pkipircBEc6f3gqDpAIND8GuGgoCgIxbWKhngXdlHKzgO90DKLyDyQS7BGxwwn0QM2RtAmErTJ\nkzEkHhpN+FEEsYj4WzBL4lieRZ3mUW3qfK1gZ6PHFylJIx4eKdQRhMIRO0AAwq+TKcFpyUaOLWFA\nYDvn9nZIjDlrnN0v/80Ag9junMieA9l0rTPw1bqojE9w3l9ZNfTB/gXeFptgTiYH9waJmln412+j\n4Jc+srDJks2EetXjhnUSmZAINpFxACZ8fgFuZDvquL24VU0kbA+PDjwZmqZpm6bpmKHM1m1vWnbr\nuwyoSHq21zUjRy1+6k41+7Y5KiN8otq6dbWSUqra1B9WX3vrApU3eaVq2+qq7FCuyp204uoBabe3\n77Z2PxMd1NDnsivV8FCeuuTSi5JSSpXbPUuFw8HVL+5+Xb1c9656Ofp39VLjWvX8wXXqyZp/qIU7\n/66CoZD6R4W3OxiUKi8v/80FFwbm7a49W4XNHPXGugYlpTz9hHC6+uVs1z7l1NNUwDQb8nsOHjam\nJHJ1p85pKhAIKSkDP7wbPOxskKKSXbNGSCk1YBUQVlrgMjXw/mXahulkZvrqbj+r+7Mz39MX0LCt\nctWXG7nk3POn1+zcs9DM7Te9+0XPzBp9fm3Rab0a8YWCKMPA0fw4+HA8H25Kw0ko7KYkM3qPIJjR\npeqfKx4vOOHk0chwFvcvXObMvuEy34FolLdXr77joknX/jq6/a1B/S9++vMv3rqR08fcwYq/XQ2A\n12NG/7TjCrfE1t39jt/wfe7EamcW/3hp0c5nxqQDffRAzin/NylafHcFQhQflkOcg/9kzx/OkFI2\nKqV2ET5exxd4VzR+9jO/oS3VVc5YK1U7TynVWym1/pnpPeeZt99JKL3V+AQCCw0bX+tu0DHQUgZe\nHBJ1MR6++3G+emnRhIwL3i7t4bxh7t61d0b9tmXvKy81VuWdyagLJv/zvQcvv1zX9U2e5z0uhChV\nSk1NFpTfCUz4IfjfnRUunvsWgnMOyxEAFbOElPIJoBLgpvHOTfNf80mvbGF7Xu8Ly7KGrIwtieoh\nSRxFM4pmNOL4SWGipYL4kwH8SRMVc1l4yVA+29hU3jvHX/5Z8UMMH9yT1Ws2l+ubZ5QrxTpgefvw\nVv7tgCo/HMhHnxhppcTuA4ps254GNLZvuaeOCnLmz7pSML4cVxc0kaIBhwPAQQwswkgrQshKJ2gH\nMZI6bz18DZH5w1kTmU21rdq5Ap+U8l3P836VTCY/9fv9A1Jd52w6bKz8EDXWpKcftsbuc5Vt29cJ\nIYZIKbdIKZXXfy7h0U+UmyPSCZ+RxNAcfCTQacThAI3sp5I6vlLN7E84NMc0rBYfKctPVmgIK7tG\n8E4agVu2cDqAlPIrz/MWCCGmAtkdMl6xj4pZ4vsjoM2gw1YONhWzJBAxDKNg6cM/Wn/epoOh4ufX\n0jCohPeW3YwjbJqoYy91fEaKlWSyvamIUV/3oGs8nywtRFAXbBtw257XSj4ojNV+jZOyUugBvx2P\nZpimWWnbduaRUmQ/TI7+G5d2iGL6/f4BAJqmLTr7ipe7WQ+uFLvicGbIs7LeWeaEcMimmS7spBvb\nMT7ZTmRNFLU6E2dLDu6+NLxGH7vHl17bVL0D17FRBRP8wrMqpZRRVTipY+wwQEXJN88/x2wzlEql\nNgMGsNA0zfXAA17ZQv5ai1y5OHvmwfEXDNtr3XZRF/bg+3oPtdcIUvv2s8Z/IeOGBMkZpfjolT1U\nfDFvpFu2EPa9h/b1X1BKLbBt+0m+ejrccXQT3fZPx3Q7LKX8iVLqFCGEXyk1re1OMM0ccfOTd9w8\nm+yv68FwGVy1n1PjAar31FDiVNA9P5ceXzXy/gtTnt/j7b2CPPbgCxYCCCGipmnW2rZtHg2MPxze\nxXP3Isg/bM2td4MGPZhX7SVq+5z2s9dYu3g8mjD4+5tXbx0YMPuhaqBpC2xbT/PzUPFxIYqL4NRR\naAPzcXI8XmluLPrTkxMqUy0pvJMWoH0yk7aagwyl1I12l9vvOXxsSR3KPTiUNaAjxrcVSAghMuIN\ne070Tlm4ZO3i8VT87ddLrilzqHmjuh9NHtTqUJUFNSeQFs5mQFc/J/Sqplv2l+SoPaR7jVwW0CtH\nJAIUjP5R+cs35QMUidbqkFW2bf+hA9igu/HNFPh+B3R8hb3bNM1PPM/r5/f7B4gNPy8CmPibhyZM\nnB1kzGndIaZBLADxTqAfD136wslFBPpI0jolCMkoAdGM629Aiz9D1rLG8srdu7Esa3dbrcAjpmn+\nfux5J77eIYyF8wbC902BDhpvVJXfpGlaL8uyftpeFQKtHGTklC588bwWs18eH87LTQPLhlgLRFsg\nmgRbBy0TZXaiRebQYoZpUB5P1ZXx0tYZ1Kx/H694GqLiiSTwI5V3xr1a7ap7Lcta3CG8So3+7vqA\njj4B7p2zQNO0sFJqk2maX0WCakEwFNllmuY4N3/cgpYt+xi14PXk/b9egkoAngkiDcxsSM+FzFyI\npOOFDDA9lGajlMXO6tMX16x/f51SagE5pyGEMC4548LlYv/7C5VSE03TvJGKWQLFjYeFWYh3Dn83\n2C6KVWb1nCtU95/uUDsWl+q6vsnrcc2O5NY/9Cgc/5jad9AkWHnjqrf+smTIzoWv7nhF+Pt+GD+T\n/S+OEmXHp6l3Z1xHWPOhewKSClKAq6GUn6SQxDFodGDVkiT958Q594XBNC45F2CfronO/9gcH1l2\nSuEq1f1ny8Xn84YJIT52XXdmKpXaB+w/VLu+kxoTba+e8hrTRj0c0YKdcCvfQIW6tiS2PhbCiTcq\npbZ6ydjSPtdsmvPIVZ2NIT2zRCB/8DCzYOjqxOaHokKITyMTlg1L/3AM1VFzachLjjWzDaacpPf/\n3WsNW4OBYHPFnOvDYc2PoXSE0lCeRkrpWK5OzAWldJ4qGOW9simhnfNFWcb9a2R0KFn8dc/KxoLC\nk7e6yn3FQM5PYemWbWcbw5+Oik9u+AWpxp52sEs5DRURoLHtMCm+e9+/l9cdETcoAE2ACJiUCJtk\nF/OsxuqR71U9trfp0fUV6SfdMphxJ2x1fjvpTt+iFedSsyODK7SzeLpTHfktlUsKCgcdfHDC0Mv9\n+NHxgdJIeQLLFWytrWH6316q7KuXFO23NxLQ0qKld3bO+Oy24qpK54P8yY3TPno+c1GfEedM7l+R\nc+2imteGnxWrTdI1q+9VlfWfDuraPXD5w09UcOWYAmIYNFs2eN5/JIyOKjkqhEAoH9n+FDmFksKh\n6WzpO5HIG3l8vaUb9fuLOJc0hhGjNwcoPK6e7L4OWzt9xYCe2aRo4u6Va1k8qWgJnbZPILITsqqg\nE3jSx5fNIT5tiPBZKo9nH0ncGn99yF2Z9nqOO24nm1s04s2gcA4rW3xs2GEBPp+GP81Az+yEbCwi\nWV9CJFFEGRmUoehNE104SG5BM5klNr58FzJSEDgIwVoIV0NGNeQAQfgqFWJDbTobKwVbq/x8uddP\n06YEqVgMsPHoWJr82LDDChzHw2lMojfX4XguUrSQ5qtGd9JQ+NBw8NOCXhVHkza4SYg6EEhA8CCE\nqiEd2A9fA1tbYEutw7Yq2L03QazeIWm5qCMkSo8dOaoAV+G6SYRoRIgUwleP40iS+HEADQeNJKrG\nAd2FhANmEoxo6zYqAA1+2OHCjrhLZUOSfQ3QHHVJJVqLI/6reIH/FAV4gIUiheuL4QQ03ISGonUR\n1VGIFiAmWjkvfxKwALAF1GhQDVQnPQ5YKZoSkLTBc4+sMqRdjrEDoBWkC8IFHYTfw6+7mDEXA/AD\nmm5Aymi9pdgO2KAaoCUFzQIa0wRNfoh7HkkHXJf/bmrs/4gAhED4QA9AOARZfpccGyKNIG1ApsCn\ng9LB0aDFwEk5OAiUMlFNBm4AUj4X13Px1NFjR/8/RAAIHTSpE8jSyevq0ic7SY8YBA4ATUCylUbH\n1QENdAOFjo5JkDTCpKEnFG6gEVc04pFA4dI6vY5Mjq0D2q++ruEP6oTzDQpPFQwZFoMVwA6gHmgJ\ngC0h5YOkBp6OFjPweWHSyaUL/UkQIeZ9TErfjsAFYbVWYPw3L4ICgdA09IAPM8tPuNBP4EQP1R3E\nR9mQ7YLnA90AywdJvdUBfj8+v8RoSCfclEU3X4QXnTHk+hrxm/V4xPCcJJ7jtVaLHIEcMwe01gjo\n+MwgvnxJoMQg2NuHW6xwCppLPyh6atNZdb+BNK/13z4BtgamDtKAoMTMTEOpEPoJ5q5Rm/3F+yOF\n2OxBJaOIBhsn6uIkOSJ2+JhUiWmaICAgKIL4UqPRLutE9oAQXUpDGA/k1o2bXp1+bU7fd/KOt4YR\ndQATNAk+CX4JRgBkGBEM03frW9Nmf/7OZ3++bnN8daq0l+oLVlGSgq4ekVgcu9nBcTs+EY6eAwTo\nAny+MBn5Pk7yOfSIB/hU37SgzEocWP/41j/veWPfOW9v2hkMjn72rzPHLb807+o3HgwPmXD6ENEM\nmgG62eaAIASCNPYqJtvvjtrpZJ/3p9f/ObNh53uX2hsSLL37TOzafjuKkmuzqHVQyVxa9BTgHbYn\nOtw0JYSGbvgxRZDfX5AicskARg3Kxw1k76v/Os4nw5aWrs9oYUyXyMzVG6vWCyGid40au0oBB16d\nMP+ci2svikxYdtvNj/yZn1Rvo67nsJGE0iGUxtzepWSvWE/nBxZw7U5zusrNqoucv3xIKuUR0Tdb\nQ8+6e/kDC+4vqWgoY7Pnp7T83Y89x2HMsBM4XkYwQj7EIeR7W6U9A3RIx/yIaZoNpml6pmmONU3z\nj1LKqe31BWbm8crofZXKyulynX/Y0+8/+q6K5IxZ3M7Fz3v06slTctOCrmma3nkDT0mZpnlV3uSV\n6qRff9FgmmbDlptvPvWOceer1Tf89uH26nLDME40A6GYaZoNnS5aliwu6aFobcZ6XwbT1Zn9B7eY\nptl08KxHI6ZpfiKlnPr8m+utUP7JyjTNaN6k93bnXvj6q1JKlZaW8eaHm3eqQEB6pmmmWusDvi3F\nd3VDaJWHHQ4VswwpZRKoVko9rwrOn67tXfJ5ZqeCQQ0HqjSAk8feGr38F7eUlk8sqKxtPtCfwYu2\naBumH1x4a1nWwPOGJQcOuc9IjD8T3BihNzbcMY8rRz+U+dKQ9NIfD9vc3Ped1Jqp+TPvWlft//De\n0Se8bS67xvhruu7pj3dKMy6vicU3CSEyPM87V9O0QUqpvkKIGyzLKvT5fIVO1zmXARO/q9fwqCdF\n2yjyy5VSfqVUs6Zpz3med3NG557zooW/WaJ9PH1Ce+tMiffuLNX48dxYhY/Zr2/h549cwL6SErZl\nnshF836B7NN3af3GzWeoQY8FobV15oxeA97xFXUd+saSl8NtLHR/pVQl8DqAEKIkmfuLqcrfqd+h\nwP3+iVLyJxMvZh22E5RaJ2vuXG5Z1nxam5zWjbhs0b7Vz/x8JLR2gvmHP/2EvmH6NIBsQ3DLuPFY\nonjftYM3rtOX759wxtovWdc28qW/feaLRXMu7i2lVNaJT2cY0b/t0/a+Nr9ttCJgmmVZguK5NQg6\nHw7UQ1spjoyB7SSlfAN4i9bWtzhwcVsXaKv6oUN3vTJ0xHX95t1V+XJvWTp79PqN+xYN39pstXyz\nqKusU7Cr13yTYlfh7mvsus+HHynGQ7sLtII+fCm+pZuU8iNgcasaFRdCBG3bXmZZlvDKFuKVLWTX\n2rXFp28fvuRXI3otWTFi2pMHHh+3NSun2zpPqS1e2cLWooj6DTPbslddLMvS7LrPh0spfwpkd/gC\neWrmoT0J7rol1KFBRKiynRgxTTNh23Zn+FcHaftTbCKRyEhTVG5xMovMJ/clU2ffe9OuZZO222WP\nbTVgtzH0qSli45UL2s6tsiwrQ0oZ/aaNtqNSecv9x6p5+j9ECDFfSrlEShmF1qZIbcN0+oimaYAz\ncM+UjPc++Hv4vAemrWxaOnHPvM6pu+TH03c/cqVE23jlc23GrgFGSimXuK5bChxZlyvHrnv8GzFD\neWrwKQOVlz34HBUq7ApUqrwzyejS5eXMvhM/2Lb++imvbFBrNPlLpJSxmVdfeI6maS9/OPn1UiMY\nmfnGp3mPG8efv/PSebNuV5H+w4BKpVSpEOIc0zRnHCm+/wVrwh2LuWacPgAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 500.0
        },
        "exprs": {
          "mandelinit": "0",
          "bailoutvalue": "log(20 + i)",
          "function": "(exp cos z) p"
        },
        "scales": {
          "Scale": [
            -0.03100912481804466,
            -2.322629682298259,
            2.3503376942132563,
            0.10444133980235885,
            0.011265104126146647,
            0.21314180311767322
          ]
        }
      }
    },
    "description": "2017-08-01, 12:39"
  },
  "precision exp zoom": {
    "icon": "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\nns4+uQAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "bailout": 500.0
        },
        "exprs": {
          "mandelinit": "1",
          "function": "(exp z - z exp 1) p",
          "bailoutvalue": "log(20 + i)"
        },
        "scales": {
          "Scale": [
            -1.436236487303484E-6,
            -2.563752350435977E-6,
            2.563752350435977E-6,
            -1.436236487303484E-6,
            1.1865100265455037,
            0.2617298414306753
          ]
        }
      }
    },
    "description": "2017-08-01, 16:51"
  },
  "precision exp(1)": {
    "icon": "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\n1BT+L1KlXW/FnodbAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 500.0
        },
        "exprs": {
          "mandelinit": "0",
          "bailoutvalue": "log(20 + i)",
          "function": "(exp z - z) p"
        }
      }
    },
    "description": "2017-07-31, 20:28"
  },
  "precision expmandel": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 500.0
        },
        "exprs": {
          "mandelinit": "1",
          "bailoutvalue": "log(20 + i)",
          "function": "(exp z - z exp 1) p"
        }
      }
    },
    "description": "2017-08-01, 13:29"
  },
  "precision log": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "bailout": 5000000.0
        },
        "exprs": {
          "mandelinit": "/E",
          "bailoutvalue": "log(20 + i)",
          "function": "z log z + p"
        },
        "scales": {
          "Scale": [
            -2.4208342967435915E-7,
            3.0209437773278564E-7,
            -3.0209437773278564E-7,
            -2.4208342967435915E-7,
            1.024034576898304,
            -0.44729118597637285
          ]
        }
      }
    },
    "description": "2017-08-01, 15:52"
  },
  "precision power": {
    "icon": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAIABJREFU\neJyFm3ecHVXd8L/nzNy5bXvJJrvZZNMgpJAQIImBkIC0INJReUSKogiIxkdELA/Fhj74gogiSBMp\n4oMoJUgJPQRSgBRSSC+7SbZk6927t83Mef84Z+beDYjn85mdvTOn/Ho7Z8TRl/xUff+o5/jil9o4\n7dSZvPRWPwx1QFUjXYmDWGSocEdiZ6OAAEuA5QHgObOQWPj45CkgsVBYgMRDAGUUm49CIvABhUIA\nCvCH9QAQFABwyQBphOmrkNh4KHyiRFBIfGwzChSCKKMBKJDGpweLRgQWAMeKpYAw/fVooR5BcXQ5\nRFMweg7sWwk5oKySrtFNVJLESUVAREAAQoLlgvJRsZlAjBxZFBLwkUg8ovhmUYmDMAB62IYAoHAR\nWKhDCCDAIAwF+oG0eSsQCCxcwCNCDkEFHg4Kz/Sw8PEMkj4CQZRBPGIobGaLbeadCOGQVAANE6EK\n6NkAwAery6H+yBAwL+aDY0MkArjggXKmIMjhhQB6BgkfRSQcG/DYwy7hMQhsc5cwDO1gnI8kZt5p\nsCUSHwsbUEQp4KLwGFn+CBiCK3PX82WweAnBEH+6uSNkCvjc/XqzIUA0Dk+uAWDK6U18YeV83p44\nFi86hhrm4AzFsLwY+Dn67D348aPpifWBLAdq8SggGAzRFHhIZIiIwA+p/UlN4SLJhRwTIcISiygS\ngUSGzy0EEEOQxCYGwL7URSg8PFzNINMivEyWk3Ap5/5bBpB4/GVNMyvUYdx380EEChs3R+5NiCaS\nbLppG6itcABc5qKAVGIfigI+NgIPl0E8kadAN8pw1SceLqkoGO66hsIWHtJoXqDLnuG8D0ggcgj/\ni+SBBAqFIo3EMxIlDCyB5MhQlYSRDwFk+SIWGQBWqPFGOhQu/ax5M2N6T/SJfi8CfWkYMEBUFoUo\nQhN5dlPOZ4EC4FPJcSUgRgxaDuCGv21iuGSNMSxFSPMRo8tgf4p8FOHQuh8xsxQVqTgnSGyDumtI\nPwTDZv+4qklW2NBf0DbANzqStrHTW7HTH5FMg2+oqpfyjEAKQ3VZAoJAUYeHNIAVmDbud/ik8Enh\n0Y9PPxZZlBHAImCHtmBW3/wvzFOBj48bSlVxvIYqhzD2SBHYhMA7aWJEGMEqNY262ZdjM7UODrRD\nNgIJAQUbsgp8L1w4ynEERk6TwDe/UwhqDEg2Pg0h0B4RoIIPd12KjxfacPBwySFKDOXwFhBVGWIn\nzVPHrKf5FpBDmf9sIri4xqSWkqbYp5RNl4stPKt8JNVjYMqx2s15EuYfy9zvn6eRd4H17xHFCems\nDDiKbsAx+qmACgQ5QPHgb/v40sK9WLSXSEfQLDBIffxNLxYpII0kTWDZBT6WkapSt1l0Z5Zhiijx\nApqQHvW4pHBJhaRTKB5UE9CyPdgBdjeNZ5wDQJQ8/7e2A55dCWWLoCJnhhSbROChaBERNqoI4JEg\nbzSswBWLo/z0u90o6ghMVlGUD9XC0nkLSBR5yrBNMBQ0n/zH+iszU/BX4pIhh2UUxGMsNgqbcjN/\n4HoDSCT2uJnHmAiquMCxY1thnQe40AYePYYPBXwGEcQRwDYVJU49/bSHIGF0rfG4OQi2G9/h4RsH\n9mmtwAhsBnAo4IZRpJ5PkSOCNcylao8ToAR58sSIARkELjadIcl9EqTwSRIhgksfAp8a5Cfy4/w4\n4y49n5Hn1DLyki+TpoEcCQQOFjWGdrXYRGgWu9h9MEtgcrSncFnx9i6aZXtIltJmY2EjsYDlS/dS\ntqzUHmhJEYaHgiwWQzhhwKQR0pFnFIgBFnlyRMKVksgS45ynCZ9KYpSxlVfppgc/xMMALvGMq1H8\na8FTeFhESsTQwzYgKCRJBDYF0jSNFVx5jKDtwCAPv/00PoN4DNJOgY0/P4L9xLDx+AcRmiruYxeC\n2HofZ5VAEmHBKeNIH1sgSR9JenGpxCOJNoAeFrkQAg+HosUPFMBD4REhZohnEcFFEsdjkCwDZNnM\nENsZ4CC1zEIz/QDQjdRmI3AbevLpN/6aeFIvtcVPoq1yjPXZ84nue5pLL2pn+qRnEMBLuwV/vvNJ\njm9Mc+P8eTz7uIeFzUg8Br7cwSmH3YsiynMdA+zYfQOr9m7htan95I7uxaINh04SsVYwRirCIDYp\nIvQiTBATcN0OicEwqyQ0J5HEieDiG8Y5xutocrkmjbLJsgwfD0VGS4B/iBJ8RmQopLUb9ITm+1Gi\nj/PjzwLwwvPreHfbuRQMEAMjrgvHuiW26rpL09y/9X9YSQsPNUR5tWYdvoLfnZ0l6u/GIoMghUCS\nozxET+CgTBBcDI+D8FqjKg0ZtI+XJq7QsEqc0GjmTJSYowaJwiYPWOxhM1vZqiVAlegWwDrViAKW\n9VZz2+I0Z07oLRLnC0cwdXozPbyNywZ+vTjFj67aC8B9i6Ncd3mGFtFPi+hn9Uqfu3atQSB4is18\nW8T4SUsNE6pnQKQeSICx0EGobJHCJmMiy9JWDIaKahCEv6JkjsDb6He+UZUYfThkqCZNjIVYJJE4\n2AKwTGcdoStOm7YBQQXzq/tCK6pF0OPd/9vM6oEaLj59AiuaPR6/P4aPiwV847dFEQVwopL22hp+\nveU9rjm8+Hx6ZDXSPxD+7pW9VJMCL4ayXBRgb6xn1dS5HM3AJxACFLaxA0ELnJsY1q+OKIqCURmf\nfqpCyyEAKUr8s4WPwKN7YwUK2NvdO8xHuFi80nQVqSPO5pcvzgLpmLCXkvE+Eh+JYvIbdeyo7OL9\nyT5fEw1hn0feX0VGOiZugxgjAZesdS4ux1LgBCIvv1aC9KHxvEZwuHfxkSGimWFv1CH/+8BYxuKa\nIH9YWKlKEMLvQxl3AZhszGIP9dxzxj85pXUSvqkJFfsQEmXNUR1m5mLosY29cMO0YUBm6Cbujycm\n91FAEV02kh+v+z2nMwQcNGODvEFzOQh9imTx0cmSNm9xMugCSQ6LQYJEqp/yMGEuw0JM4iwVOEJQ\neFghSY6YlmfThqiJBIMgUiM08bsHWfv3dYiyCpzN84ZR3DWxekD5755Zxh1L0oBi/3MWHRPHaUcV\nt7nn+uXMPGYkJ93+HM7BHnA93ldXYRFjL4OcSVDfsYFSY+2bSCIggEbLw8cjg0CRoAB0m1GaOPsY\nQwHoYTuW9gLBBIEEBImEYPOGqLGvw9tbvTZp2UdhyCUazVJW8yaHtlKxu31Jmnsv6WDR3Dj2mQ2s\n29LDvVtG03ftj/hs//Nc/IsnePDAqfxyySZO+uZVqNvfZ/bttzOEjTIK9emtmKgJIqa3B2GkGEBU\n/OUwxBCfPXRmYcQ54F+Qk1koBLsO7kUh2VB+NSt+08yTt32BH6+N09dzEld8/SMU4JbYZL2svnc2\nNfDkukfJYNO7fTWnbbqGXSP+SGrCH/joiiGSSL71g7ncujTCS60jYObPuDAU1k8Ooou1wFJyC1Pn\nC1q1ucoZosbIjaCMGbr3RM5WwfAMMQQSG5di8VKrx+LvdfPdxbt1R9uGmIB8D40NpwCwv/VxGpv/\nq0T8dVJ63qIlbNg9h482jxiGjCiJPr4070mOX34JEji/7CFu+voibjlvNpn5+ynK0nDrHjS9WuAO\ntafXgds+JArHFF0AOgx7dE7ponAQ4zlXAXykZhPp2UBzrUt1hUv/QFG/giX3tq0C2wfPAS/LjTeP\n5/4HR4f9pk7pZf2mWgDKy/NELJdrrnuXxGyHZ16N0fp6NznbovOdUwlkQwAfdKb4yV2jaWis4FfX\n3Mno+jgCwdb2CzlUdBUCC72GTydBaaZIAMe8a8XCwwnrDorOUKIFkjySSGhaeXa5y/lTBK29MfBd\nxtYWhi2ukKAEFCzwsiDhvgdHDxPOpS+8oFVPwXMbR7LxHzmybYIVD5/MnB8vo/V12LdxiIljFXv3\nFBWtyXuGgy/P4KGN68GKcc4T3+aGWRLPeAoB5BhJnM2Gf12HhEW62uwM9ZNNjECXXqKAS5YMUaKI\nvANODoWFjUDXL1VRAhSCnT0Jrrs6zylnWGBlmHt8BUeOzZoimG6tbe9BZgAiNo0tC4dxZukz/2La\nVB01/v6FRhhQrOuPsyMT5dpvZJjX+RUaXn+WxP/bysTJCfLxCHffCUcf8zUkaSRRfHyEEWOMPbLo\npUATEfYZhFVJ/CpLLh3733DOFn57zwE9Pt4LSjFkH847y2dx8vQ/Qv5waG6mw2ovEgDg3Q9TjGgY\nApGAiMXYqgqKQapue/a8C64Lnsuow04NxS/wHu3bH2PtziqqW/t4eXAUTy71+PuLc6i4pQzSa0AI\nTm4dovPDQQZ9yYq1ZxAzIm1h88+nOjjn/ECtigQAh1y2GvJxnIo8IEi4gHAN8gryBbNr5UI2C97f\n9TRSkHFqiO9qhoqXIXom1Ft00KpzgQ3K510Vx542Ah2fwxfPrKJosODU0/vYs/cD8BMgKyFSGyIe\ncAX02nJ/lrHHw9enHeDlazuJf8cDtgCwqmkbybY0i2ZHOazcJ8qoMKbzUUycFA/D1iAB8qnGo4z4\nvx6i6qc3kXjlf3jj5R6DvKK9M8sLr/WD7RqQHbArQ/i/fPIU4nsbwDkIzmHgr4Xu5VwQySAmcLY6\nfAZsXmeRx6GtrxuyEpxOcLPgG1ck0+ALyJZpW2DaqHFHA4oDG18CqxuyaDtQBrQB6y+EIRumvYJa\nXc2u2a384akY553UyFnX7mLs9HJOPvEzZDMuY8bX842rp+ASIUYe36TIAheFpK+7krl1HwDwp5ca\nmXZYJf98fjtCakJ9+7I6EHGe+UsrP79yHc9sGM/Z03aSo5r1vZV856JO7nyoT6uK1c+8kZWaxFvW\nCd5QPjNmdPH3x22IueDmQEqwIiBzepCwwY+ACm0nB3Y8xoGtj4Ps1gyrREe5ChgNnV1Pwo8a6F7V\nRS4Pq1/8EUveSXDcrFacqEd1+WgqqssZPa6OR+7W8b9DZ4i8JkAMSZT+3gwOeRxyxJ0e6lr2I6Sk\nsjzKty9r1tKr4OzLWwDB2dN2mhkUx9Vu5/2lAxw3WnLcaAV+Fe90duqSGAjG+E+zeV0F118d594/\n1kAkCioJdhwiJ0PFBSBOCIFCxjSWnpY4EhZhFF2J3tMs6M3kjeJu1r74MHPvaWV61RCf3zvAsccX\nmJOsoGV8Pbt3dtF3cJDGpipAmqJ7YNjAYhl/unkTrfs7+NVTjfzs8Qb2t8e49/YUEyfWctLxYw1M\nPkhd0n9XLUQKRYY61u/tYdCvDtVZCpg1MsGsunGICZyjiimv8QbZzZBJhPTHr4PIWJ54YIAffFer\nxJ6OLOQkZJ7RpbkgGg1iyx50Wb2lCugDxwGV5B8/S3PmGXkcCT98Yjp7vQaEgFGjKujY3cnnL5rK\naWfUo7CxCLY2ehDUk80LXv1XF4lEhBNPtQAbiYOih3liJcvVMRwv3sUWHsvdMzko9+MgqO7dDG4v\n8xuLtce0q4uuYgLnKJ1saMjPm7+X+Qs3cVatydaOMCMSwMRzDU06IG+DqIHM04T1Sh8ddPkRaHNh\nSjUoD+KeLhUpCeuzeg4Xxpz8hRCgRP0A9eU+Z15Tybf+ewaQMd4ngu0XUDKKj+C1V/vZ19ZPlbKw\n8LngjG2Qr2Gw6hiSZR6zxVOcdUkTNUe4XPXtSlShHUvlIT/EMQ0RErYu4A66uhBjV898i6oqydgx\nNoundzFtomHlToj/WO++Zp7JhgEOQoEV+OhdoMpBGH1tt6CpSYtiXQr8Hi0SeQlS8uKYOKcvyYKC\nqvPKKUcyYtpKCp5PdWWCJe9+BQuJMJm63h/y8IaqoEwTbvq8RlbftYff/EAXXy4ojIesIlmm9yV+\n+Y8TOOXzFRyQ+znBWUne0/bKsTxu+7PFTVcwrNlCwLgWG9eDaaM9wu2BMWBJycZ7S4oLW/9ZJEQF\nJsMsB1UGwtHGsT+lVSLVr+/Kh1Ydq5/+Qh4EZAcEC2ZPJD30IfFYJXv291JdHjdhqS7QSGx8soCF\nVZaiYOL92niW719/OH/9wTq2FkYEXEEM7cJ1pjG6pY8Ddp5R2boQbCl88p7NiSfkuMnYvDJ7UFcZ\nhBQIAV5Q03DQRPCg7fsuVSNUEBoEO9mQhb6CTZV0IRHX8uxHIe1BOgqxjJ5nPyz66ilc/5sEx549\nitIqztLzH2bujPHseL+FVP9hrP7IIpePEXF8ZOhGbBQ+Fg4Fs+0Ggi/O3Eo8qUsveN1ky7TNmCje\np5x+XlMzQBRC7gdE+OG1gkE3SZmdLqZYl1w0MowEt2+x2LQtxaNHD7DojQbSP78R4UcgJ/Ebr0AI\n6GipoGrrAHULSuTIGQW9WfCTUB/n/t8Kbr53lqkvaaQ3qRr03nwvEsE15+7FsiTpdI6VL45ng6rC\nz08mEslytHwbhcSKW2zavpZjmnTQ9V5rJ3zYpmOMAzDvoukhCMtyJyGJMy/6PJbQKOU9G1t6SKHI\nexaW8Hm3QzK/saR+cOlXRqrrf5xlwXEFvIKFUnBxc5ax3YpvdmjB836vO6+sGEFV6wAzJmeJjyyR\nCoxkmD3P0Ud8ibbsGm64tIHH/jYKBWxWxchMkUUSR1IOpoY/R3yoASqpUa56+S1iU5tB5WD/CGjs\n0Sp1YABGT2be6GIRdpl3AtadbzLnuxYRaeoEApTSdwBfwfIPM8yaUkvSHtLgZ3OK+XMLnLmonEw+\nT66Q5/6dkhv7LaJmoOfCre+NYLLVS8/IcjKH7lMGHqAP2Aptm95kdOwo/vK30WE9YbJIoTcnevEZ\nMgMD4dPu6a9rSv0pzDn1eFAuRG3wFNTMgfqzoXUQNdiJUuD6Gsj51lvM+2+BXYL8oU0KmH9kPEQ+\n5N+iz5XTNFKSSV9JNBrh7FNn0FcWx1fQXKY9wezZguyIMtpb4Zmt9Ty0tL7I/eLpFxgERJmZPKgu\nBZ2CxCk46uKZcwVp3lNjmSZ7jYkqqQLHU4ysX0B/eS8jEgkQaTjvNMSkqbjKYlgRt4SmShXJq5S+\npFBIoRDmbkmFnHakFY66/64DHHVUC2nP5dYZknF19dw1WMltGxtQHuz8SJLKSwayklTBLGwDdgQc\nCyocmDVRu0pg3Lw7IDaS7aoSD5urztGUjzIBGe7lKSy/nG27q5k+Iz6sAqmQHDdjIVHy3PfAGP2w\n6xUArlzYS1CoHY6/CLkfbI8OO6SjTOwb9GloAcsTlJfDF7/zNFddtZ/7Ftdz7LNNSEvx4fmQy4GU\nivYeyd522NsBew4AtRZUSKjyIS4hVwVDKe0NgI96j+eO713AK9eWA4pXn7GwaUYfo0uEVYZN69P8\nbvE+g4BFUEZXWOxp0y7ouv/eSWfrK6TrL4Td23nvzTyVo3T1x/WHS4FCwysE4SVFSdqutNeL2D5y\n3LjD2LAlz1PP5Vh0XAVn/TDPnQ8tY1zC5cqYT9fEanqba9i8SZHJF2l51UV9eilhyOo1gIiBiILQ\nBIhuPlYvmvwM7ctWmJGiRBkELjEuPmoHH6zZycebz9f+awd7snkYGoRCjgXRZVRO6cLHof+ANoKO\n5Q2XA7OAIkC8ZCNVqBIpEYhBdZP64H2fqy/9Pdt3ZEgkI4yZ5LB/l6J+3LXEJkVQBZcrptzDS9tO\nZvkjgm3qCao2uVqCA0vpj9NhL9A9eSEzRJbTFnZz1y/2kYhKyNaSn7qXVNXJRCkGKW++coCFJ9sk\n3SVAFkSCn3zjRJ59sI3ypMvyDVleev4Ap50yAOVzmd7ok0xkyQ4JbIbwcRB4REQOKcy2uTTmSRQR\n930BQmEJ8JUg5uhdY3nz9XfQ3bWbREIwdWYLJ551PCfObGTxDy6joelomvb+lrF77uSNpVmie5YU\nSSyUrgxnfPDGgGfOEvgZaj96k7aPVvHAL3aQSKTwD5/E24nvMef4AaYJbQduj61gatndVGy7EIBB\nexGk+8AaydL5JwOC5Y8th3Xvc9q8fi1lqRVY5MkMRbDIM0ATyaTH+9lGfGXOE4ki90OuG0mQCJSp\nZfi+xkM6lYt4etU7HBiABeecQPOkJtavauO1Rx5E7riElq+OYvy8JM0Totz7uxxreys58MzNMAB0\n+WDXgxoAe59eSiaKK9dGwFfc9sZjfP2Cv9G+5XRWvLOEmZU7+EOuiY2DX6NlX8pY8giIOHiHs/TC\nP7C+2+wOl1VC7TwomwS5LEPlzeaYnSRJF2+1dYEYVyLeYFvGlJZQQQit87GoRzzqUXAtsnkL8b93\nXKxOOvMIhJS8+NR6Rk0Zx6M/uZsNe11a5yzEyR/gwldfooCDb6qvK7iWrnWPmDpkUmd5okzrPwKy\n3rDFR8xagEAx44IbefnJxxkhttOA3h1ersYTJcmFC/v45xs5LDUKxFtMF+VYJjEJdq30vlUxTkjY\nGbKujiEkLkJA1PKQUmmRN2oQWC5fQTyqXWw2ZxGLesjPXTidFct289GmLn55y9Ns29rFUHmcQsLh\n/q1L2NF8JTEEUbJsm/F3th35GCtfaNQzxiS4aRg5BUaNL5Ja5pk8azpMGoc74gy+vjDFY6uzvLzw\nG3DP6wDkifG2Gssdi7v57MwUd70xmr3so10MAbNYrY4IkZ+lPmNMZ7CpDR5OGPRIPBKOSzyit9Y9\nXyCl0leJDwwiQwDb8vE8kB3taU48dSJCCDxP8YdbnqAqk+W2qD4ZtmFPhpu+8j7ZMfXUjJtJ7fg5\nZE4YKlEuCzo7oL0tXOjWB05FHvEhL746GVU3gYGuKrLlC/Drd3DDh1l2qiq29M7i7sUDrFwyxJZ1\neao5SC1TiDBIH3FiXesM+oJvcVBzkBjPbWhh5nXncfH1Y3njr928o+pQKPKuHKb3tqWI2ArbVjiR\n4fGAUmDbCssC8ebqnyjfh0zBxy341Ccl1371bvbsznJz1uMGx6LlqBeJ9zfRnRpP2vVZMNHmrjcu\nZZbI07rxNeP+FGR0uqumL0ZIwew5D7Lq3QtAPsDDv7O44DvnovcPe9m/M8GUURkQMGv+IG+trkCf\nKcyR4TBaSXG5WAMo4tMGyW4oo2neNJa8/Sd4Q3HkSQuJ0s8ydRRDtFMzUMZnGzbg+cUzL0Lo0kUQ\n9OQLmgxOxA8ZKHLqcqXP3jq89noNcyZXIT1F/e2Pcv/+HfzyJckQT1BXexYbV95FZbSS/s40Kn+1\n8bdmz88XkDcV5FlXoV9m2Lo7xRnj5gMZvpSewT+mfo3Vu04EIJnpZcO6s9j98pEsvPFhYD+SAkOM\nR9JB2hQZvyDfAaHFOe1VsPa5NRz1+ZnYZFjtz+Xcoz7gj2vncnFiKZ4n8JXC9QXxaNEdDM8NVPhM\nDKmrVHv3BGpr19K2bzqT6h/j+u908eCjfVyWepQr219h4GA3R0yr5kSxljWZK6DPQ0VuhI5OcBdo\n7q/aCUccDhRg3iLw+0HmSZEFqhB4+OZYlU0Bgcf/Lu6nry/LT/9ch7ao+lBDjhEoUmQp0EcfeboB\nwfT02zyffIXPDp7DwvJx+Fh8/6HR3HH5DrOJ7hNzvI/p/icSQJiQeEhdpdo7RlLbsJWXnnc59XNJ\nIPhKJ+huIZCcKNZQwKGdFrq6l4KKgF3ByKqZtD/yDkRjcGI5fp2DHIAplUlWqglAFYoshZ21SCno\nHypQM6UfiyQW2yiQMLX/CDvXCnZGJPOnlgMx9vJaGO/X5KOUyR0I2+W2y6q59YHzOMp+jagYRAqF\nY6tQ/wORdyIKpUQYEn+CBFytXLKUP+szcJbmz6HNN9uJHzzdzffObeOaW9v5ww8bwiRQ99HnNC3y\nxGSGd3ormVKZZIU61mxedjNHtPLOruOxWg6i93Jj2Gw34/Mo0jz952o+d1mcp+7q4tHv7wpUlduz\nE8jRzldFNY7ZM0gxgkoOkIykWZKfyyJ7JRFLW3/Q6a9fkh1aVmlipJAS7AhZ8gj6z9IfMRQ7uLgo\nLCqx6OPBm3u575YB3lLTWSASCApEGCI48y8POcz82puHsalnM1PE6jC9jQiP99/dxi2TVuMZP+3Y\nxdRXc2gf93+zhEvmXZYuc1yzlyHqyBOjhl0kHR2BnhVdQcTs6AfS6/k6Aix+iqVwPbCLO/+Igrpc\nDaFI4WLhmQMOFsHpi3JqgBxZBEeLfgDa/O0sqJb84NlJ/GTBNqMiulpqCxdbuAYQvbglh6espa30\nXamIHlrP+FV7Mz9qbP3kOSyF5wksS5HPi5Bqrqc3TR3bx/MFth0QyEiINAQYxCN7yPH04Ahb0ny4\n1E+K3s5BrpxdwT92j8EmR5wcC8SaIgIoojJjUCjG4AFipeWpTyfAJxBBMMywlapfKSFKCWASPl34\nCJ6VFICFMEmTRBInYQ6tqLCOI4AcBXwU7zwxhOhJ89buevyV9/D8lw8yXRwsSW79sOZbPPsxPPoS\nIkhC/n1TJTrrKxFewbPgCuY5VLYcRwc+TsQEQbYKY4GQESXjpEvp5xDBKTHN/VSfZ77EgEVf2k3L\n5E4KHETOOY8LHtOh7wB1+FhcdFN5aA+ESccU2h97SuD5wsTn+h7YgIAwIuSQMuWsYXWcYUj6Sosv\nFKUgGBcSzzfELx1o+KIlU0uMHGCIFGkGyBs91kfUk3SSrHJIsB+PHQgKIakcyuDNN3lJHUeOMnpo\n5vFbMrg4RY6Z3FuUAKlKrqBC80nFy2EwCxUieygupXNa/+kknSEMhnhhSawC/elDHXkqgSQ91NNF\nOXka2RNKgE8UhaLAepZTS3bBYZwkVpmvDGzu2nWq+Zy1CJmv/gN2KDxf66QfXqWOSjff13m8Ju5w\nxIPmm6BPlTwMVcZQTIjiPSCA7eCYb7ryFPCIUAvhJzBQSY4CMfSBsxyKrDl3X47PEGtUBTYOgj7A\nw1NCc/dTcD/0lTAIiJIHxcRFIITi37VSSRj2vNRgfoLxDZqU+AjySJLmSLkC6lE0EXwGJ/GIEOTd\nEVroxSHFM16AvJ793n99RNMkUVKA/HdNhcj5SphKbYmyqEPHDoe+VCVCE+wLlC+GScAnEePQZgeH\nDCUuPmVhEQKVA6Gdo2VcpD4DbtFMCrCZKJ0QCIc8fzujmd3EicvBYQDUKUidAAAAIUlEQVR+jOPi\nkOcCI7vFkjaK8CTOoaXv/9Q+jeMlvQD4/8nqu1FeoDQjAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 3.0
        },
        "exprs": {
          "mandelinit": "0",
          "function": "z^max_power + c"
        },
        "scales": {
          "Scale": [
            -1.856846605436939E-8,
            1.9670297280235722E-7,
            -1.9670297280235722E-7,
            -1.856846605436939E-8,
            -0.1503796778555837,
            0.759958369253633
          ]
        }
      }
    },
    "description": "2017-07-31, 18:18"
  },
  "precision sqrt": {
    "icon": "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\nns1qXCcAAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 3.0
        },
        "exprs": {
          "mandelinit": "0",
          "function": "mandelbrot(z * sqrt z, p)"
        },
        "scales": {
          "Scale": [
            -1.856846605436939E-8,
            1.9670297280235722E-7,
            -1.9670297280235722E-7,
            -1.856846605436939E-8,
            -0.1503796778555837,
            0.759958369253633
          ]
        }
      }
    },
    "description": "2017-07-31, 18:17"
  },
  "precision test 1": {
    "icon": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAIABJREFU\neJy9u3eQH2eV7/3p+MvzC5PzSCNpZpSzZCVLzkm2HHFiccDGC6xZwCYsLB7MLiwmeb1gwBjnAE44\nW5YVLNlWjhOkGU3O6Zdz96/D/UPcW++tulX3vfC+91Sd6q6nuqrP5/s8/ZxTT50W5tZstBOxAgFX\nFc31S2hpXEJN+Sw87iJMwyKeiDMVnmR8ZoypyASpTBIQ8bkD1JfPpWXWUuoqG3EINlJuChsRzVFB\n/9gQL3/0ezRXJ5u+GaS+OYCazCDkdGxZxC7yklMUJroTDO1LE+7V0HMWikPAX6EQqncRqHKhuhX0\ntEm4P814d5Lh7gROIcSiuStYv3IzC5sWEwoWIUo2omhjWzqSIiPIIsl0gryW4fX3X+LGa27lJ7/+\nPhtWnc/ps22s27SSN954E7FmbginUyaVS5JIJ0hnsuTyOpYhIqLiVItQZQ+S4MC2JPSCSSaXJZZK\nMBWdYSo8QzKVQy9IGIZEWlMpMXehCG6e+o4OlkTZWYPFvy1CSswl9IdJlGgOQzRZcGIEra2C+JBE\nJm6j5QRAQFQFJJcAqo0lmOj5ArlUgdikhqE7KA3UMH/2MhprWvC5i7AMm0I6RSGvIQgqlgm5nMbR\nk4eZmJpElZ3s27+H8ZkhXtnxBPFUjBf//AItG0oRa5pLKK70YKEzHZ1iOjxFLqdhFCxEwYEquXCr\nfhx/FcE0BbSCQSqTYSY2w+n+TrIXfYOm1XeT9sYRgp/y2qpnsE2VZdUx8jmJCzsPcuCecdyJYTLf\nrKHxg5vQBJOeSAn1XMSPits49uta9n9ZQpAEZJeA7AHBYWMYBtmkTnxCIxW3CbqrWDLnPJpmLcXv\nK8Y2wchlMQsFsBUsA9JZHcsUWDBvGc+//kfGp8b4cO+7lAdriUxlSSZS6DmbvW92Ila1hKia48db\nJBPPxJiMTBGJxcjnDWxTRBKcONUiPI4QquQBZHTDxBB0ktkMf3iojVtGXOzf/gRWrI5EKEvirMTN\nV3yDCx88n5/d7+KlS5Zw4EWLYHMWURXovncPKz/u4vNeH0b/8xxevpjF90wy1FjMzRe4kX2wNnkJ\nlmig5QukpjWi4wXsgo951UtpnrWM0kAVgmFhpGIY2TS2rWJbIrohkEql6TjTzuvvvkzIX0pXXyeR\n2AyRaARJhrQ1AY4MtqQjXf2li1sNwyQX04nO5DELEkXOYgK+MlyqDxEVyxTRtAJpu49vfqef6xeE\nmdMkcNaCyf5idjtqkMfnUzfrJK7OIGXhf2R412n2C4cY6t/GjPsw11zvoH1YRxnJ0tad4Y13A+yR\nCkyPreTE8Rg5vcBFzhmGx+uZSU5AyzQJS+e2RpXtOzJMDArUBJs5b9EWWmYvxiGL2NkZ7EIWQXIi\nOv1YiMxEpmk7c5yTp48wMjnEsdP70Qs5bMHGktOsuWgBpmFhW+eYpGu/cmmr4IB8Sic9oxGL6jgk\nL0FvGV5XCFl0MjLZxcILPqS5Uufo6zGWXO7iwGdORg9qiG6Lyzs+QtH78R59l3GnijLai+a9mFSu\nicHhGTxXHmFWrR9/iUy6FEKNEkpLCtOTIJIeRK0SOO9fCnxydgHXtkDDzBB3nNdE165TVDeECGnT\nJGOX0lS7lOUt5+F1OhAzE1DIIEgqgqsYC4mZyDRnets51XWM/tGzjM0MoRWSiLKFp0jCU+QkNpNi\nfGiGTCoLtoB05d1bWgWHDbKFniwQG9fIZsHvKiPkKWfrNf9GLLaF0qTC7gNLWVz9DM7xCF3tW1H+\nYYyhD1VmFqyhP3wdkdIvMJNrJu9eSlYox+uoZ3/XPlRxmLoNMuUeF4PpBCeGRsmKObKaRvJAgPET\nHqaPFchMOegomWJ6jo9XRsdZ3TfDn9r99HffzK9/fJTB5DJqXPNQsmOQm/krfCmm5CSaiNLefZwj\n7Z/SP9bNRGQIS8rgcEm4PTKSLJLP6bg9DvwhD3q+gG3ZSJf9w/pWJBDdNoZpkJsuMD2p89g38xxt\nLyOx+hiBiWb6R+Yh3vdL9r1yF68crsJx8SAfP+EkmnFRI26lPDALsyCA7SacyJDN2+gaZDIFzLKD\nzD4fKnweDo8NMxGJYwgGuZyOebKCiZEK4pPl1FxzBFM1iKVT5MICvZ3fZtWXhigJTGFMrcCjbcNF\nF3IiDKKM7a7EUIuYic5w8swRDnXso3f0NPHMFLLTRHWIFJd7UVSZQIkXLatjmRYFrYAsOUnE0sim\nWcAWbFSXSKhZZYGriLvaMsRiGfpjPQT+fDOuQIyikT0Iv7wNv52nxD2H4y8K1K/YR9/hKtqH2gi4\nGjANELGYiSZRJJOgt4xi1xx6eitIG6M4XRJTmRipsI6vViRTsMiMF4M5i4rq4+juLGJDGqvdx9hn\nVYj6n+n4Tg2b7nHQYvdil35CuktCdXiwlAoKYpDw5DQnuj+jre8AwzNdIKfxBSWCZR4cLgnFISEA\n8XAaXbMwczp6voCuWRQFnIiWZWAZOoJtEPAJNAcEDloyz701yW35f6OtA9r623FbQTAdiGodebOA\nXrCY7g7hD+UZy44zOD6GZPuIp3TGpiL0D48Rj+kodoihsTqms3GKPCr9sUnMiIgh6ORjJsOROlJI\nFDWPYTemSGWzJI+UkBwsJzrcyKWNXyb1lwvZu7uauiFoqM6SVerJegqMTEzx6fGP+bRtF/1Tp1Fc\neUoqHVQ0+PCXuvAGXDg9KpmUjqFbiJKIWbAxDQGH4ka2fIiGYGHZBte8doyy/X2sOfk5AmWXYlZJ\n3HvmMtY2NrGrzeZXfW5ynlXUFM1hRd3leOUaMikvimphSwnGp2dIZywEw0uuINNjTzIwPo1VcHH0\nxl18PNBF168byGlx7KO3cOeTt/LPfW6+cLEOxJlcewpBNrEPlXD6RDOGVovbrubT07spL2pANZax\n4/D7KNY4Q82H2P/h9/no+J/4rHMn0dwwJZVQPc9NeaOXYKUL1SVjmibRiTRatoCumWSSBQRRRMKJ\nKFsUCgWk9bevbJV1nUHLRK9dTsg/QI+zHSV+PePhNvad6sMtluORK8jkbEodQUzbSS4L3fFByqtm\n8LgKdMU9VNtNqLKHiVSE4srjdOddmO49HDt8Hj25KNc+lCSSz6Pvkxn85kf85dUtrB1Yx/ovfcLc\nCyU+OTlC+LltCGYLEiqyLdMYWkR92TyWufNowUv4sK+APlJJ+5hIODVDsTeGr06jdI6DYJUTp08B\nG7SsSSauE5vKkorrZFIGtiERcJUR8pfhVDx4XF7EmnfbcESclL/RQYl/iGj1JGd7MwzWPEE6VoZD\ndpFIFxicGWQsPMV40sCpm1T45+KjhWzSh6tiBrc8TL/dwddu/x7VjiCdE/MQjQzazMWcYjXpfVup\n9gQJSkEKSR+jRwS8WZVfRPz0bzrF60c7KH39StYHN6DhJUoWlRIaSpewJn2YULKf9cM/wFkoob/6\nx5z/44NcVraTJx4qULZAIdigonhFTMM6Bz6eIzqRI5Uw0bISMh6K3MVIokpZsJKSQDkrFq1HWrLi\n7tbR8rN8beMsvILCb4+mmbtEpm8P+MvjDPf5yZoFMkSJ5PK4CqW4HKV4bIlczE1XeoCFNQkkT5KA\nkcJRsoX9J0TCTGLQQznzGeEMD7/zFp/smSK6P4iZ04juXkky7qNxzducLjtJ6SctuI/9F43XdjM5\ndopkNsRy7wXcInfg10c5FriCj/TFfNLzLr3tacyBEubWTfB8WObKcT/Pv6tR1mCRGNeIjGiExzXS\nSRsZNwFPMbXls1gwZwkL5y2lrKScWbWNzG9ahOQQi1q/sCzAd3pMRurybFgUoFOfwbk4S6pTIjft\nIleQEASbnK0TydsE7DpqsGnA5of/+jZ790k4o9+gIzrJgdMGc+3zWeZoocv8jDDDfOvyFh7/j0GC\naTduh05k/AzXfaeZNZIf+bZuLutewunDFeTCl3ByYBdNqUX4rRZu9zqYH9/NjpJbeLfrKCeSvyfY\n0IO/LIdcNcnm+ddwY10/71sJlAqR6ECB6QGD6LSNbbop9lVSU9pAY00T5cVVNNbNw+Py4HA4cTqc\nNNTOQmrINrWerLYZOWoTWpGjIFnMLfaTNjXGjUmE3hIiiSCWLVHk1IgZWdI5D89vf4KPO2dTHT7E\nn47cTOTKe1EmSplOVzLAKBvL5+Js2M3dX+/jySeifP/mhziVeQp/wMWho0cYbh/n2Mhh4nvrOd3n\noPORce7/cw7LNMHYxuqNr+Ip7KTPfQ8/7/0EZ83LlG08i6MqB3mVxJCbfF0cv09jzwEnFdpllIRP\ncHrST8hdzayKJubWtNBY20RDzRwaahoJBYqpq2mgqrwKt8uNoigIl2z8rt15ahxBVJlzTzeBRTYX\nzZ2FIMHrHadIvFhB5+415G0vAUeSU7/cze59Ln7+55dwSWGqzTrepZuFG/8F05+k492vABHu21RL\n+NgpjpkhKDpIkernootrONV/gGXrF2F68uSHcvjNehbWz+Jbv/qE5VumyX3wJLGcyV3CDG1qOb/X\n3mf9theIF4/hmilB665Cz8qgmKhiEfXrI7y1Ks8NbxRx93k+Hn2lhdryGirLKigOBgn4fagOCadL\nRpTB4ZDI6inKSkvJ5hNIc51fbx2aTKDlfWQ6PYjuKaR6nTnFQUI+F59oJ/CdbuT+0rN0F/y8sGst\nL533KtUnPo9mlhFGY6FQz8GhMPINHzC++QA77Cb27R/gkg0PsO388zkx8hqB2ilOtn/GdHwSn6eE\nibjJeG8v8+cvYc/gxwyfdLDe9yizy55GFjazPn2KfxHe4/m9HYwXukkcrSDeNo/YTABJtAjWxYj2\nV9Iyu5TYXw5yz1XV/GKvj63Vbkrrr6KitIqSYAkejwePy42qqqiKimWbhIIhsC0isRkkr3h+ayZn\nE5TqiWQdMKYyHjxJZb2bVTXVJKQ0D3n3cnbHCg5oFxMxJgiemc/ZnJvZzCbMGGUuH81FS3imc5Jr\nD9/A6FA3qmDS+K23ObMjzCXnX8D+4+9iiyuY3VLOwpY6dnd+gKgv4NSxTh649Ye8uf3PrGraRNZY\nTXr8ZR53f0bdhn1s7zxNfMcSbq8r8MqRFoLeNG5PDtsQ0Qyd4vi1LHMKBG/NkOr7EcoKB0GrBZfT\ngaJIyLKEJIkIIsiKiCDYgEU6m0J1qEjOwmWtaTNHzgKZIqYyIfzDLg5W7uD8eY0skQN8Q++l48Rq\nTHWSRGYhs5v2oRRilOrrUdFwN+wlc9NPOTLwDZoee4r5HX0MZmQmTk3xw+9W8eHBNo6d3oM/oFNX\nV8wzzzxNejTBzGQnv/v5k3z5u7fw+uNfYNdnA9SsMjgzmsV3zQcU+opRBGg/cDdPfukYFyzt4FAY\nTF1hbLgcPV1Gsaccq+Ya+qdWUXn7Dzny8x4aVsaQCosQBLCxsTlX7JlWgbyWRS9oeDweZElEkqyN\nrZqQpUCOFCIKFUwnS7k/FeFnZ0SuvNCLrQoMDQzhyanMRJcQnTZpuHw3a9a4uMr9B/7UJbI+/x36\nIh9z3YpR0vNW0X5yD3sOvM6HH/fy9kcv8aOH/53d75yhvbMb004AEArO4vChQ/zu6Z9xojvKsqUL\nWdmg4F46Qf3JCY6Ne4gdfIDqua/gXF/G9CM3sj8XpW90CSu9V3DRgqtZU1VFgRQbOzajVdxP9aUa\nYmwxdq4W0zIxTI2CqWEYOpZtIEoCsixh2yYutwuphNtbExTwOrK41SxpQ2TbBTauXDvHCjmaN5tc\nM38Rb+w+jdObRY8UKMmtJdB8hP1v+LFdX2Vl42peO/EDWm+dy3ce3Y9XKRD0b+GF9l+x6/lP0DLr\nmB0YQizeQnh8glxhBADJWEgkvo2Wlcd47OFPuOdbF3LXg/cQz+gcPTtNsEnlNf9feDFexat/amRz\na4bqorW0pG7h4mKRcoeOW9SxzSxD1kcMVq2nMLaS4qIY2qSThKaR1zNoepaCqYFwbjVIkojb7UIQ\nQfJyU6tAkJiZpaZihs9fNEX/4VI+HJuLY7KYgfZBbrqplrx7kpr3biFZc5zoqIydLFDWOEb32SFu\nvn4l3QMn6Z6OcfdXruHTw9vZNM/FK8+9Q9N5zfR2vcenJ9vo6dlBVh/mv5tuDWPyEbs+PEw2t41m\nYRO64OPwp3kMoZc7v3IFX32mlr6ZJiSWEtndwF3CDAvGp0m6Q3SplUQEF9u79lHZ8K/Y0yXU17UT\n612DXPUTxkfmktMyWLYBgo3DoaAoMl6PB7fLhdOpIKj8wPayhih53EoHtbUjJMKlTCa3UFeynVxW\n5dOlfeiPlfLAS72UL/Kw874Krt4QYvPdcXb8ZjGiy8mm9WuZCj7NE4+8QOWcRr60tJm7n3iWv8W8\n9q/45e+KiB1oputUCbeOvkHxWJopQgSOy3xtxfUk7RHywgSGFKWxuo7O+FNsmXMXq1d1k5IyGANB\nprRavB4nAb+PgN9HMOjH7/ficksoCmBnEJtveZ8oZ6j3amTNWcTCpZStPAj0MhxuYs8HCS7v9/Iv\nD3mZX7yQC+ZsZP5cLx8cO4Y0dxkHBt7k2Mh/cvDsq/Qc02lYsIBVt6zg8Wfv/Zvg/QE/z/xgFVdt\nvQpX+l0CPoPPjZczHycXkOeq88IM8BhtvEOPfYK8qdE11sbC4OfZqP8B6dAuzhxayOxrd6PIDnye\nIAFfCSF/KQFfAIciIxg6hfQMmekepEt/XNc6T1aISeOER/1ktPMo83dSeukOvvGrFP90cSPnPzLI\noefOUlohcvDtNiajvSxYVMeSeUswhBm23nw1iUSYnpFThMezBIONfHjwnr9JAC2vEZuaT808gR89\n/whj9lGaHF66Y7MABZcyQ+T69zA7L6eBRuqC9ZQHKlAkgdnBIMqCHE2bpgnvmeHMVAWr5q+jOOjH\n7ZSRClGMeA/pyaPMDOxlvG8PwoHv1dsPenzEnllJeKKSqdQCrqxLMnHDE7h6qoi2eXDbFSxeliVc\nEuaeS+7ntf1PoyS89CgGK7xBRoYHWbFyBTve/YApRMTUDL1ne/8mAf67Oe3zcXttqquKSQEDnU1o\nVguzfSLV6Uspr/Dg94t4PTbFboOeqQNMGlEuWHIZhaonKHR4uOFCD4Oxi5C0EYxsL9lUP8lEL8nU\nGNHEKGk9hfSuZ1HrrXdXMDT3MJNvLeXRy3bxQftqRvY7ueVRifF9MsuuU9j+zscY6QyVGxw8+7M/\n41qnUFaj0rE9y8SIh8RwjjNnB7jutuVsf3Pn3wUP8K3P/Zqv/vMm1kZr2DoV5770HG4tBFjpzlLv\nLWM2GfwOE1UVaaSPxUUGJeULuHbx1zEiW6hVy0kNd5Dpf5PIwBtMDu5gcvQzwuEOkukxTDuDwwnC\ngqYv2JIzx2/eq+Fw5zA/vbYcfyiGIufJpHJcfa/C6rXX88dfPsuP/uMh7v/Hx5jJ7Sc8FPufAn78\n6d/w3TvaqF9+gLYTbX+3ANVlc3njxff5/E2PIFDG5MQqVGZTQxmvZh7lG3MeorgIqtx5Kh0RAvIo\noegfedlxKwsueITNkTjH9g6hSxamIiK4JCSniupxorqdOH1ebElGKHZ9z9605TCTlsIlXwvR9WmB\ntYuK+I+7erj6zsW0zG+gYBeID88wMDNNPtvP9reO/i+Dvv3uW3nhjy/93fAAF3p7sJdfxb2urzMR\nuxJhIM3ETIDV+R38znMjNUU2q9R+6sST+K19mJzCqhR5KHITFV/+gM3vj9NYIhHwKghOB6rHg6A6\nkJ0unF4vlighO90Ibzx7mf31B0v55Ve+y2fm97jgpps48m4Hk6MJFi9u5rbP3c7v3nqM9zIvk28L\n0f70sf9PAP939uILL5PbE0bMb6N0/x8YSN9C88hRFjme4qsNDn6Qtinzn8AMmlhFIkqlB8vtpMt7\nDY91n+C2tQqXFTmQXW5QnQiqE2QHqE5QHaA4QJQRvv6b+21hOsMlay+jpKqeypIqdF3nL395G91I\nk5rbz1xXgfu2vfp/BRzg/pvuoLvvDC2xGCtNk2XLK2igHdEVB7dJ9cTnGFvwDih+UL3gK8JMiYj+\nIk6MlZPX8ujuZWxePAKq6xy4rIKknrsX5P8hgChJIqZhIiIAYNk2CAK6pmFaJrZg43Ip/9fgAUzL\noqBr2JYJtokkmyDaINgAiM7MuQeFvzoCgiiAZWMaIroBLlX/f/Uu6Zs3F7c++u9ONlfezvtnvo+7\nsYgP3vyQiakoVdVVfHnrt/noYDeJC4YoKm4k0j7x/wv0/9OOnD7FDx/5GUGrGaH2VxgHJtjZ+ziZ\nj8/D3xbjiKay9GAjSs8k2eE86aE0haxBPqkzIW3g0Z4RFtfPUG+YCAUb9L9eCzaYgC2cc9NG2vXB\nTa1r13fz0fAOFn7Oz8c7TzNrVoE//OA0JQ1OxqaGsDSB4t5y1JyXec1ezp4e/V8Gfv0dt3Pm5N+f\nAQAi239Oh/ufOS8fYFj5B8S4Trs2H0VzcSD7Y7rUG0maW8mll6JNOwgPZpmMOGg9tZ7ALWep/HCY\nxFiUxEyMmck48UiK6HScRCRFLpkhPh0jl8wizW6c3ZrIKvzqlQbGx2d46Z/L6PgsSVGRwumjk5Q0\nDrJg0Xm8/fqHPPjgP/HqnztxFqdJzKT+p4B//eR/8dSP4ixaJzI+Mv53C6AHPuDRH7/Cg0+8zYnY\nEH8ZlThlOjjGcp6NPcIb/7WZmKeYuK+RTGAFhn8ZSnqCKdc6lgQ/ZYVY4MzBUYaGogwNRxgcmmZ4\nZJqRsRlGRqaZmokxMjqFUHbhBfY//cTNB52n6fzSrfzogtP89uMbmdSP8E/vxdj5bZMFF3v54IVd\nhMod3PzAVfzqgT+w6NbF1NRXc+Y5E11z0FxRwcH2nWy9awlP/ufzf7cA37nxLZZu1rA/jOA+3U5R\nfwvZbDkzoQkmxcuQRIlcwE3e62G2MoBHiTLkaeDyxT/gZORaHCkPUm4/6cQwqfQgqfw0aS1Gzsxi\nYGFJArJLOVcKf9PhI/HiCsLjVUyl5nPdrDhD257C2VdB9JQXN+UsXZpnOhjm3ku+xtvtz+NMBDhu\nTrNEDDE+PsKy5cv46L0PiAhOrOQEQwODf5cADnsN3iKJyrIKMrJJf3vLuVLY66AmewHl5R6K/CIe\nt02px6B9bC8zVpxLlm1FrH0KrdPDFRuKGEtsQNKHMTK9ZFN9JBN9JFJjRJNjZLQkkvGt+a2OwwuY\nzokM9s4H5iDXv04hMMMtX67j418vZu1/9LD7mREaZvk4cOQTOj8ZRhHdfPW2G+jt6WLDBRsZ7pkm\nW0iTGkuw6arrOHnk078Z/vLmx/nJb67nkwOv4fT6KIsv52y0BUjjkE7Tc+s36fg0SCI8TjYfZzQ5\ngiWJXFWZIlT+LMXNWeyRIzx/pJ5Zs1YgB2twlM3HW96Cv7wFf1kj/lAt3qIyJEsob/342YsoTK5H\ns0RKfYfwze2i4y9fYMczs2k71Mu/f0lgwZIWZq30csHtS+jfHqLjdD8XfrmBpx46yIljn1ATXIrf\nX0QsO868S8th1+OMmU/8n8+808HPvvI9Vl/bgvvwNEXWd/noeJI0wwjkEGwX6okmCsSIM4Wp5Ylk\nByjxl7DC/DO5WJI9nTcw/452soOXUDDzWLaJJIs4vH7UQAWe4ln4K5oIVcxDinfc0+pnKXFTx+fs\norRqhGhPC2ltObXFh/ntk07enz/JxT9XePFoNzPyBIeeU7l+UyMVNYNoZzdQW7qBdUsuQqo7xeGd\nhwj3p7jz4kHeO3Hy/1gA0zB5d3cz8+ZPkglvZHzYy8Mc48FUnuvxc+fHftqfvRU/5RQJXkRRY07V\nHE4nnseuuJ269UUU1Y8ys28xqYIbMEEwsDH+ejIsIzsUFJcHxe1DKuPe1gI6eXqorxjnyhUimala\nEoUoopCjcsUxrn1zAa+3H0V9disnu4ZIDCxgKNPHyc4op9vg81ffwBOvPMloh80td9xOR9cR/EVl\nHOg8yZINq5ga/t9nBdm8j/+443kUby1T4V72fvoi624t5rnnDvHLSIAnWE2nWMO6njjnxXPMqW8g\nMGs5LXUt9E+3ceXie3C53FTVhymMXom/8S30zCpURUJRRQTRRpLBsHQkWURRFRSHAynA1tYoowQc\nCbS8k91tjSxY4mZt4C06FvTwjz/1UxcK8fDPO5hSBhg9uQB3Zg2lF+1g9JNVrJ99G+mok0/OvMO/\nXreI1t++wJJlDQxONhC8VGNmfxxVvIoHb1lMyZw7CY8kyBXGARufsgaJr/KTX7Zw5sAgX31kKU++\n8K/MW+rHTGkMZML8yXWM7UA8neXWb08yHCzj6NilVDpzlDrSlDtz1IWCGPEbKWysQtcbmNUwDONX\nonoDeNwunE4Vh0NGUWVECRAsJFnAtE0klbWtlpBCNySSRgkqlZwdMdhY08XgfDef31TBG12nGPxY\nxuqZx9DIVtLCCUItZ7hq9RbW53/DY0cmuGbRA7x1uJcHfhzDCs5m9/aX2f7iW8iiRFffm1x6/a28\n+PvnieWGMa1zNYQv4KC8eIhbbr2TJctnoU0Guf38K3DXuamNTHD4rIPfH/827oojfOfhLOpPF/Hs\n2T3sHR0iVQhAoBKfSyQqFtgS/RXBDZfgauiAeD2ysAS324XLpeJ0qTgcKqpDRlUlZFnAsk2cLhWp\nVLm61TAtZIK48ZEjydzaE5y6Yyc/u2sFckzj0ROfIL6+lViilEy+nIWLdxFtW4h26F72D21g9myD\nkcsfpmbgHmLX7MR6/CQ90028+tpLfP3meQwNl/DrJx6htMrHeRsW093dBUAuF+MPj77EnV+8g69c\nt4jnnwoTk9zseDZL34oDWBEJ16L36Tz0RZ7btgOzYQ+fTUsEXGF6I310jB0lawqUFtcQbrkL6eKn\n+fT7eZqXFyGbi1FUEdUh43AoqKqEokoYloZlm3i8LgqGhtRQfHlrLl/ALxaTsiNUlp7Feftebr94\nOXOKi/lzXyffO5bEvWsuR3MXYktdWJrKeOx8Ku1GJohQnF2Fr+9SHuY1Df3MAAAOQElEQVQX/Pad\nNRwYA1P3cfm/qez89RyWtqxmNHwavbAY1Wtw2y3b6GeE2uJL+Wj7h/z0249zx/1/ZN3se8gOzUEc\nPcupMzbO2YOkg2FmOaJkJ0y++PQWZE1CVTVCpTEgR513KZfqz7Hmno848+K/03hhCWpsK7IMkgKy\nIiDJArIsoKgyiiricjnI61ksu4C0vO6u1tHIIFk7QZF/nKptHay5vISl5ZV0hWd4Y99p3n/mc6wo\nm2ZEjFAkVzN++y9Ycvy75GwVFRce08eHyad468tPcXD1Sd5Ib2RmxGZd+sesbFrHH3c8hL/cwNB6\nGBvvQVZ9VFQ1Y8X6uO7Kq9ne8SqjHWU0F2/DKTxNKnMfD047+f2Qh5/8zM+05yQHuly48zK5rIoo\nmBRVJciO19C4sZ/i0Z3UByt5o6eDxniMlDQXxHPfuSBZiKKNIFogWBiWjtvtRHXIxJMRpIamWa3x\n+DSqU2PuvWcoXmNzXk0tumXx/pkzSO/PZqCzkV2xWRQsi/2/eJua43M4cuYGnNI0c+wSPuQ0izc9\ngTPu4ptPPMDkqMmXL53H9MG/8NLJTjRpCCtVxqVb1mFJBZoWz8JbJFPlD5Gfttkyewt7TvbiXPoy\nw/seZiSSpQGFCnkTrc9olJb0k64eoyiQxVkQEQQLLavgLhIpWjjBz67x8OB+iasX27zwSQXZfBLD\nzFEw84BBwcxjCyaGrSMrIol0FI/XgyQLSFWp0tbZ91jYjhwLrpaYV1yMV1Zom55m8GSW9L65RON+\nJHScSoEfv7WItu4vcPTIswz3tXBZ4y84OTiP5NoX0fZdSDJbBVSwKLuN7vqPuPmbY3z6lya+tvUn\n7B55lLrZZbz47HNMDk5yqq2ToSGRfR299D42yG0PbWHC3o/TWop7zas02x+wMXgzr+2voiiexFkb\nx1mdQZHASMksvkTgkpo8335LQc2tpffkIQ4OzxBJTJBIh0llY6RzcfRCFt3IY5h5VEVGUSXCsQlE\nEaTGRU2t37rcR3fIoLpCptnrZ9/oGCldJ/l+iJneUvSCgiSaZAtOfDSxpvg8el+/AGVAZuO92zl6\n+hSB9scZToZxyBLr7OsQdIEdoyfYub2Wr111Pr98++c0VLgQnSnsfJqt929lrbkR84unWeVw8fU/\nlFIc/WdM73HqTIOhkaWsFjdzfuJNQvM+x/BoBaP906iagF0QCc7J8fn6i5jn7qZX0phhlAldwjTy\nJFIxIqlpEukwiXSYbD5JJDGFosjMRMeYDI+RTMeoLK9AumHrP7QeqR/hxVKVZqeT//wwTm3ATcfz\nEhgiYz11CLYLCwMHFawMrmNWeRWWLPHp5AwPbx+hsXmCKcc+AkaIu69bxd5TOp+Ze4A4TVzHO2cH\n+NedH5FyRYjHRLRUKXtf9rH7lIgxHWH/eTvxpUW8A9tYd32GQ8Nt9OWyaPJCWsocNNnH8M65iIBz\nKd29Eaanc5RLDQTsD3gp4+KSgRJe3G3QtFHG4QBJtNC0LMlsgkQ6Qjw1g17IY1o6kiRimBqieK7s\nlu48324NhhbR++xuRpeUM6fKxcd7NeTaHD3vzcEnB3BThMMOMDewgHk1LZQ5Rab1AofDH1NR1Uah\nKEpfRzNu7xoeWPcWp06tpq+QwkMVTspxEuDNZ0V++ZxFp/Msw2/WIt20A89QDd1n7uCyfzxErzyC\nODpOydB8jk/UYJFE0DNYdZupcWWosdpZob9MofpzeDbsZvXNeex9Yf5xWwm/i2WZu15GVs61xqqq\ngCyBIJhoWo5sPkMiE2EqMsboZD95LcvAWA85LYu0/IdbW0VnGsMpk5IXU59WmVZ0AuPXMTLahpbx\nEfSGqCxqoLq4noZgkJyo0D/Vxdn0PiprJtDiRUxGF7JKuYRjXVfTFR2ltOwEUb2K8lAbzdlRpja/\nwvrLJA6O9ZA/EqL8c+OM7mvkPqGeqqo4iy9w8ZnzE7p2VCGafrxICORQJTArluNzGnSGrmQw20md\neQVH3rTpSlTx8f408VQaLBtJEs+5IiIrIrIiYBaMv26EGpqew6E6yReyZHMppmZGka74woZWRIGL\nPutnVApTcfYWegvFRCbe53S7n+9c9Q06Jo9hWzLnz9+EKUCuoHFq6DMM5SxO1WB8rJRGexUNVbOx\nbZNwcoKRjEyL1USDYyMPX/J1XrvsKMvfu52XzJdQ2j/PV49VcfHsnZwpK+HXz5XTX/MOsxr8+IUo\nk10+HEiook3OnqK2pIJpLYwYfZybNpWSXBtF6t5JwVlDz1iEaDhFIVPA1E2wbERRQBDO5X9BAMUh\nIsugF3RMMU0ymSJvJshrGtLln1/fCgLdi6vJlLiJeE/Se7KLzFmbH1TsY3t0PYubolzjFNANjSHN\n5sjAR0Qz47j8Y9gCZBJVzK9YRmmglHwhRSodJmQXMatqFogm3z45zpX3xbj0ZhfvnzmL4uni5BWd\n7LBNPn5pDQIB5qlxxOYkVmmOkrBAOiqg2zmuWHojY9GzSM4urlyyClQf6thaGpasp9y3HEUUSSQT\nhKNxcqk8hmZimxaCALIi4fapFDQD2zo3ZhQMCqaOhILb6UK6/I5NrUgSBgKRaJ7RsMHGaIGrLizn\ntx23sqSplEUVAXLTveQds5lKhUlrBZL5KOXLuhk7G6LK0cKSWaswrDxupwNRsigJFhP0F5HMhbEC\nb7HsBp0Kt4/u6Qi5vIGrSMa2wN1ehp0rQdEzuKvieMpkVMWkkBJxKnG6x3ppuWeAi+ummAouxBxz\n4SaJLATxFldQHCxDkSUKBY1YIk4umyWf1RFFAdMwsS0b1SGj5Qpo+QI2NtgWmq4jqjqiJCkIkoKe\ns4h26bS/nOT7r4Li8bCkoZqK219A8heRr7+OxFefJ6rMkND7WPUPE4yenIts+WipbUF1WPi8Mi43\nlIZ8lIa8OBwGkVwv/sZJvLKLfM6k3BPEV6Kg2g68qotQVRhBGmRyvAI17UEZKUNxSdStidLiu5kv\n/zRMRSyNLTYjhlcjl3oQRB2pMInTilFdWcZ5yzeyfukW5tUsRBH8pGImE4MJJgbjpKI54pEMvqAL\n1SHi8zsJlXoorwqhaQbSVV+8pFXTDaZ7Ugx8GmewTcMtlTM+vo7assVc2XKEnoF1VLqH6XhrHefP\nbeWGpWcZ2nsBVff04uwoULZAJxsJ4PV4EYU8xR4XAa8XWZX5rOcdAvP6aNrgwiMqZE2LrGbiVBzI\nmgO9142ZgaqWMZzJRoIVUFHsQfYUuNJ4i0PdLvqPbeCO2w9woD9AqWs1siogkkWSTBSHA68/QCgQ\nwqGqGIaOYRTIZDNY9rlZNwvn/j4zDROXz4HDqZBKpJAVGenKOy9qjU1kGDgQpv9oglRMYVZ5M/Pq\nF1BWUsnY8JV09/ZQvvZT6qvO0nfcYvF1ZZwamubsaxrlzS62RT6izKezJPw7hKoC5fEhHA4vR6eP\nICDgv/UgLZVBdMPGskVqgyG0iIiQcmDmBUI1DlZ9w4DJWr46R6XkWDcPbF7M7s4RLtpWiUs6wO+e\n3gxpD5XltbiKQsiyjSAUECUT2eXG4/VSVFSE0+HAtAwEAXStQCaXwixYyKqI060iKxITI2FMw0KU\nJKTN2za0Dp+K0H84wli/RsBZwbzahTRUz8Hv8yOJIm5nkN72Kg50THD1FyMUhhMoAZMTeFkSKmFg\n03LE7Ffwr1+CJ19HNnQhvunH+MjcS0P5SnLOE8xvdDM6ZqD26nS32XS/4KbIUYzcdR6Z8Rjtb2j8\naPUwB9tL2KknaS+CoRo/q0odPP6WSdfZPvL5PAGfn/KyKlSvD1E0zokgWiguF16fF5/Xiyhyrg3O\n6WImNoWICKaEYWosWTcXEVBkB5ZpIS1fv7q179AUg51xjLyD2rJG5tS1UF5cicvpwrZNMvkUkfgU\nk1MJXn1T55XdAp8ed2BMBfj995Js0jMMJq8CvYTk0j3sC/yc+y/O8Ob7F3HfF95lym/z2S4329bJ\nCJVuyuqC3KR2c2dFMzPTAyy7JsPRYwXuvq+U07EoI4rEmuw1TJf1c3zMwspb5GIa4WgSWZQI+YMU\nF5eiut1IkoUgGOdEcCi4vV78fj+hYIhMLkllSRWJVAzLtnCrftqPn0GUznWLFnQTaXZDS2vfyWki\nUzpBTzmzqufRUNVIoCiArCgYhkYyE2MmNk40OU06l8CyDGRBJeAOsOvAXLLXTLC58XWmYgvxZHNM\nzu1k5INHefyfnuSyf0nzvewpjLtno54uwvAKND51EcdujHOmN4fhuI5FnS/ysx/NR2yb4N/3WihO\nkXBVH6pLQRIkbAMK6QKJSIZMJovH6aY4VEKRvwjF6USUBQRBR1IdyLKArEiUlZYyZ9Y8dh/4gOry\nGgxTw+f1EEuGCXmqEW0HhmEhlfjqW8f6EtiGg9ryRmbXzKMkVIbH7QUs8nqeWHKGaHKGRCaKVsgi\nCuB2eSgPVtIyazGV8dtJTd+IK2tSyNaxOlrLVLYEUzrOh20RXGvrWL23mqnlIYr+2MPUxW1Y5T4a\nE1GOJzO83ufkv94I8/RxkCRweEScPgXVqSArMpgCpmaRjWvEEil0PY/P46U4GMLrcyOrCgIGggyS\nKqOqIpZgcurMMVYsXk06m6BlzgLae4/gCYiEiioQZYsVFzYgyWZpayZp4HcXU1PeQHV5LcWBEhwO\nFcsySGUTJNMxkpkYmXwSw9RRFQd+b4Dq0joaqhspLS7DIVnIVgpVskmrC4gmZ3jkpZMY8hQl13jR\nrpAQmSa/UMIMOBFVJxM1QbJSBC2Zx8iaYNvnWtpdIk63jNOjIMsS2CKFrImhmaTiGTTNQBTB5/Xh\n9wdwe5zIznMbHBSQ5HNHYcWhEjweN929HVx+8dW0dR7nys03Ek/E2LxlPft3tvHfAL2Am2Xqsf+C\nAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Slight variation of Default, simply added branch_avg in break condition.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "func get_color(c, value) { ",
        "    var branch_avg real \u003d 0; // sum of addends",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern addend_start int \u003d 2;",
        "        extern addend expr \u003d \"0.5 + 0.5 sin(6 arc znext)\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "            ",
        "            // and also add addend according to smooth_i value",
        "            branch_avg \u003d (branch_avg + smooth_i addend) / ",
        "                (i + smooth_i - addend_start);",
        "                ",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"branch_avg\";",
        "            value \u003d bailoutvalue;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"value : log(i + smooth_i)\";",
        "                ",
        "            extern bailoutpalette palette \u003d [",
        "                [#f80, #f22, #40f, #008, #080, #ff8],",
        "                [#fff, #000, #fff, #000, #fff, #000]];",
        "",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "    ",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "            ",
        "            extern lakevalue expr \u003d \"0\";",
        "            value \u003d lakevalue;",
        "            ",
        "            extern laketransfer expr \u003d \"value\";",
        "            extern lakepalette palette \u003d [[#000]];",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else // i \u003c maxdepth? then lake.",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else // bailout or epsilon? ",
        "        { branch_avg \u003d branch_avg + addend ; false } if i \u003e\u003d addend_start else // do some work here",
        "        false",
        "    }",
        "",
        "    // draw single pixel",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the drawing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "bailout": 65536.0
        },
        "exprs": {
          "addend": "{ var t1 \u003d rad z ^ max_power, t2 \u003d rad p, M \u003d abs(t1 - t2), m \u003d t1 + t2; (rad znext - m) / (M - m) }"
        }
      }
    },
    "description": "2017-07-31, 18:16"
  },
  "round julia": {
    "icon": "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\nAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap. This one is in fact very similar to TwoFold",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) { ",
        "",
        "    var trapmin real \u003d bailout;",
        "    var trapminpoint \u003d 0:0;",
        "    var trapminindex \u003d -1;",
        "    ",
        "    var trapmax real \u003d 0;",
        "    var trapmaxpoint \u003d 0:0;",
        "    var trapmaxindex \u003d -1;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + trapmin)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"arcnorm trapminpoint : value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"trapmax\";",
        "            value \u003d lakevalue;",
        "        ",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm trapmaxpoint : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapval real \u003d trapfn;",
        "",
        "            if trapval \u003c trapmin then {",
        "                trapminindex \u003d i;",
        "                trapminpoint \u003d znext;",
        "                trapmin \u003d trapval;",
        "            };",
        "            ",
        "            if trapval \u003e trapmax then {",
        "                trapmaxindex \u003d i;",
        "                trapmaxpoint \u003d znext;",
        "                trapmax \u003d trapval;",
        "            };",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 1.75
        },
        "cplxs": {
          "juliapoint": [
            0.0,
            1.0
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true,
          "supersampling": false
        },
        "exprs": {
          "laketransfer": "arcnorm trapmaxpoint",
          "valuetransfer": "circlefn (value/2)",
          "bailoutvalue": "trapmin",
          "trapfn": "dist(znext, z)",
          "bailouttransfer": "arcnorm trapminpoint"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 5,
            "height": 1,
            "colors": [
              -16777080,
              -1,
              -12320768,
              -120,
              -16777216
            ]
          }
        },
        "scales": {
          "Scale": [
            1.3968480486424057,
            -0.3310703457534552,
            0.3310703457534552,
            1.3968480486424057,
            0.555454724100978,
            -0.03702206120854912
          ]
        }
      }
    }
  },
  "siminbrot with julia spirals": {
    "icon": "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\nAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Slight variation of Default, simply added branch_avg in break condition.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "func get_color(c, value) { ",
        "    var branch_avg real \u003d 0; // sum of addends",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern addend_start int \u003d 2;",
        "        extern addend expr \u003d \"0.5 + 0.5 sin(6 arc znext)\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "            ",
        "            // and also add addend according to smooth_i value",
        "            branch_avg \u003d (branch_avg + smooth_i addend) / ",
        "                (i + smooth_i - addend_start);",
        "                ",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"branch_avg\";",
        "            value \u003d bailoutvalue;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"value : log(i + smooth_i)\";",
        "                ",
        "            extern bailoutpalette palette \u003d [",
        "                [#f80, #f22, #40f, #008, #080, #ff8],",
        "                [#fff, #000, #fff, #000, #fff, #000]];",
        "",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "    ",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "            ",
        "            extern lakevalue expr \u003d \"0\";",
        "            value \u003d lakevalue;",
        "            ",
        "            extern laketransfer expr \u003d \"value\";",
        "            extern lakepalette palette \u003d [[#000]];",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else // i \u003c maxdepth? then lake.",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else // bailout or epsilon? ",
        "        { branch_avg \u003d branch_avg + addend ; false } if i \u003e\u003d addend_start else // do some work here",
        "        false",
        "    }",
        "",
        "    // draw single pixel",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the drawing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 4.0
        },
        "cplxs": {
          "juliapoint": [
            0.45297609806445427,
            0.6467825400567606
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true
        },
        "exprs": {
          "valuetransfer": "/value",
          "function": "sqr z*sqr abs z + p",
          "addend": "arcnorm((znext - z) / (z - zlast))"
        },
        "scales": {
          "Scale": [
            1.3181939225808326,
            0.8777487661743051,
            -0.8777487661743051,
            1.3181939225808326,
            -0.03661702821782875,
            -0.003725333816473414
          ]
        }
      }
    },
    "description": "2017-07-27_14-15"
  },
  "simon julia brot": {
    "icon": "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\n6rrK/wP72omnnSTbqwAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Slight variation of Default, simply added branch_avg in break condition.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "func get_color(c, value) { ",
        "    var branch_avg real \u003d 0; // sum of addends",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern addend_start int \u003d 2;",
        "        extern addend expr \u003d \"0.5 + 0.5 sin(6 arc znext)\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "            ",
        "            // and also add addend according to smooth_i value",
        "            branch_avg \u003d (branch_avg + smooth_i addend) / ",
        "                (i + smooth_i - addend_start);",
        "                ",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"branch_avg\";",
        "            value \u003d bailoutvalue;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"value : log(i + smooth_i)\";",
        "                ",
        "            extern bailoutpalette palette \u003d [",
        "                [#f80, #f22, #40f, #008, #080, #ff8],",
        "                [#fff, #000, #fff, #000, #fff, #000]];",
        "",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "    ",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "            ",
        "            extern lakevalue expr \u003d \"0\";",
        "            value \u003d lakevalue;",
        "            ",
        "            extern laketransfer expr \u003d \"value\";",
        "            extern lakepalette palette \u003d [[#000]];",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else // i \u003c maxdepth? then lake.",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else // bailout or epsilon? ",
        "        { branch_avg \u003d branch_avg + addend ; false } if i \u003e\u003d addend_start else // do some work here",
        "        false",
        "    }",
        "",
        "    // draw single pixel",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the drawing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 4.0
        },
        "cplxs": {
          "juliapoint": [
            -0.46744349459471346,
            -0.5656743332421762
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true
        },
        "exprs": {
          "function": "sqr z*abs sqr z + p",
          "addend": "arcnorm((znext - z) / (z - zlast))"
        },
        "scales": {
          "Scale": [
            -5.02380797287278E-4,
            -0.041427492983808226,
            0.041427492983808226,
            -5.02380797287278E-4,
            1.0913249035212373,
            0.17954581268837694
          ]
        }
      }
    },
    "description": "2017-07-27_12-15"
  },
  "simonbrot julia spiral": {
    "icon": "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\ngg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "        ",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "    }",
        "    ",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "    // this one is just here for testing light effects",
        "    // circle + donut + green bg",
        "    var rc \u003d rad c;",
        "    ",
        "    { value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "    { value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "    { value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "max_power": 4.0
        },
        "cplxs": {
          "juliapoint": [
            0.3137697865134521,
            0.7548060435083614
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true
        },
        "exprs": {
          "valuetransfer": "/value",
          "function": "sqr z abs z + p",
          "addend": "arcnorm((znext - z) / (z - zlast))"
        },
        "scales": {
          "Scale": [
            1.1665565274969,
            0.3677343889481426,
            -0.3677343889481426,
            1.1665565274969,
            0.00291602854801265,
            0.018879660173594062
          ]
        }
      }
    },
    "description": "2017-07-27_15-16"
  },
  "sinh max floor": {
    "icon": "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\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap. This one is in fact very similar to TwoFold",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) { ",
        "",
        "    var trapmin real \u003d bailout;",
        "    var trapminpoint \u003d 0:0;",
        "    var trapminindex \u003d -1;",
        "    ",
        "    var trapmax real \u003d 0;",
        "    var trapmaxpoint \u003d 0:0;",
        "    var trapmaxindex \u003d -1;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + trapmin)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"arcnorm trapminpoint : value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"trapmax\";",
        "            value \u003d lakevalue;",
        "        ",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm trapmaxpoint : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapval real \u003d trapfn;",
        "",
        "            if trapval \u003c trapmin then {",
        "                trapminindex \u003d i;",
        "                trapminpoint \u003d znext;",
        "                trapmin \u003d trapval;",
        "            };",
        "            ",
        "            if trapval \u003e trapmax then {",
        "                trapmaxindex \u003d i;",
        "                trapmaxpoint \u003d znext;",
        "                trapmax \u003d trapval;",
        "            };",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 120
        },
        "reals": {
          "epsilon": 1.0E-12
        },
        "cplxs": {
          "lightvector": [
            0.667,
            0.667
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm trapmaxpoint : value",
          "valuetransfer": "value*3",
          "lakevalue": "1-trapmax",
          "bailoutvalue": "1 - trapmax",
          "function": "newton(sinh z + p, z)",
          "trapfn": "circlefn(dist(znext, floor(znext+0.5:0.5)))",
          "mandelinit": "0",
          "bailouttransfer": "arcnorm trapmaxpoint : value"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 5,
            "height": 1,
            "colors": [
              -14286554,
              -10931652,
              -856397,
              -4214912,
              -7575212
            ]
          }
        },
        "scales": {
          "Scale": [
            0.0,
            2.0,
            2.0,
            0.0,
            0.0,
            3.0
          ]
        }
      }
    }
  },
  "strange fruit 2": {
    "icon": "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\nUpzGT/1/SvqQeZhMqqAAAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap. This one is in fact very similar to TwoFold",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) { ",
        "",
        "    var trapmin real \u003d bailout;",
        "    var trapminpoint \u003d 0:0;",
        "    var trapminindex \u003d -1;",
        "    ",
        "    var trapmax real \u003d 0;",
        "    var trapmaxpoint \u003d 0:0;",
        "    var trapmaxindex \u003d -1;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + trapmin)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"arcnorm trapminpoint : value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"trapmax\";",
        "            value \u003d lakevalue;",
        "        ",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm trapmaxpoint : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapval real \u003d trapfn;",
        "",
        "            if trapval \u003c trapmin then {",
        "                trapminindex \u003d i;",
        "                trapminpoint \u003d znext;",
        "                trapmin \u003d trapval;",
        "            };",
        "            ",
        "            if trapval \u003e trapmax then {",
        "                trapmaxindex \u003d i;",
        "                trapmaxpoint \u003d znext;",
        "                trapmax \u003d trapval;",
        "            };",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.9,
            0.0
          ]
        },
        "bools": {
          "light": true,
          "supersampling": true
        },
        "exprs": {
          "valuetransfer": "value/5",
          "function": "mandelbrot(z, p)",
          "bailoutvalue": "abs trapmin^/sqr(trapminindex + 1)",
          "trapfn": "rad(znext - z)",
          "mandelinit": "0",
          "bailouttransfer": "arcnorm trapminpoint : trapmin"
        },
        "scales": {
          "Scale": [
            -0.0030675059766143596,
            -0.052405040540421,
            0.052405040540421,
            -0.0030675059766143596,
            -0.16673908173125468,
            -1.0483242483397541
          ]
        }
      }
    }
  },
  "strange fruit 3": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap. This one is in fact very similar to TwoFold",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) { ",
        "",
        "    var trapmin real \u003d bailout;",
        "    var trapminpoint \u003d 0:0;",
        "    var trapminindex \u003d -1;",
        "    ",
        "    var trapmax real \u003d 0;",
        "    var trapmaxpoint \u003d 0:0;",
        "    var trapmaxindex \u003d -1;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + trapmin)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"arcnorm trapminpoint : value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"trapmax\";",
        "            value \u003d lakevalue;",
        "        ",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm trapmaxpoint : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapval real \u003d trapfn;",
        "",
        "            if trapval \u003c trapmin then {",
        "                trapminindex \u003d i;",
        "                trapminpoint \u003d znext;",
        "                trapmin \u003d trapval;",
        "            };",
        "            ",
        "            if trapval \u003e trapmax then {",
        "                trapmaxindex \u003d i;",
        "                trapmaxpoint \u003d znext;",
        "                trapmax \u003d trapval;",
        "            };",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            0.9,
            0.0
          ]
        },
        "bools": {
          "light": true,
          "supersampling": true
        },
        "exprs": {
          "valuetransfer": "value/5",
          "function": "mandelbrot(z, p)",
          "bailoutvalue": "abs trapmin^/sqr(trapminindex + 1)",
          "trapfn": "rad((znext -zlast))",
          "mandelinit": "0",
          "bailouttransfer": "arcnorm trapminpoint : trapmin"
        },
        "scales": {
          "Scale": [
            0.04078834297190804,
            0.042981779333349165,
            -0.042981779333349165,
            0.04078834297190804,
            0.4149533375194517,
            0.34826132865355647
          ]
        }
      }
    }
  },
  "strange fruits": {
    "icon": "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\ne43y4SiZAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap. This one is in fact very similar to TwoFold",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) { ",
        "",
        "    var trapmin real \u003d bailout;",
        "    var trapminpoint \u003d 0:0;",
        "    var trapminindex \u003d -1;",
        "    ",
        "    var trapmax real \u003d 0;",
        "    var trapmaxpoint \u003d 0:0;",
        "    var trapmaxindex \u003d -1;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + trapmin)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"arcnorm trapminpoint : value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "    ",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"trapmax\";",
        "            value \u003d lakevalue;",
        "        ",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm trapmaxpoint : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#260126, #59323c, #f2eeb3, #bfaf80, #8c6954],",
        "                [#008, #fff, #400, #ff8, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapval real \u003d trapfn;",
        "",
        "            if trapval \u003c trapmin then {",
        "                trapminindex \u003d i;",
        "                trapminpoint \u003d znext;",
        "                trapmin \u003d trapval;",
        "            };",
        "            ",
        "            if trapval \u003e trapmax then {",
        "                trapmaxindex \u003d i;",
        "                trapmaxpoint \u003d znext;",
        "                trapmax \u003d trapval;",
        "            };",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "cplxs": {
          "lightvector": [
            -0.8,
            0.0
          ]
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "valuetransfer": "value",
          "bailoutvalue": "log(1 + trapmin)/sqr trapminindex",
          "function": "mandelbrot(z, p)",
          "trapfn": "rad(znext - z)",
          "mandelinit": "0",
          "bailouttransfer": "arcnorm trapminpoint : trapmin"
        },
        "scales": {
          "Scale": [
            0.04392461873274181,
            0.03488873350682219,
            -0.03488873350682219,
            0.04392461873274181,
            -0.15682612728253045,
            -1.0475726742305524
          ]
        }
      }
    }
  },
  "sum of log and z and p": {
    "icon": "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\nAAAAAElFTkSuQmCC\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "mandelinit": "1",
          "bailouttransfer": "log(1 + value)",
          "function": "(z - log z + p)*p"
        },
        "scales": {
          "Scale": [
            1.7672039282298855,
            0.02561045498733011,
            -0.02561045498733011,
            1.7672039282298855,
            -0.3291727349357948,
            0.0031796223402219548
          ]
        }
      }
    },
    "description": "2017-08-03, 17:41"
  },
  "sum of z and log": {
    "icon": "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\nCQAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "mandelinit": "1",
          "function": "(abs z - log z) * p"
        },
        "scales": {
          "Scale": [
            0.9350933126710033,
            -1.7195018819638543,
            1.7195018819638543,
            0.9350933126710033,
            0.08791376635944759,
            0.7455340131384635
          ]
        }
      }
    },
    "description": "2017-08-03, 17:37"
  },
  "test": {
    "icon": "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\nAAAASUVORK5CYII\u003d\n"
  },
  "test specular": {
    "icon": "iVBORw0KGgoAAAANSUhEUgAAAEAAAABACAYAAACqaXHeAAAABHNCSVQICAgIfAhkiAAAIABJREFU\neJx1u2d0XeXR9/3b7XQd9S5ZkmXZsiy59wrYYGwMBmObaroDhCR0AtyBiIQECCUhobcECJhujHED\njHtvsi25SbKt3nV0+tn9/SBy8+R932evNWvvc611Psx/5ppr5j9zCZ99+a1d1nQvmVOfpDd9AUHV\ni8vr4WybTXPTGeb0v0qwfCl97lmc6zLpDyeIxGKYloUoKWi6TcKwSGgGmm5gWDambWOYNoZpopsW\numlhWBamZWHaFqZlY1qDa7plEbdMgqYJpgGGDpYBkk315TMp+q4AbujB/HAW4o3bqO/Q+fOKJK57\nvoPuQC99oT5isQAOPUiOM8F1ysvUJ19Jaf27aMNGc3HRHt77ZzapmWG+3lLJNRfWYlhx7n33Iz55\n/DFEYq1Euts4/Nn9FA/JZHaVB0kEK95O6MynNJx8g8D3t5E4+RoLK6PkpDpxEeYXGX9hxWwXV7o/\npDAjiRSPgs8JGT6ZzCQ3KR4nPpcTt0PGqUg4ZRGnLOGSZVzKoDgVeXBNknBLIggAFtg6ftlgSOPd\nlFz1CpdUxUnKjpLuNSnMSQIg2esg0+8hP8VPQWoK6f4ULMnDN/yGgoF3mHn5GPqVUbyxKovktCa+\n2jyUOWN2sGhxBg53lJo3r+KaW4Yi/c+Kiurd3wbYd3CAGc638E26l/buBI2127hGfJxhS96iM+lS\nsiqWELH96LpJ0+ndNP34Gs7mvxMc8QT+1Dw0LY7QsoZF5V0Ulk4gJSmJhA6WZQEWkggOWcQhy8iS\nhCyKyKKAJAqIAojYRG0TTB2MBDe5dpPiymXvG48QVc/gnv4ikZjB7Zem8cyXJrZlIIkWXodEitdJ\nsseJSxYQBZN2cQrH+/MZUVpA1tAchueeI50eVt5/CxvOZZCZn832TY188kkb8kd//ZJpExNc8Mjf\nOBwUWQiYsQ6SrCaefyfKq1eazBp+NQ4n2Ab0dIdJc0a4qEyh9P46Wgdkqgrh5c+DFJQm07Xz91x5\nm8ATP2hcdOlNbD6iI9gJHKKI26mgOLz0hmKohoVqmGi6QVwXkQQbw5LoMwQQbLZoo3hwXC3nxv0d\nve5Txk4dT4oLvjsOSS4QLRGfw4kiOfB7s9F1jb4eD4E+AS1qIwlw60IX8Q6Rt5/xEIratPmmELZr\niPQ08eSrv+fNN15HqnTL1SturqJ42kqGj51FPK7Rdv4U5/Z/xFBXjPIyg2hcgdQRdPRBPBqiq+UE\nq/92EKu+mtm3Psyxc9DZVMehF+5g5dsn2NNRSmruWO64WObHmgiK0c8js3vpWnsri+64jxvSVpOZ\nN4KuiAdREBEFAREbwTbRTR3NVAloKsdbUgnHJWwhziVz59DfehrRm01mxzfknv8LWeOuYmLHg0Qk\nN0sWjqU/rCDYOoKlIVgJClM92DUPU3M0iSc++yst4VxONrSTm5XOsdWfc8EfziJ99+7s6q0n4lTN\n/xWCGqCvu40d6//FubXbaWwy+PLjGH51FR6vH6VxDbljLqWr/SzD3RtIdvRgiwrTZs7kzKmTTMnZ\niHFmFalT7mXJVJnXNljEQl3YPXuwd73JikeqOfTBbdRqY3AN7OXKCW7uu76StQdUsG0Ey0S0DCxb\nR7ZNXNg8OfMk8bOfsenlP5ObZ5GmbUSpe5P+7lb8xVWMmTYdd8FFFKQK9IQVbFMFM4GhRVhQIbPn\nh72suCEVPfkiYo7h9EVFBswMepMnEv3hBqTnXr63etRFj0LXXtTOI/ztvmXc/9BtxON7aG9qJtnX\nye69+ch9Rxh3y+/IzM6mq/08Pq2ONH8ms277K6rp5OzJvWz+qJcF8wvJHjIM3ZFNfXMYrX07vxyx\nEV2U+eq4QP7ImbRZYznSmcKJLgcb61J57zdpfLMvhm0bYBlIloGCgWAbtPXKjB87jsLhOdR9/ymb\n1zpZ912cKy9tYt+XO9m18UumX3svDhkCYcDWEdGw9CjbjtQjDWzi/ieLWHq5F9+wRWhCMlHDTXu/\nzqjScuQ7Zz7LsKH3IsoWcW08aXI6YuAg3ScaqastYfUXRfTbQxkw0sgorCI+0E5uqsJuvRDr8EdU\nHXgSf+XDpAQ28fcXh7DfXEzX8R7mzwen3YvVv4fvatZScPHrZMojaLJ8mJKT1KxkLNFDRbkCgM/l\nwDAcmLoCpoO47QBd41QwiXUnJdLco+iv20HJRR5KdIWDB2Vuef4Nop4KUlzQHgCf00BMc5LszsJJ\niOZoC87Cy3jkjq94+48NPLTuETKzC9CENFwppbQYLuTyeS7kPosxo30crjuMbMGWDz+lrc3HFfN0\nxMBWCucup9BdhtWyiWhjLf3fP8PU8b9k1RoXmdnF2NE6zh78jANdI5nw2PM43R4a2k1SxHaSgjuI\nBMJI2hHyhy2hvTeOlRAQnSKG7eC2mU4AXA4Jr1PG1B1gOZAtJzo6mCanekzSXCITVjzFsKwooy7s\n5/TJPfzz/tsoHZ3HrPs+J0fScdidJLuOI5XdyjEpQrDDSaChh+++TuGtV4djxXtJ9g9Bw8v8SV5E\nAeTsquuIxDT29Xcj5LQhqqfZc7wbUUwQjof5x8cgf/Q8w4dpDAz00nC2iCdeuoq4HmPChTrP3P04\nKx+8nkxBRyuoQCFKJCoS6zmN0LeP/rpm7rltAtsTaaR63XjiMqZoIxoCDy4etD6AUxHRFRnTKYPp\nQLad6KKBbVhIFiRMgSMNQZrbVA56ZZZMvpiGH3ZzwYQ2Xr91IefOirzw7gWYvrGIdpysFIW0JImz\nZ3dyyewq1vzYReDQk1x977+YWAx76iEwoCLnlE5m1579CHi5ZXSAmDycnvxWftzkw+kUcZfYHN8t\nkp0GWw+N4M7bjnLtYj8TKjqYPC4FKbeX+1Z+x+L5Hi5ceidIGi37P+ab3/+OQDTK2JkmDa0JvJlB\nJAEcioLTgl9d9r+60xMCpyxiKCKmQwZLQRFcmJKFbQqItoxkyUh2nKgBZljlk+0Bli67hDfX72H2\nzDN4HTo9ZyTSp0wHvRuPECTFpTF0mIwY7mXuvV/Rp/lxO6Gxy+Lc4bUUhD9H2LH7gL127XqumVfC\n8bcexUpuJ9BSyu039JBcdT+vfLybYr+fhD+Xru4e4gMtyFojhe4uzhzN58sdOfzrT4epXPkCrbuP\nk58p0HP8S97+wM+UXz3A2ZP7aN3UwFPbtrH3nJe2PkCCpZN+BuDpz1Tiqko8HiMej6GqcQw9gW1q\niOg4RBNZ0MGIYukRBCOCZEVxClE8UhSvdpZRuRpq41pO1udy4WyZvjYns+98lGd/80tS5VQe27AD\nXGWEQmEajxzkvXuuZvS0KNJd9z5Z3dAa5NDJHgonz6HA0cjxmrMkpSbYuj3ElKsf4miXSGt3jLim\ns6ByBGnJCdZ8kkRBUSP3LOtg0xYvel8/W9b+yOnmg6xba5NV5sU5YjndMS9CyVCSa14kNmQJqqmw\nZDL/9ew5ZWJbg9mdgIkoWCiijcshkuJzkZORQk5mKn6fC5cioUggiTaSKCAIAqbkpTskUpjho+lE\niAP7ZR58bgEuM8HWDVu599GF9HQGcHuTOPKP64m2niZFOsnlL9QjLV3xUHVtfQd9wThtvSqhYCFm\nazenzlg8+NG3fL+7mea2bmzbIsntoDCllYmpm8nLi9Ac0vjhu7Hc/chY+lo2kzPjl5zt8XDRSCf5\ny99DtT3ETYW+gQStZippRdMxRSfleT8r/8VBCEcMLMsA20CwTURMZNHC6xRJT5KYP72Y4uJc3E4X\nimQhiTYORcDrVsjNSiM/Nw1ZtOiJSvhzRdIya/jwb0dZOKODb9dD4ymVBTdexN/vXM4bH2SQM9XH\nDXddwf6ucciHT/dxviuCE4nM1HRkn4+pjiiXzJnAvjqNlp4ECV3imkUX099+krqafRSX+ohkXUoR\ndUwpqWHD+hg3//ZjTrYmEJsNHFNvwnZl4AUyLA+2kori9KMZIrLrv63f32+jiDamaGNJNoIiIAsC\npmbgtILkOkI4g92kj7gIt5KGIiRwiiqRkAG6zQhrDTMWVXNgn0TX+SiXz85h98YwM4YdYuHyKKOG\nJ/PQvS6uu6CaORdGuenWNtLG3s/T/97JRddnI28/1kx3UOPhFZcRaD/MzZeNZFP1W6jD7uTg3l46\n+1Vsy0Fk/W30dYHLG2fLHgfK5CIaw1FUtZZNa+KMnbKa8UufJLVoIho+LMmHoosoXovkDLBFN5LT\ny9yqn5X/dDfIooUsWiiiiS1ZOAQb2aWgRi3mJ9fwyfNPsmhtHal+ME1IT3FhJNxgSOgRjd79W5Gu\nbKIoXWDnB/9m1Q6Bsx0uDtXkkZMpIIltfLu2l6svTSFt8l2UTlqGI2s0IyZejtfvQuopWlAd0U3E\ngWbmpIc5u/53RGJNHPTcy5G6s0QiMWRJJD2viD1rjnLTtQ78F77IsXMDhCIagreY4sL9XLV8Pj2t\np8kffRXepDQUpw/Z4UFxenG5vThdDmaW/6y8DZxsAcs0sEwN29KwzThexWRKeRJ5uZms33WEWan1\njF5yPyYKpgW2qZGIh4gOdOM78ARTFs7FOrsKl9PH89Wn6OhysmjpAOlp/Rw+VkZ5iUxTayn3/OtF\nSqbdS0pGJj6PC6fbRTisIQZjOr2ayGeNJvdvFng/8St2Fa1i454ztPZEcHuTSc/I4nQ4n6JynUR8\nFP1mJv1Rmd/csYwc/QA7Ns+g9qs3yRpRyUvLc3DJBulJMCQDyvNhTDFMHPrfrr+xBiTBQkJHEXTc\niolshVkk/42G9x9lzLAkRpYV0qO18vLiUqTIAVKcCVK8Ii5JJxFsYcq0UXz73j9xaWf48h9vMnl0\nC3c8MZVj7VkUFks0Zc2idHIvBXm7eGrxclbfWcqjM1N4Zu5I4jWvIBx5AImhl1djg2FDjyXSGxNo\n74sQisVxKxJP3ncjSU6D6RNK0U+/wsYfW0ieeBPt3UG27T+D7hnGRYUbaQtGePqlQp69P46UlQSW\nG5R0/t+PZg4mIZYJlqFiaDEEK0Z2isjw4kw+3VxLcts/KU9rZOL8Zew/3kmW0YkWbSei2mQXlNDT\n2UTv7ueINB/g4JFxHKjRuWjFpWSMnc+p1hhxFQg0UGzs4bq7f0u/Zzhh2WZo5nFycmahjhjNMONT\nzNbjSAxdVI39s19GLYt+00KwQLRtLnXvI+XEH6jfupYxl99F5vynOXamm77+MJoBUV2mS6kgI6eA\nC4Zs4JuvOslX1/DI7Wu5fPEISC6lMwSBGHSHoSMwuJexdCR01FiAWMtWeldfyBW3/QE1FuJ8VwdW\nyxFKx4yiv+UUr7zQy8OvP0D6iKuI99bTeGwruUlRPnv/HCPLuln+m+UEpWGc6jTp7gsjyRKG5Kcq\na4CkFBnv0IWcagqQM/W3tDhG0NqToOnHNvb1ZyNRcnk1gvDfZrIhCsi2wI7zEssWTGegrYW95/o5\nq47kfEsXsUQCQRCQJQkkmf64i/P1Hbh8LUyddRnTr70eM7WShCmz7e1fMHHWZSDKaKqFFu0nzS+S\nmSLhkEwO7/2ert0nGThXz7T09RRXzeXQ4S9Rzn1GWXEhhcn72bfuJGNmlBJuPsIQdytvPvMRoWAa\nK24rIKS6aBbG0dY1gKZpzBpfSkb4CAOJVqYvu4nMkrnklc0gZvsJREw6eoLMGRVBn/kaEkOvqB7k\n4gQQ/lt0QLAFvj9hc84xjj65irbOPmKxBF63k/RUP36fm4w0H4W5aYgeP0LfaZLi9YxY/jfcbon9\nP3xF99ZvcDk6ETzZ6IaFUPMGo4rOkAjGKRk2ko72FkznALU/fMGQbAentm1k2eVj+PCTNqYOb+D7\n3Unc9fFawnvf5rGV7/Hl2l4qh7Vy7RUWR1qTSZ72BO09UQLBOHFVQzv6BXmFEge2OJhUvJNPX1vD\nnJufRHalISjJCK5MAplXogk+JEoXVyOIDBJzP70FAQQwBBARsGyIqQaRWALNMPE4FRZfOpuC3DS8\nLgGvEODGW65GiHQTMyzWfdHCujf/wWU3zeL7fz6AHvKy8Dd/IiWngvraPaid35PlTSJt2AwsQ8dU\nw0iiiJws09VXB4aP3dsifLuvlK++dvLqa35WXPIFh3YfZ9ElSaRUZeMacCBXLmDUpAWcj6TTNxAj\nGtcwTJFQ0gj6gxZDC5v4ywsZoAYZpmwkd9ovcPpS8KUWIrvTESQv8s/KCyAOOgLiTyJYJLCJWyAZ\nNtgCoiBiWDC05UPyFt1P3fFejn/0W/qzdlDuSmHyypvRW78iWb8Au3UfpUoK6870YMRqkZAIth2l\n5bt2Rue34A6NQbY85Md/JC/1LH3Tx3LqWJiLK012fH+WS6P9zJjcx7aNUf7ngVR+PBKgeOEjdNd1\n0pFQWFCSzUF9LAORGDEVdEvBwIFl2nRLFQTsIiqv6SQj9BlG0gJEWyXTp5CX/B9FJWRECSThZxD+\nA4BggyAgCjYINhY2BjaGbRPTLTZFRjL5r5M40ySQmhHmjRdX0dEnk6R8zR+ezOXpZ89zQc1pTteH\nuO+JBXTV1pA/Jgs70kTd6SPcfusQhKQXGJW7h9ozQ/m88zT+XY/RJPTy+BPttLYP4abrT/L1ZoWb\nbyijYt5Syi8eiuUfheqPIaaO5AhlxDSbaMImoYNqCGiGCJaIICpITj95WWlEWi7lXy/8wMKey5hy\n8yu8cPVkpj/8Hb4hU5GRZZDEn9yfn71AsPEKFm4sZMFGFC0EwcLERjNtDpweIL3gepiRzbmOJvzZ\n7fx2qsixH3bwt3/0kJ2exrV3ZDB/bjeF5ZVQ8XuMurdwqo1cszTCZ59rrKvz8tKvTJq7zvDgZIFn\nX7iFcHc9Dc0jGVfeiuSDudNSWLtOYPN3r7H06myOt7tZVL0NT2Yljc19aJEQqiGiGgKqDpopIIsK\nDqcTt0tnxeJUPni6j0lzBvjwH3WMLn2KU3U+hm+/n6bmECKKAxxOcDrB6cLhdJHsdJLlcJCiOPAq\nDpyyjCzJiJKMIIgYiMQMB1u78unTkvEmZ7B85gjuu2MD4Vgbu44W8O63OWz6pJOHHlsEFb+H08+Q\n6DtNsOsIjecgJ6+ByypPs6vGprJC5sX9Nn2tB8lwgGalMHVSjNFjL0MYMpS0igH6QgKfrm4nYYrc\nO3omsuIEyYVpKxi2jGFJaKaIZgo4nR5ycrJI8ripvvZuSirzOFCr8NCv3Lzz8SfcsLgLo/0klSPj\nyDidoCikyxJeSUAWbCRsRMzByuyn6kyyTWTM/42RtgCCKPDoHXNY89m/OLHxZW5+ZBqTc5tYt93J\nLxcc5uGnYNzIU8w8nML7X4FPyeGBxyr46utuPv9xIkXJvbz44gikOQdIfJ5F3cEBGs5KtMX8jCkv\nprCkAtURoyWgMHZujKRR13D0eB1Dhm6grSuIqoOJjIWCJTiwUNAtCa9L5ILpVYS2PM/4S4axqWs4\nat9u1u0K4pnyDKd2voSvbBibmnwISbd+b+e4XCQ5ZBRJRLQtbNvAtgxsyxzshliDDK1oG0i2gYSB\nQ9DxSirXl+4lFI4TcpUxp1xh9+o/MCrfS21rCL8BG7bInO6cSlzx8erdG7lo7hC++KaZdz4ZSX1k\nCJ89/iMH63S27B9KfacDU8hiycydNDRV8OH3N4CcRzjhJC6k0xuT2X2glpLh4xC8RQSjJv3BKP2B\nEIGBIIGBAaKREKIV4wrvQU4ZLkbMvIW929aR09dIuHw+kjOVSDiIngghmiGEMb/ZY2f7k/A4HQjY\nWKaBbmiYhoZp6limjmXpgy0ryxhsPNg6MhoONDxinHRPgqIMWF68j0/fPc+CFWXsOnwSPdqErA2Q\nZMHBQwLBaDnXXxZEEntYtS6JTWcvxEsbTiRShHpidj63L25jzoxu0rPzyL7hXWg5BcVzgSqwLaJx\nneYend4Bg75ggkAwRv9AmIFgiFA4TCQWw9A1ZEnEoTgQJBlVTSBJEoZhYOiD6bdsJyjIdCFX5KZS\nUZxH3JCIxBLE4nFULYGmJdB1FcOQME0J2xSxTBFMwLYRLRvBtrBFJ24lwf3Lytm56kNW3pPNV0cl\nLDmVzCwZD610tXfRHczhUFsexYejfLankhQZIg43upGGEzchK43hnho27TS4+8EJILjZ/OQCZi+8\ngD9c/x6yo5PZF0xn6jVzySv5NRHVQI6BpFjIDgPFaaLo4LRlbFHHtCyiBliajWHKGAkT0xgU24Ak\nh8JTj9yC9Nmv06uboz5SM4u5cZ6XUy0g/dS0lH8SRRSQpf/8Hjw1JdH+6fS0sEwb+cCznA55OCcv\noL1ngId/kY/d18qsChmPox9JCmMHDLafTuGkbyotiQySqyqJ5lURyc8hJmVgBGSwZV79NIWvPzjL\njYuC/PFpFwdOifz2jvO0RxOc3rqDkiKRgGsqcQ003UY3QTfBtARMS8RCwrAlDEtAM0EzbFTDIqGb\nqLqBYdpYts2RA3uQXZV3ktOSSsyUGJoBfq8L6SdOTpVB1wQMQ8Q0BExTxDLAMgRs08Y2LQRTRrNl\nvhVuxeeO4+6I4HGl8MLrdQjnDvHHXTl8/LKT1pw4HUMG2Ns6goJMmUevDVPx3WP0Zg9nfOIk3Rv6\nmT7xMcKuNHID2+iS8lj2oJeoVMSqPxwgd+pjHD1ukFzQxdldB+FSEVlRkB0uFIf1k4BsiEiWiGjp\n2KaIiYZuW6imgWaAYQiItgC2yPl+B/LGd6sZsvRNrhs/WAd53TLYDkTBRJFsdGnwT4YhYJmDQFiG\ngKnbWIaFbZqIlgtJEqgYWUzVsEya62voqD3MD9uGUVnWgJ48l8M123A7ZTKFFmrOprOrVGa05GGi\nehLdhIZ7r8avDmGkdYA7b6gnM8Nm/wkYXVLPi6/k8sGKsYxLzubM+T6M4jG4nODUZRwOG1kZBEB2\n2MgGSCYIg3k8tmBjYqHbIqoloJsCgi0gIGLgRPp2x8Hq4bk/F4LHW4TBPY6NKNjIkoAiiSiyiEMS\nB78lAVkCWQRZsAcpLckm5/QHjB7qp2x4EcOTe4j3/Mj320t56cMsRC3CluPDSJDAicL2vmGIyxcy\np+V7ZAlmJf2WUkGlvydOUXoj48dCfwSa2y2uulSl6LLfkJZWxojKSeTnpJGdDD1RiGvS/7ENbAwT\nDAtMC3QLDMtGNy00wyJhmKiGiWFZOKVBxllKqnm/uuzy+/A6BgE42TZYDgs/DTXIIiiygFORcCgS\nDuUnAMTBOCAKNqJgIqLjo5bO3e+gte3g/PFtfLO+iIqR3dy06ARt7alIdheSIdBsFZKsdrO9yc/M\nxHm+LnbT3VCK2biF/FQ35zpzefBWDVOJkJ4M/pJpvPfcX5lz4x9pb9iPo28bvfteQM+/imgCVF1E\nN2x0Y1Bp0xxU3DDBMO3BOGAOziPEDQPVNElxO5lQXoy0bOmE6sNrnsY97tfk+KGhC7D4yfo2iizg\nUiTcLgW3S8HllHHIIrIkIIo2kjCYKGFpDNhZpDkakA2BrdvzyM9xUTqyjXFVELGDFBbEqKnPZnTa\nAdRYMlYkwXp7Ekd8y/Cf/BFRFkBtwYjpyKbMFdfOoqR8NvllU5l93UribSd45uZlzJheyO4GLxll\nFxHTRTRDQDNAN/4zmzToBYZl/+9bN0EzbRKmTcSw0DSVx0YfRr787rdo6LSQgIgBHgdgDAZBARnd\nAEVWkGUZQRDQdYN4TCYWg5hkkBB0dFHHkj04vFl0JVbSFmkn4+JuHEYvUd3gx5NnmD3RIkkC0TjD\n2+suYEDwk2oHyVLPYcRSUJI6yZCamDg2xtptIxleVI/Z3oaUdwnkjIFQG4c2rKY0B2TBYurSxxHc\nEuUFsPYwyLKMJMvIsoIs24OiWMimjWzYKIqNYoLTElCRCVsWN2zNRfr9E/9TPWxoIckeONMGpq7h\nc5pY0VamjfLQ09dHz2e/ZvrYFPxDRuBwKEiSjIgFtolg64PhRLEpK/Sx6OKZYCZI8TrISnUjWCaW\nZbF/W4AN28vZfSgTQ/YyOXMvc8Y1MiSng2OHBYb44lQ/1EJzr0WSbPLHby/ko8/SqN1Tx6YPt7Ng\nUQpndm5m2V230K+MxpWUyfFv/0Sqw6LTHkZCEwa3gMngFJoNli1g2gLWfwQBRHmwUpRd2JIDKbNx\nc3VS7/uopz9iZ90AC+aMoNi7h3V/v4eLl9+D99Sfaeo4wICrktToUSZNHkt/TMayTCxTHRQ9DkaY\n0189x9IVC5H0COGD+7nihplIWpREtB9b7WDN1nxefrCWsvwmKqpUdNtCUaCtTaMpmsXd1/dzplUn\n2amwcnEtc8e3YxpeyoqiVOZ38tBT+QwrriU7M4Pdr6zALl/Bqn9/RcmUZagG6IaIYdqY1n9yArBt\nsBCwbQEECQQJUVIQJQeiqCAnquaz5dDHNNW1kV6ssffs47ToCll2ECG4nXeffZlf/KuGvoQHtz8f\nAJ8H1LiMFpcxEiKaaDIQ7sUXOEB0959Y/dcv8bvSID6UYTkKVtBPrFHGKzoYWwUxN9TWQ4ofxhbD\njzsT1G2MYvclc8MNi9le00JjVxtq7BxpQ9uJBWDalVncuSzB+tVBOt98mYmLhjN/yiKyx1xP1IaE\nCTFVQJFlFNlGkUFRbAxLwGEJGJaIiYSFDKKBaNropo104y0rq116Gyvn99HSUk9fbxrRcB/fHZ7H\n5nc/ZeJsP8MvWIkvJY+cNAVJhGAcDF3H0OKYehzRVsGMEfUX0tN4hsrhfYQCQ9m/4WvM/n2MqSrm\n9feDOHzFXLc8mZrzMilGBmo8QF0D/Hh6Fu3HGsgeEkZLmsbp1iiRqIrXJTIlN8af3h5DUaabWRNq\nmDarhKV33cyU5U/iS87FpdjkmUepHJ7PyXbQzUHGyrLBtgfpPMsWsBlMfmxBRPjJEwRBRJIKFlYn\nR5uxlWx6Uy9EKRzFhJQeJPMUf/zoOZJHXI0vo4SUFB+SOHhUhuOgqQk0NYqpR3HKOhdMHYnHJdET\nMcGZQ0Q7RCIRYfW6Ei6bdZxvt4zCjp5hxsVVdEW8nA80s3NLPp1BP2kQ0xhhAAAQgklEQVSizaEG\nF1MqevAMX0JdQyfLLxmL0w7whz8XcN2yQ2w8MJzcrCY2fd9N0/EdjEo7xj8eegi/9gNOdYDTwlzC\nCZHls2BOhcgFlQoOp4OGDnMQgP+AgACCOFjTIyIljVhU3SGUcCJaRr+RTkQVKRo3h17doiSymew5\nd+DyFvAf4nwgDoZuoiaiJKIhTC1E45ENLJggk5mejRpsZuEslfD5OiaVavhcQVZ95WHG+AhLrpUo\nqVqArmTT1nKaK29dgq+smIJRAuMKd+K0nMjlV3G+LUDjie18tcrFdYt6CSgWmfoADz22CI+/lfzJ\ny+k7f56ElkOk6gF2NNiUu2sIeyZTWfBzUleUKXDJOCflpW72ndAGYwH/BxCIyA6nF1ExsCUTS9SJ\nAd8eDFPlT+GPz+/H+fdyyofncN09N+OY8hROyYEmGYhWAkMNcK52G7+5Ip/fX7OKp1bfRuzk2yy9\nP5Wy0myy8yOsXVdOdmoY6aRGRXmUuj1HGbPifnJGzufgiTa64rVIdgYVo2dx0aXX8s0xkajpxuGf\nRL5vE+OuvJVzn75JRHej9vzI9GWvset4B5bkp2LeTQzEHcSELE7ZQ0h2/n8aUQCUpsIbv0z9rzUd\nOBYEaeZlv6r2ex3kpPupGF5Cmt+DiEF3WGDJ5XmQqKX2aBaLfjWTvc9cy9D5D2JbOqGBXrraGpiY\neJ/Oo19z9FiCf720jjRHmKt+MYYBu55jezzcuKyZxnOFXLG8hQNH47T11tPywweUVaZD1iUcqa1n\nUkUWDbXb6NGHcDaQxNQyBye+/pqRQzMI502hLeIlo8DgwHdNXHjDQrKL5yBmTcKTkocvOYeMnKGk\nZqYzczisOww1Z22ONQtUDfn/BwRAAvJcIF198+PVSS6oKvFwQaWTnIKhSIKOyyFypiVMrt2Epbqp\nO7yKqiV/xuXyoDhd9HS2ULfl34wqVnj2hTO09qTyzKtTkYbO5Oh5Fa3rCNdcGMeZP4Z4MMbQYSMo\nnXsbZ/b1UTpvMS8++CmLbrmR+h4HzQEXavo8es08+kMJTrVpeAqLyZs2n2P13UysGkai5QT5eecY\nPiQLd+EU0nNG4vP7SPM7KEgXyU2BPaehvekk0ZoXuOGKKo41CeSkOf7vKADSbff8rtqMNGN272D+\ngnlIooRgRJlX6cTrTaK+vZ9t64I8t/pZ0vKqUDImEuutp7FuLwsn+/jwH2/S1DaCz3+4isZQEbWt\nBn0DETwphWxb38ryO++hNhAi3rOdMaPnknHJfazb3cK0slR606fSGYBA1CQUNQlFEsRVA8MUUfHS\n3htH002srh2MLIiz5ZsQHnUPdy1dTeXoIHllM5ElCRto6ICu9rOM43OMQ2+TONeAu383x5lFcfb/\nHQTp17/+dfWZ925lbtoBcsfPRO05z+u3X83U2YXk52QhaEFKU7bx/l++Y96dKyFQT8/5E1SWqHzw\nwm8pSRepnJBgw3e7cI1YQXN7PxUFDgq9PYzMO0n5xSs5UC8REfIJNq5m3lW/oabFRX/6ZJq6VQKh\nBJGYRiyhkVB1NMMcvFdg2T9NmotEhCzk2HlkoZ0DB4oIG7mEznyLu/MbvBnZkDKCUHCA4wc3s//1\n33H906+z+mA7LamL0WrWUDVjJu9us1m7T+dgE0wfLv4MwKjw9mqhr5+tewO0nnuPja9/yYgSDy3H\nDvDv1z/htr+8x9YvX+ahe8YgGiah7g5efeQ+Dm1sISOjm2+/H8HlF/spXvIBXUEYCCU4363TMWCx\nZ3UPLccbmHvnUxw4HSERCRB1DaM9lk3PQIKBsEo4phKLqyQ0A90wsEwLQQBJEpElEUkSEUWBgFCA\nmToKqX0XF04a4GzXMPp7mskfWYriSccyTdpP78I69x0j5y4nc8LduJOLcJddSPsAdHTGyfQa2DhZ\nf8jggkoJALk7GqdgyaMUJEzawj145gXpirXgVk9RVNHFHP8C/vwobNx4gIVLCtm65itEo5Q5t5TT\n2xrmT89O4ONtR5kxNRXdthCdKViKQdiSSL9yOca5vzFyRClJ2aOJpo5ie0MSkXiMcNQgFh+0uq6b\n2KYFNiiiiEOScbpkvE4BRTKRUREtCdESkOeswJvVQ4XyKSsffx7SZ0FKBX1HfiRLPM+RdhdfPrGc\nK98zKC+CBLB+Z5DS2tuYXnwM/Yp6QrU/ELMX8MS/okhpc5+p7uzXMQyT9DQ/DofIwzeOJhToY+E4\nm3Nng7y3egI5yUH+8rKT7Lw2UrLD+CuWcrLDTarQypgbPqQvbBOJW4RjGqFIAlXV8bokSpwyzdvf\nozfvWnpDFgMxnXBMIxLXiKkaCU3/6aqNCdg4ZInkJC952Rlkpifj8zjxOGWSvE4KctNJS3bR3j2A\n0NPI+n/WIvevYsjoadTu+4Evn/2WeTcMx9QNRs+8FMWbSU29SrDjOGnOAOfEacT3vMSmngmcC5di\nGDayajvwuxRS3b3cct2VbP/+a7584ZdEQknsKxlg+ng/grSHX97iYemNFsfaZ1E5dSkhckjqVWiK\neyiMCoiOJBxuAYdbBSmCZsUoLUqhtOgetnWU0RvSiOoC0YRFNGGQSBgkNBPDMLFMe7AjJ4oIokyq\n38f8i6aRiIUI9HcTD/dhaQM0f/EYd730AYf3ReiUZ5Hk2oos6uBKo/3Q6xTle5l9+a9p6JVo6Yfc\nZIj0NtD0+R30RhtZ/PcGzvXewThSuaBS5KXPA8hzZ0wj3Hue+6+dSmLv/VTabgZyhtA/ciwnzxxC\n6QwxapzJ1bcnsfyKZm56Zz3oGoaVSnrRWGKGC1tORkoIaLabqCYRTggkLCdnQqk0NmYQ00yiqklc\ns4lpFjHNJK6ZaLqJYdhg28iCgDzIxqGHm5lS7qU75KG9zaS9NYi35xQ76mzSnH1Myg2SPG4UX7//\nPb9/cSgb5z3L/k2p9AVV/GkZjC0qQ/Lm093ThxE6R09DJ2KajyTjJFMr5wGwpQ7sWAvyVRcOo7ZO\nZ9+71xGoP0mrqjBq0ZMcqznI4lnTePq+7fz2+QsJsJ10Rz+BVRN454sZPLx2NXmpmQBENeiLgC35\nMPBgikk4vDlEVQvVENGsQTpKNWwShk1ct4gbFqpuYZoWIoAIpiRgWDaORDNS59ekuMbgLUxjoC3M\nmpc/piCrn38/eS27dutIchI3X6kTMHP406NrEKRUHnl2FkYihpKTjxZqZaDjPA0fPsBlM8LsP6bh\naHuT3fv2U3Lx4yS7TBxmD7Kx9kIWX/Jr/qc6yv2vreKbgwF219XjkDN4+dUDzJpi48+biOU4z4mB\ndM7ubMSTtAua36Hz5BnSx16LI3seQ9IkEEVM/FiiF9ERpT80GOnjZgIbC90SUU1ImIMt9oRhYVs2\nDgFkUcRmkLgIyCN58q3jhDf/lb/u+hx1ywPsq3Oz5FI/peNHM+DvwJk4yve7BYRoL7cuDZA/eRFM\neBsCW1Ab11D77Tvs3yUwbek8hpgbqG08T+x8LS1b1iGjMmnJU9QflZD+dM/I6re2u2jc2kb7kGmc\nOdtGxYhi8jJ8JPv7OL7DyZV3L6FLyyMgpKMqhUwbk8o7f/wXl10Ib/z+A6py96AMuZQUj4v8NFBF\nkYTuxLAc6KZAQreJa/rglElCI6JqhDWNqGFgWBaSIOCURVyyhEsRcAoxpvU/x9hSH+27viUodDN7\nXj76iOs50arid0uMoAVPukGGK4W+RB+PPzxAafR3/O5PMUIH3mPbljArVxwH0+KWX4R54n+G0RjM\novZkK1fe9w7IXjpa6pHGL329uo+R9OSU0tbZh23ZJLWtYljkO2bPnkAs9hXF035Ba79FS3sPhdlJ\n9JwKMnGsysmWEM6UOB+9nyAe1imbNI2zG6oZOf5CRuRBQ7eEaojEVZOYqg8qn1AJqhp9qkbAMAAb\nnyzhczpIcjnwOCUcos0Qu5YPVwWpPycx/b63OB4YQltnH1eUDjCluJO9uyO042bPTj+3/Wo2noI4\nQ7xtHD8ssOeIj8yMKPsO99LbpNPc6SXSp3LVvbcxbcm9iJ4cEgOdCEYIKZK3vPrI6SZi8QQOWcbl\nkLB8JVxV2c4/nm1k5cOXkzx8EZ0B6O6PkZXqIZ4/jVjGPM7qY2nTysj2a7y99ixXTrcoqJrEV19s\npKvTZPr0Aho7JGJxi0hcIxzXCMVV+lSVflUDQ8cQBPI8brKSfaQlechK8eF3Czg7N1B7LMEvf1vK\nkcgk6htbSfK5aAoKHPp0Pwvu+xUNHSozxtQwa+411LQo5JaMwV9ZTm6FiD8nTrKzncazEY71Tae5\nKcZNd2WjNmzm7/fdzsSSDnILshE3NnbSq8KYUaMZVV5OTnYOouzmn2sTnKjvJ7mwAMWZRHp2EYXD\nxtFmlNEWkKlpjNDSo+FJySV33HSev2OA7W/+ApQEofXPMXNWMR0H17B0Fj8RqQoIErotErKEwSar\naQMCZfn5DCvMJz8zhQsmDuGimWNIn3gNcybYRCpe4FRTmIguc+t1l7Hy2nkcOdFPs1ZCWCkj2C7y\n2F1vMPPSGzkQqKKuTSAhpHDBrNkUlleSngYzCvZz+81HefW+v3PNFUdI9Vh8/m4N7Ts/RKL86uoC\nr5MP/7AAlzuNVL8TwYphda6lxN/Kj19vZuqiG1EdhYTjAqGYyUBYZSAUxTBMZCuKse8prl68gH07\nTZpO/Zu6Iyqn1r/Hms+bGXvVjTT1SATCKgOxBP2xOO3xBKgaGAZgsem5KwE3HjHI6JPTGD28iOb1\nrxAumcbh8DjOtvWgaiaBjjPs+est/G3zd2ypGaAvECGjbDz+0CZGLnqE2vp2dE0lwx3novHtVKa0\n8KeX8nnl5QwONvuYOD4NwzpPzuSFBKwems4eQcqdekt1ltNG+7SSKuEwRu8BCkYvgJ5d3L7ER6oj\nhM4QXEPnEIhCKGr+b0/e7VQYPXIIWa5M1h3vJVowkX7fJVSOnUBRZjNVc4bTEU8nIeUzELPpC8Xo\nicboS6igDV6IwrTYteconkgt06QfeK/tWvp/eIxA0qXExz3HjuMN9ITDuGQZzQBX4wb6z/fT7BmP\neORlRiSfIz9FJHPKSs60Jujq7ma+9Ck9kWQ+WOVk2dw2LDudikWPcairgJhvGD1BlWljhhHsqEGu\nzMrgxWl15Izey2cP3MI9a9Zz+vh+imZM5q3XPmfn/jyqX29C1FXcniR8fg13UhzbEYb4WdJwcDjz\nZiJWIy0RB0Z/goNmmEzXckp3Pc4v17zGudMNBGKl1J63iZk2WAzO2NgiWBIHOmwOBFz81TWNXU9e\nwrNv+RDcWdTtPMHJ/jAj3U7Khw3h9ivHopXXYedfwLYDEv059xJMBIl88RqvPS4hunOISYW8GXqA\nUiHG+Ekf0nk6hQm33cnuJoWWPgNNk/G7k1n9ymoSqoJcNSSF8w0b6Wl4ha5eBbN9LU37NnHs009I\nmF5mXJdMX2+I3MaPSCq4ndS0bNIjMBAX6erL4L1am4jaTyjmJKHGEIwEOT6FoQVDGfqLL3j/5iqs\n4lK0sV8S1XS6tZ/6VjaDANgWGEDMRIvHmfTIt4NDW2IYdB10gxbbZqnrnxxdP4K2Dd9j33A/J9v2\nkKK4Sc3JpeK6cRz58kVaQ8vpDlk4BYW2mI88PZUz5wIUt5o0desMRC0WzJ5JtPsUSlGAmbNG8/8A\nv5hjebki8YEAAAAASUVORK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Default Preset",
        "// This is a good start for all kinds of fractals",
        "// including newton sets, nova fractals and others.",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop, ",
        "// value: a real variable to return some kind of value",
        "// used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "var i int \u003d 0,",
        "p cplx \u003d juliapoint if juliaset else c,",
        "zlast cplx \u003d 0,",
        "z cplx,",
        "znext cplx \u003d 0;",
        "",
        "extern mandelinit expr \u003d \"0\";",
        "",
        "z \u003d c if juliaset else mandelinit;",
        "",
        "extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "var color quat;",
        "",
        "while {",
        "znext \u003d function;",
        "not breakcondition(i, znext, z, zlast, c, p, color)",
        "} do {",
        "// advance to next values",
        "zlast \u003d z;",
        "z \u003d znext;",
        "}",
        "",
        "// return color",
        "color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "// if the fractal accumulates some values",
        "// like in traps or addends, here is a got place to do it.",
        "",
        "func breakcondition(i, znext, z, zlast, c, p, color) {",
        "func bailoutcolor() {",
        "extern bailout real \u003d 128;",
        "extern max_power real \u003d 2;",
        "var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "value \u003d bailoutvalue ;",
        "",
        "extern bailouttransfer expr \u003d \"value\";",
        "",
        "extern bailoutpalette palette \u003d [",
        "[#006, #26c, #fff, #fa0, #303]];",
        "",
        "color \u003d bailoutpalette bailouttransfer",
        "}",
        "",
        "func lakecolor() {",
        "extern epsilon real \u003d 1e-9;",
        "",
        "// the next ones are only used in 3d-fractals",
        "extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "value \u003d lakevalue;",
        "",
        "extern laketransfer expr \u003d",
        "\"arcnorm znext : value\";",
        "",
        "extern lakepalette palette \u003d [",
        "[#000, #000, #000, #000],",
        "[#f00, #ff0, #0f8, #00f],",
        "[#f88, #ff8, #afc, #88f]];",
        "",
        "color \u003d lakepalette laketransfer",
        "}",
        "",
        "{ lakecolor() ; true } if not next(i, maxdepth) else",
        "radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "}",
        "",
        "escapetime(c, breakcondition)",
        "}",
        "",
        "func get_color_test(c, value) {",
        "// this one is just here for testing light effects",
        "// circle + donut + green bg",
        "var rc \u003d rad c;",
        "",
        "{ value \u003d (circlefn rc + 5); int2lab #0000ff} if rc \u003c 1 else",
        "{ value \u003d circlefn abs (rc - 3); int2lab #ff0000 } if rc \u003d\u003c 4 and rc \u003e\u003d 2 else",
        "{ value \u003d -10; int2lab #00ff00 }",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings. * ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "var c cplx \u003d map(x, y);",
        "var value real;",
        "get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "var c00 cplx \u003d map(x, y),",
        "c10 cplx \u003d map(x + 1, y + 0.5),",
        "c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "var h00 real, h10 real, h01 real; // heights",
        "",
        "// color is already kinda super-sampled",
        "var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "// get height out of value",
        "func height(value) {",
        "    extern valuetransfer expr \u003d \"value\";",
        "    valuetransfer",
        "}",
        "",
        "h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "// get the normal vector (cross product)",
        "var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "// normalize np and nz",
        "var nlen \u003d sqrt(rad2 np + sqr nz);",
        "np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "// get light direction",
        "extern lightAngleToNormal real \u003d 0; // angle to normal",
        "extern lightDirectionAngle real \u003d 0; // 0 is to positive x.",
        "",
        "def lz \u003d cos lightAngleToNormal;",
        "",
        "def lx \u003d cos lightDirectionAngle * sqrt(1 - sqr lz);",
        "def ly \u003d sin lightDirectionAngle * sqrt(1 - sqr lz);",
        "",
        "// Lambert\u0027s law.",
        "var cosA real \u003d dot(lx : ly, np) + lz nz;",
        "//if cosA \u003c 0 then cosA \u003d 0;",
        "",
        "// diffuse reflexion with ambient factor",
        "extern ambientIntensity real \u003d 0.25;",
        "extern diffuseIntensity real \u003d 1;",
        "",
        "color.a \u003d color.a * (ambientIntensity + diffuseIntensity cosA);",
        "",
        "if color.a \u003c 0 then color.a \u003d 0;",
        "",
        "// Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "extern specularIntensity real \u003d 1;",
        "",
        "extern shininess real \u003d 8;",
        "",
        "extern specAngleToNormal real \u003d 0; // angle to normal",
        "extern specDirectionAngle real \u003d 0;",
        "",
        "def vz \u003d cos specAngleToNormal;",
        "",
        "def vx \u003d vz cos specDirectionAngle;",
        "def vy \u003d vz sin specDirectionAngle;",
        "",
        "// r \u003d 2 (n l) n - l; v \u003d 0:0:1",
        "",
        "var rz \u003d 2 cosA nz - lz;",
        "var rp \u003d 2 cosA np - lx:ly;",
        "",
        "var specularReflection \u003d dot(rp, vx : vy) + rz vz;",
        "",
        "// 100 because L in the Lab-Model is between 0 and 100",
        "if specularReflection \u003e 0 then",
        "color.a \u003d color.a + 100 * specularIntensity * specularReflection ^ shininess;",
        "",
        "color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "// two or three dimensions?",
        "def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "func drawaapixel(x, y) {",
        "0.25 (",
        "drawpixel(x - 0.375, y - 0.125) + ",
        "drawpixel(x + 0.125, y - 0.375) + ",
        "drawpixel(x + 0.375, y + 0.125) +",
        "drawpixel(x - 0.125, y + 0.375) ",
        ");",
        "}",
        "",
        "// which function to apply?",
        "def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "ambientIntensity": 0.75,
          "lightDirectionAngle": 0.0,
          "diffuseIntensity": 0.25,
          "lightAngleToNormal": 1.5,
          "specularIntensity": 4.0,
          "shininess": 64.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm c",
          "valuetransfer": "log(1+value)/100",
          "lakevalue": "znext.x"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            6.507486062353655E-5,
            5.217889361999447E-5,
            -5.217889361999447E-5,
            6.507486062353655E-5,
            0.4262835535239425,
            0.20045376258758857
          ]
        }
      }
    }
  },
  "that\u0027s a nice magnet": {
    "icon": "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\nxaDb/j95u4O269b8ggAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Two folds",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    extern foldinit2 expr \u003d \"0\";",
        "    var foldvalue2 cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern foldfn expr \u003d \"/(rad znext + 1) + foldvalue\";",
        "        extern foldfn2 expr \u003d \"dist(z, znext) + foldvalue2\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"foldvalue.x\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"log(value + 1)\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#a8f, #404, #fa4, #ff8, #f40, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue2.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : log(1 + log(1 + value)) \";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#fff, #fff, #fff, #fff, #fff, #fff],",
        "                [#a8f, #404, #fa4, #ff8, #f40, #008],",
        "                [#caf, #a4a, #fc8, #ffc, #f82, #24a],",
        "                [#000, #000, #000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; foldvalue2 \u003d foldfn2; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "reals": {
          "max_power": 2.0
        },
        "exprs": {
          "foldfn2": "(0.5 + 0.5 cos 6 arc(/(z - znext))) (1 - 2 atan(12 + /dist(z, znext)) / PI) + foldvalue2",
          "laketransfer": "arcnorm znext : value",
          "foldfn": "(0.5 + 0.5 cos 6 arc znext) (1 - 2 atan(12 + rad znext) / PI) + foldvalue",
          "function": "sqr((sqr z + p - 1) / (2z + p - 2))",
          "mandelinit": "0",
          "bailouttransfer": "value"
        },
        "scales": {
          "Scale": [
            0.12253110613342821,
            2.3709384526161545,
            -2.3709384526161545,
            0.12253110613342821,
            1.2453841320767045,
            -0.04356894301998244
          ]
        }
      }
    }
  },
  "this is fold": {
    "icon": "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\nrkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Preset for Convergent fractals like the Duck or Newton fractals",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d 0.4:-1.5;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    // This fractal is defined by z - R * f(z) / f\u0027(z) + p",
        "",
        "    extern R expr \u003d \"2\";",
        "    extern power expr \u003d \"6\";",
        "    extern argument expr \u003d \"c\";",
        "",
        "    extern mandelinit expr \u003d \"(argument * (R power - R)/(R - power))^/power\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"z - R * (z ^ power + argument) / derive(z ^ power + argument, z) + p\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// Here starts the script specific part",
        "",
        "func get_color(c, value) {",
        "",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "        extern foldfn expr \u003d \"dist(znext, z) + foldvalue\";",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : atan(value / rad znext)\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                    [#fff, #fff, #fff, #fff],",
        "                    [#f88, #ff8, #8fc, #88f],",
        "                    [#f00, #ff0, #0f8, #00f],",
        "                    [#000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { foldvalue \u003d foldfn; false } if next(i, maxdepth) and dist2(z, znext) \u003e sqr epsilon else",
        "        { lakecolor() ; true }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "laketransfer": "atan(value / rad znext)",
          "R": "1",
          "foldfn": "(0.5 + 0.5 cos 4 arc (/(z-znext))) * (1 - 2 atan (12+1/rad(z-znext))/PI) + foldvalue",
          "function": "newton(z^3 + p, z)",
          "mandelinit": "c"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -65536,
              -256,
              -16711800,
              -16776961
            ]
          }
        },
        "scales": {
          "Scale": [
            1.2422126996602627,
            -0.0025220916638728497,
            0.0025220916638728497,
            1.2422126996602627,
            -0.2966446127088015,
            -0.01610874840802687
          ]
        }
      }
    }
  },
  "trap seahorse": {
    "icon": "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\nRK5CYII\u003d\n",
    "fractal": {
      "source": [
        "// Min/Max Orbit trap: determines the minimum and maximum distance",
        "// to the given trap.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "func pipe(z, color) {",
        "    var ret quat \u003d color;",
        "    var v \u003d circlefn (1 - z);",
        "    var a \u003d (200 - 4 ret.a);",
        "    ret.a \u003d a sqr v + (100 - a) v;",
        "    ret.d \u003d 1 - v (1 - opacity);",
        "    ret",
        "}",
        "",
        "func get_color(c, value) { ",
        "    var trapcolorfront quat \u003d 0:0:0:0; // later traps in front",
        "    var trapcolorback quat \u003d 0:0:0:0; // later traps behind",
        "",
        "    var trapfirst real, trapindex \u003d -1;",
        "    var traplast real;",
        "",
        "    // draw single pixel",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        // if true, color contains the lab color (quat)",
        "    ",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 128;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(20 + i + smooth_i)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#006, #26c, #fff, #fa0, #303]];",
        "        ",
        "            color \u003d over(trapcolorfront, bailoutpalette bailouttransfer);",
        "            if trapindex \u003e\u003d 0 then value \u003d traplast;",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "        ",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d ",
        "                \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000],",
        "                [#f00, #ff0, #0f8, #00f],",
        "                [#f88, #ff8, #afc, #88f]];",
        "",
        "            color \u003d over(trapcolorback, lakepalette laketransfer);",
        "            if trapindex \u003e\u003d 0 then value \u003d trapfirst;",
        "        }",
        "",
        "        // update trap",
        "        func updatetrap() {",
        "            extern trapwidth real \u003d 0.1;",
        "",
        "            extern trapfn expr \u003d \"line(0:0, 1:0, znext)\";",
        "            ",
        "            var trapdist real \u003d 1 - trapfn / trapwidth;",
        "",
        "            if trapdist \u003e 0 then {",
        "                // we are inside the trap",
        "                extern trapvalue expr \u003d \"trapdist\";",
        "                ",
        "                extern traptransfer expr \u003d \"log(i + 1)\";",
        "                ",
        "                extern trappalette palette \u003d [",
        "                        [#4b0082, #800000, #ffd700, #000080, #f5deb3]];",
        "",
        "                extern opacity real \u003d 0.67;",
        "                ",
        "                var fg \u003d pipe(trapdist, trappalette traptransfer);",
        "                ",
        "                trapcolorfront \u003d over(fg, trapcolorfront);",
        "                trapcolorback \u003d over(trapcolorback, fg);",
        "                ",
        "                if trapindex \u003c 0 then {",
        "                    trapfirst \u003d trapvalue;",
        "                    traplast \u003d trapfirst;",
        "                    trapindex \u003d i",
        "                } else {",
        "                    traplast \u003d trapvalue;",
        "                };",
        "                ",
        "                trapindex \u003d i;",
        "            }           ",
        "        }",
        "",
        "        updatetrap();",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor())",
        "",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "opacity": 1.0,
          "trapwidth": 0.01
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "value",
          "valuetransfer": "value/999",
          "trapfn": "min(circle(-0.75:0, 1, znext),circle(-1:0, 1, znext))"
        },
        "palettes": {
          "lakepalette": {
            "width": 4,
            "height": 1,
            "colors": [
              -16777216,
              -16777216,
              -16777216,
              -16777216
            ]
          },
          "bailoutpalette": {
            "width": 5,
            "height": 1,
            "colors": [
              -16777216,
              -10066330,
              -1,
              -3815995,
              -14474461
            ]
          }
        },
        "scales": {
          "Scale": [
            -0.0011397585723349132,
            0.006186110532257444,
            -0.006186110532257444,
            -0.0011397585723349132,
            -0.7445266849869931,
            -0.12137776679962126
          ]
        }
      }
    }
  },
  "twofold": {
    "icon": "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\ny4DIrSga/xsBMsxgKwMw+AAAAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Two folds",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    extern foldinit2 expr \u003d \"0\";",
        "    var foldvalue2 cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern foldfn expr \u003d \"/(rad znext + 1) + foldvalue\";",
        "        extern foldfn2 expr \u003d \"dist(z, znext) + foldvalue2\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"foldvalue.x\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"log(value + 1)\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#a8f, #404, #fa4, #ff8, #f40, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"foldvalue2.x\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : log(1 + log(1 + value)) \";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#fff, #fff, #fff, #fff, #fff, #fff],",
        "                [#a8f, #404, #fa4, #ff8, #f40, #008],",
        "                [#caf, #a4a, #fc8, #ffc, #f82, #24a],",
        "                [#000, #000, #000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; foldvalue2 \u003d foldfn2; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "exprs": {
          "laketransfer": "arcnorm znext : value",
          "foldfn2": "(0.5 + 0.5 cos 6 arc(/(z - znext))) (1 - 2 atan(12 + /dist(z, znext)) / PI) + foldvalue2",
          "foldfn": "(0.5 + 0.5 cos 6 arc znext) (1 - 2 atan(12 + rad znext) / PI) + foldvalue",
          "bailouttransfer": "value"
        },
        "scales": {
          "Scale": [
            1.5813275575637817,
            -0.26208868622779846,
            0.26208868622779846,
            1.5813275575637817,
            -0.8022132515907288,
            0.024959176778793335
          ]
        }
      }
    }
  },
  "twofold 3d": {
    "icon": "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\u003d\n",
    "fractal": {
      "source": [
        "// Two folds",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    extern foldinit2 expr \u003d \"0\";",
        "    var foldvalue2 cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "        extern foldfn2 expr \u003d \"/cosh(/dist(znext, z)) + foldvalue2\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                    [#a8f, #404, #fa4, #ff8, #f40, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + foldvalue2.x)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d",
        "                    \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#fff, #fff, #fff, #fff, #fff, #fff],",
        "                [#a8f, #404, #fa4, #ff8, #f40, #008],",
        "                [#caf, #a4a, #fc8, #ffc, #f82, #24a],",
        "                [#000, #000, #000, #000, #000, #000]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; foldvalue2 \u003d foldfn2; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "laketransfer": "arcnorm znext : log(1 + foldvalue2.x)",
          "foldfn2": "(0.5 + 0.5 cos 6 arc (z - znext)) / (12 + rad znext + /dist(znext, z)) + foldvalue2",
          "valuetransfer": "log(value+200)",
          "lakevalue": "log(1 + foldvalue.x)",
          "foldfn": "/cosh(rad znext + /dist(znext, z)) + foldvalue",
          "bailoutvalue": "log(1 + foldvalue.x)",
          "bailouttransfer": "log(1 + foldvalue2.x) : value"
        },
        "palettes": {
          "bailoutpalette": {
            "width": 6,
            "height": 4,
            "colors": [
              -5601025,
              -12320700,
              -21948,
              -120,
              -48128,
              -16777080,
              -7841311,
              -9539484,
              -3441298,
              -11164776,
              -1322113,
              -13611959,
              -9772094,
              -16572907,
              -9076161,
              -5730088,
              -10155743,
              -4398859,
              -12338727,
              -12770009,
              -120,
              -1,
              -8944765,
              -11768207
            ]
          }
        },
        "scales": {
          "Scale": [
            0.0015840617912150044,
            -0.008562916910313446,
            0.008562916910313446,
            0.0015840617912150044,
            -0.7449207769481601,
            -0.13223201647345106
          ]
        }
      }
    }
  },
  "z3": {
    "icon": "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\nAABJRU5ErkJggg\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Slight variation of Default, simply added branch_avg in break condition.",
        "var x int, y int, color int;",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "func get_color(c, value) { ",
        "    var branch_avg real \u003d 0; // sum of addends",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "        extern addend_start int \u003d 2;",
        "        extern addend expr \u003d \"0.5 + 0.5 sin(6 arc znext)\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 512;",
        "            extern max_power real \u003d 2;",
        "            var smooth_i \u003d smoothen(znext, bailout, max_power) ;",
        "            ",
        "            // and also add addend according to smooth_i value",
        "            branch_avg \u003d (branch_avg + smooth_i addend) / ",
        "                (i + smooth_i - addend_start);",
        "                ",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"branch_avg\";",
        "            value \u003d bailoutvalue;",
        "",
        "            extern bailouttransfer expr \u003d",
        "                \"value : log(i + smooth_i)\";",
        "                ",
        "            extern bailoutpalette palette \u003d [",
        "                [#f80, #f22, #40f, #008, #080, #ff8],",
        "                [#fff, #000, #fff, #000, #fff, #000]];",
        "",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "    ",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "            ",
        "            extern lakevalue expr \u003d \"0\";",
        "            value \u003d lakevalue;",
        "            ",
        "            extern laketransfer expr \u003d \"value\";",
        "            extern lakepalette palette \u003d [[#000]];",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else // i \u003c maxdepth? then lake.",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else // bailout or epsilon? ",
        "        { branch_avg \u003d branch_avg + addend ; false } if i \u003e\u003d addend_start else // do some work here",
        "        false",
        "    }",
        "",
        "    // draw single pixel",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *                 ",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) { ",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "    ",
        "    var h00 real, h10 real, h01 real; // heights",
        "    ",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "    ",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "    ",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "        ",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "        ",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind, ",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "    ",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "    ",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "    ",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) + ",
        "            drawpixel(x + 0.125, y - 0.375) + ",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)         ",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the drawing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "ints": {
          "maxdepth": 1200
        },
        "reals": {
          "max_power": 3.0
        },
        "bools": {
          "light": true
        },
        "exprs": {
          "function": "sub(z^3, 3 c z, p)",
          "bailoutvalue": "i+smooth_i",
          "mandelinit": "sqrt c",
          "bailouttransfer": "branch_avg"
        },
        "scales": {
          "Scale": [
            -0.0036459737294165114,
            0.002459088086311772,
            -0.002459088086311772,
            -0.0036459737294165114,
            0.4050585045238142,
            -0.10971667332318863
          ]
        }
      }
    }
  },
  "zlogz julia set": {
    "icon": "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\u003d\u003d\n",
    "fractal": {
      "source": [
        "// Fold",
        "var x int, y int, color int;",
        "",
        "",
        "extern maxdepth int \u003d 120;",
        "",
        "// some further arguments",
        "extern juliaset bool \u003d false;",
        "extern juliapoint cplx \u003d -0.8:0.16;",
        "",
        "// c: coordinates, breakcondition: a function whether we should stop,",
        "// value: a real variable to return some kind of value",
        "//        used in 3d-types for the height.",
        "// returns a quat representing the color",
        "func escapetime(c, breakcondition) {",
        "    var i int \u003d 0,",
        "        p cplx \u003d juliapoint if juliaset else c,",
        "        zlast cplx \u003d 0,",
        "        z cplx,",
        "        znext cplx \u003d 0;",
        "",
        "    extern mandelinit expr \u003d \"0\";",
        "",
        "    z \u003d c if juliaset else mandelinit;",
        "",
        "    extern function expr \u003d \"mandelbrot(z, p)\";",
        "",
        "    var color quat;",
        "",
        "    while {",
        "        znext \u003d function;",
        "        not breakcondition(i, znext, z, zlast, c, p, color)",
        "    } do {",
        "        // advance to next values",
        "        zlast \u003d z;",
        "        z \u003d znext;",
        "    }",
        "",
        "    // return color",
        "    color",
        "}",
        "",
        "// everything that is drawn must have a get_color-function.",
        "",
        "// c \u003d coordinates (scaled)",
        "// value is a real variable for z-information in 3D",
        "// but also otherwise convenient to separate drawing",
        "// algorithm from transfer",
        "// returns color.",
        "func get_color(c, value) {",
        "",
        "    // if the fractal accumulates some values",
        "    // like in traps or addends, here is a got place to do it.",
        "    extern foldinit expr \u003d \"0\";",
        "    var foldvalue cplx \u003d foldinit;",
        "",
        "    func breakcondition(i, znext, z, zlast, c, p, color) {",
        "",
        "        extern foldfn expr \u003d \"/cosh rad znext + foldvalue\";",
        "",
        "        func bailoutcolor() {",
        "            extern bailout real \u003d 65536;",
        "            extern max_power real \u003d 2; // just for compatibility",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern bailoutvalue expr \u003d \"log(1 + foldvalue.x)\";",
        "            value \u003d bailoutvalue ;",
        "",
        "            extern bailouttransfer expr \u003d \"value\";",
        "",
        "            extern bailoutpalette palette \u003d [",
        "                [#0f8, #080, #ff8, #f80, #f20, #008]];",
        "",
        "            color \u003d bailoutpalette bailouttransfer",
        "        }",
        "",
        "        func lakecolor() {",
        "            extern epsilon real \u003d 1e-9;",
        "",
        "            // the next ones are only used in 3d-fractals",
        "            extern lakevalue expr \u003d \"log(1 + rad znext)\";",
        "            value \u003d lakevalue;",
        "",
        "            extern laketransfer expr \u003d \"arcnorm znext : value\";",
        "",
        "            extern lakepalette palette \u003d [",
        "                [#000, #000, #000, #000, #000, #000],",
        "                [#0f8, #080, #ff8, #f80, #f20, #008],",
        "                [#4fa, #3a3, #ffa, #fa3, #f63, #33a],",
        "                [#fff, #fff, #fff, #fff, #fff, #fff]];",
        "",
        "            color \u003d lakepalette laketransfer",
        "        }",
        "",
        "        { lakecolor() ; true } if not next(i, maxdepth) else",
        "        true if radrange(znext, z, bailout, epsilon, bailoutcolor(), lakecolor()) else",
        "        { foldvalue \u003d foldfn; false }",
        "    }",
        "",
        "    escapetime(c, breakcondition)",
        "}",
        "",
        "",
        "// ******************************************",
        "// * Next are just drawing procedures. They *",
        "// * should be the same for all drawings.   *",
        "// ******************************************",
        "",
        "extern supersampling bool \u003d false;",
        "extern light bool \u003d false;",
        "",
        "// drawpixel for 2D",
        "func drawpixel_2d(x, y) {",
        "    var c cplx \u003d map(x, y);",
        "    var value real;",
        "    get_color(c, value) // value is not used",
        "}",
        "",
        "// drawpixel for 3D",
        "func drawpixel_3d(x, y) {",
        "    var c00 cplx \u003d map(x, y),",
        "        c10 cplx \u003d map(x + 1, y + 0.5),",
        "        c01 cplx \u003d map(x + 0.5, y + 1);",
        "",
        "    var h00 real, h10 real, h01 real; // heights",
        "",
        "    // color is already kinda super-sampled",
        "    var color \u003d (get_color(c00, h00) + get_color(c10, h10) + get_color(c01, h01)) / 3;",
        "",
        "    // get height out of value",
        "    func height(value) {",
        "        extern valuetransfer expr \u003d \"value\";",
        "        valuetransfer",
        "    }",
        "",
        "    h00 \u003d height h00; h01 \u003d height h01; h10 \u003d height h10;",
        "",
        "    // get the normal vector (cross product)",
        "    var xp \u003d c10 - c00, xz \u003d h10 - h00;",
        "    var yp \u003d c01 - c00, yz \u003d h01 - h00;",
        "",
        "    var np cplx \u003d (xp.y yz - xz yp.y) : (xz yp.x - xp.x yz);",
        "    var nz real \u003d xp.x yp.y - xp.y yp.x;",
        "",
        "    // normalize np and nz",
        "    var nlen \u003d sqrt(rad2 np + sqr nz);",
        "    np \u003d np / nlen; nz \u003d nz / nlen;",
        "",
        "    // get light direction",
        "    extern lightvector cplx \u003d -0.667 : -0.667; // direction from which the light is coming",
        "    def lz \u003d sqrt(1 - sqr re lightvector - sqr im lightvector); // this is inlined",
        "",
        "    // Lambert\u0027s law.",
        "    var cos_a real \u003d dot(lightvector, np) + lz nz;",
        "",
        "    // diffuse reflexion with ambient factor",
        "    extern lightintensity real \u003d 1;",
        "    extern ambientlight real \u003d 0.5;",
        "",
        "    // if lumen is negative it is behind,",
        "    // but I tweak it a bit for the sake of the looks:",
        "    // cos_a \u003d -1 (which is super-behind) \u003d\u003d\u003e 0",
        "    // cos_a \u003d 0 \u003d\u003d\u003e ambientlight",
        "    // cos_a \u003d 1 \u003d\u003d\u003e lightintensity",
        "",
        "    // for a mathematically correct look use the following:",
        "    // if cos_a \u003c 0 then cos_a \u003d 0;",
        "    // color.a \u003d color.a * (ambientlight + lightintensity lumen);",
        "",
        "    def d \u003d lightintensity / 2; // will be inlined later",
        "",
        "    // Change L in Lab-Color",
        "    color.a \u003d color.a (((d - ambientlight) cos_a + d) cos_a + ambientlight);",
        "",
        "    // Next, specular reflection. Viewer is always assumed to be in direction (0,0,1)",
        "    extern specularintensity real \u003d 1;",
        "",
        "    extern shininess real \u003d 8;",
        "",
        "    // r \u003d 2 n l - l; v \u003d 0:0:1",
        "    var spec_refl \u003d 2 cos_a nz - lz;",
        "",
        "    // 100 because L in the Lab-Model is between 0 and 100",
        "    if spec_refl \u003e 0 then",
        "        color.a \u003d color.a + 100 * specularintensity * spec_refl ^ shininess;",
        "",
        "    color",
        "}",
        "",
        "func do_pixel(x, y) {",
        "    // two or three dimensions?",
        "    def drawpixel \u003d drawpixel_3d if light else drawpixel_2d;",
        "",
        "    func drawaapixel(x, y) {",
        "        0.25 (",
        "            drawpixel(x - 0.375, y - 0.125) +",
        "            drawpixel(x + 0.125, y - 0.375) +",
        "            drawpixel(x + 0.375, y + 0.125) +",
        "            drawpixel(x - 0.125, y + 0.375)",
        "        );",
        "    }",
        "",
        "    // which function to apply?",
        "    def fn \u003d drawpixel if not supersampling else drawaapixel;",
        "",
        "    color \u003d lab2int fn(x, y)",
        "}",
        "",
        "// and finally call the draing procedure",
        "do_pixel(x, y)"
      ],
      "arguments": {
        "cplxs": {
          "juliapoint": [
            0.40566542126897226,
            -0.02148212391923303
          ]
        },
        "bools": {
          "light": true,
          "juliaset": true
        },
        "exprs": {
          "valuetransfer": "/value",
          "function": "z log z + p",
          "mandelinit": "E^-1"
        },
        "scales": {
          "Scale": [
            -0.030642264820219724,
            -0.06309255305046693,
            0.06309255305046693,
            -0.030642264820219724,
            0.49627638918567474,
            -0.21058204831548333
          ]
        }
      }
    }
  }
}